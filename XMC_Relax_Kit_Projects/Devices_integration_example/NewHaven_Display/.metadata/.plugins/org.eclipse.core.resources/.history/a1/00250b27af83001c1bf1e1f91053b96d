/*
 * main.c
 *
 *  Created on: 2022 Jan 28 22:53:55
 *  Author: Ricardo
 */




#include <DAVE.h>                 //Declarations from DAVE Code Generation (includes SFR declaration)


/**

 * @brief main() - Application entry point
 *
 * <b>Details of function</b><br>
 * This routine is the application entry point. It is invoked by the device startup code. It is responsible for
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */

  if(status != DAVE_STATUS_SUCCESS)
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
  }
  	  SPI_MASTER_Init (&SPI_MASTER_0);
  	  DIGITAL_IO_SetOutputLow(&RESET);

      DIGITAL_IO_SetOutputHigh(&RESET);
	  DIGITAL_IO_SetOutputHigh(&REGISTER_SIGNAL);


      // display off, analog reset
      OLED_Command_160128RGB(0x04);
      OLED_Data_160128RGB(0x01);

       // normal mode
      OLED_Command_160128RGB(0x04);
      OLED_Data_160128RGB(0x00);

      // display off
      OLED_Command_160128RGB(0x06);
      OLED_Data_160128RGB(0x00);

      // turn on internal oscillator using external resistor
      OLED_Command_160128RGB(0x02);
      OLED_Data_160128RGB(0x01);

      // 90 hz frame rate, divider 0
      OLED_Command_160128RGB(0x03);
      OLED_Data_160128RGB(0x30);

      // duty cycle 127
      OLED_Command_160128RGB(0x28);
      OLED_Data_160128RGB(0x7F);

      // start on line 0
      OLED_Command_160128RGB(0x29);
      OLED_Data_160128RGB(0x00);

      // rgb_if
      OLED_Command_160128RGB(0x14);
      OLED_Data_160128RGB(0x31);

      // Set Memory Write Mode
      OLED_Command_160128RGB(0x16);
      OLED_Data_160128RGB(0x76);

      // driving current r g b (uA)
      OLED_Command_160128RGB(0x10);
      OLED_Data_160128RGB(0x45);
      OLED_Command_160128RGB(0x11);
      OLED_Data_160128RGB(0x34);
      OLED_Command_160128RGB(0x12);
      OLED_Data_160128RGB(0x33);

      // precharge time r g b
      OLED_Command_160128RGB(0x08);
      OLED_Data_160128RGB(0x04);
      OLED_Command_160128RGB(0x09);
      OLED_Data_160128RGB(0x05);
      OLED_Command_160128RGB(0x0A);
      OLED_Data_160128RGB(0x05);

      // precharge current r g b (uA)
      OLED_Command_160128RGB(0x0B);
      OLED_Data_160128RGB(0x9D);
      OLED_Command_160128RGB(0x0C);
      OLED_Data_160128RGB(0x8C);
      OLED_Command_160128RGB(0x0D);
      OLED_Data_160128RGB(0x57);

      // Set Reference Voltage Controlled by External Resister
      OLED_Command_160128RGB(0x80);
      OLED_Data_160128RGB(0x00);

      // mode set
      OLED_Command_160128RGB(0x13);
      OLED_Data_160128RGB(0xA0);

      OLED_SetColumnAddress_160128RGB(0, 159);
      OLED_SetRowAddress_160128RGB(0, 127);

      // Display On
      OLED_Command_160128RGB(0x06);
      OLED_Data_160128RGB(0x01);

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
}

void OLED_Command_160128RGB(uint8_t command){
	  DIGITAL_IO_SetOutputLow(&REGISTER_SIGNAL);

	SPI_MASTER_Transmit(&SPI_MASTER_0, command, sizeof(command));
	  DIGITAL_IO_SetOutputHigh(&REGISTER_SIGNAL);

}

void OLED_Data_160128RGB(uint8_t data){
	SPI_MASTER_Transmit(&SPI_MASTER_0, command, sizeof(command));

}

void OLED_SetColumnAddress_160128RGB(unsigned char x_start, unsigned char x_end){
    OLED_Command_160128RGB(0x17);
    OLED_Data_160128RGB(x_start);
    OLED_Command_160128RGB(0x18);
    OLED_Data_160128RGB(x_end);

}

void OLED_SetRowAddress_160128RGB(unsigned char x_start, unsigned char x_end){
    OLED_Command_160128RGB(0x19);
    OLED_Data_160128RGB(y_start);
    OLED_Command_160128RGB(0x1A);
    OLED_Data_160128RGB(y_end);
}


