
NewHaven_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028c0  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000238  1ffe8800  0c0028c0  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000018  1ffe8a38  0c002af8  00010a38  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000009b8  00000000  00000000  00010a38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c735  00000000  00000000  000113f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001da0  00000000  00000000  0001db25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005169  00000000  00000000  0001f8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002824  00000000  00000000  00024a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000671a  00000000  00000000  00027254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000522c  00000000  00000000  0002d96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  00032b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000003fe  00000000  00000000  0003341a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 39 20 00 08     ............9 ..
 80001cc:	29 20 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ) ..............
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0028c0 	.word	0x0c0028c0
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000238 	.word	0x00000238
 8000254:	0c0028c0 	.word	0x0c0028c0
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8a38 	.word	0x1ffe8a38
 8000264:	00000018 	.word	0x00000018
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08002751 	.word	0x08002751
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08002735 	.word	0x08002735

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f001 ff0f 	bl	80020d0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f001 ff77 	bl	80021a4 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 ff56 	bl	8002190 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2003ffc0 	.word	0x2003ffc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed2 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2003ffc0 	.word	0x2003ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8bf 	bl	8000710 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fa81 	bl	8000a98 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 fab9 	bl	8000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 faa4 	bl	8000af0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f923 	bl	8000804 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa3c 	bl	8000a4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f931 	bl	8000840 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f954 	bl	8000890 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f93b 	bl	8000868 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f95e 	bl	80008b8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fabe 	bl	8000b84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fae3 	bl	8000bd4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d102      	bne.n	8000628 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000622:	f000 fafb 	bl	8000c1c <XMC_SCU_CLOCK_DisableSystemPll>
 8000626:	e014      	b.n	8000652 <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000628:	f000 fae8 	bl	8000bfc <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	8899      	ldrh	r1, [r3, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000638:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063e:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4608      	mov	r0, r1
 8000648:	4611      	mov	r1, r2
 800064a:	462a      	mov	r2, r5
 800064c:	4623      	mov	r3, r4
 800064e:	f000 faf5 	bl	8000c3c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800065a:	d103      	bne.n	8000664 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800065c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000660:	f000 f856 	bl	8000710 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000664:	f7ff fe2a 	bl	80002bc <SystemCoreClockUpdate>
}
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bdb0      	pop	{r4, r5, r7, pc}
 800066e:	bf00      	nop

08000670 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0f1b      	lsrs	r3, r3, #28
 800067c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000684:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	461a      	mov	r2, r3
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000694:	4413      	add	r3, r2
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	50004414 	.word	0x50004414

080006a8 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	0f1b      	lsrs	r3, r3, #28
 80006b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006bc:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006cc:	4413      	add	r3, r2
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	4013      	ands	r3, r2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	5000440c 	.word	0x5000440c

080006f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006f4:	f7ff fef2 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006f8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	50004600 	.word	0x50004600

08000710 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	50004600 	.word	0x50004600

08000738 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	50004600 	.word	0x50004600

08000760 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	50004600 	.word	0x50004600

08000788 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d108      	bne.n	80007aa <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007a2:	f023 0301 	bic.w	r3, r3, #1
 80007a6:	60d3      	str	r3, [r2, #12]
 80007a8:	e007      	b.n	80007ba <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007aa:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	60d3      	str	r3, [r2, #12]
  }
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004710 	.word	0x50004710

080007c8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007d2:	bf00      	nop
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1f8      	bne.n	80007d4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007e2:	4907      	ldr	r1, [pc, #28]	; (8000800 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4313      	orrs	r3, r2
 80007f0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004000 	.word	0x50004000
 8000800:	50004300 	.word	0x50004300

08000804 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800080e:	bf00      	nop
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000812:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f8      	bne.n	8000810 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800081e:	4907      	ldr	r1, [pc, #28]	; (800083c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000828:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4313      	orrs	r3, r2
 800082c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	50004000 	.word	0x50004000
 800083c:	50004300 	.word	0x50004300

08000840 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000848:	4906      	ldr	r1, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000856:	4313      	orrs	r3, r2
 8000858:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	50004600 	.word	0x50004600

08000868 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000874:	6a1b      	ldr	r3, [r3, #32]
 8000876:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087e:	4313      	orrs	r3, r2
 8000880:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	50004600 	.word	0x50004600

08000890 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800089c:	691b      	ldr	r3, [r3, #16]
 800089e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004600 	.word	0x50004600

080008b8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008ce:	4313      	orrs	r3, r2
 80008d0:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	50004600 	.word	0x50004600

080008e0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000910:	4906      	ldr	r1, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800091e:	4313      	orrs	r3, r2
 8000920:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	50004600 	.word	0x50004600

08000930 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000938:	4906      	ldr	r1, [pc, #24]	; (8000954 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000946:	4313      	orrs	r3, r2
 8000948:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	50004600 	.word	0x50004600

08000958 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	0f1b      	lsrs	r3, r3, #28
 8000964:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800096c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	461a      	mov	r2, r3
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 800097c:	4413      	add	r3, r2
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	601a      	str	r2, [r3, #0]
}
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	50004648 	.word	0x50004648

08000990 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	0f1b      	lsrs	r3, r3, #28
 800099c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009a4:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009b4:	4413      	add	r3, r2
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf14      	ite	ne
 80009c0:	2301      	movne	r3, #1
 80009c2:	2300      	moveq	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	50004640 	.word	0x50004640

080009d8 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009e2:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009fa:	4913      	ldr	r1, [pc, #76]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	3b01      	subs	r3, #1
 8000a00:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a16:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f023 0310 	bic.w	r3, r3, #16
 8000a22:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a30:	bf00      	nop
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f9      	beq.n	8000a32 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	50004710 	.word	0x50004710

08000a4c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a60:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d10e      	bne.n	8000a86 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a72:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f7ff fd49 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a7a:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a84:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f7ff fd40 	bl	800050c <XMC_SCU_lDelay>
}
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	50004710 	.word	0x50004710

08000a98 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d109      	bne.n	8000abc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000aae:	bf00      	nop
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f9      	beq.n	8000ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00a      	beq.n	8000ade <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ace:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000ad0:	bf00      	nop
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f9      	bne.n	8000ad2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	50004200 	.word	0x50004200
 8000aec:	50004400 	.word	0x50004400

08000af0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0308 	and.w	r3, r3, #8
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	50004300 	.word	0x50004300

08000b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b1c:	f7ff fd24 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b2a:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b2c:	bf00      	nop
 8000b2e:	f7ff fd0f 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f8      	beq.n	8000b2e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000b3c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b40:	f7ff fd12 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b46:	2208      	movs	r2, #8
 8000b48:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000b4a:	bf00      	nop
 8000b4c:	f7ff fd00 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f8      	beq.n	8000b4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000b5a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000b5e:	f7ff fd03 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b6e:	bf00      	nop
 8000b70:	f7ff fcee 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f8      	beq.n	8000b70 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	50004300 	.word	0x50004300

08000b84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b92:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b94:	4d0d      	ldr	r5, [pc, #52]	; (8000bcc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b9e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ba2:	f001 faf5 	bl	8002190 <OSCHP_GetFrequency>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000baa:	fba3 2302 	umull	r2, r3, r3, r2
 8000bae:	0d1b      	lsrs	r3, r3, #20
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bb4:	4323      	orrs	r3, r4
 8000bb6:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000bb8:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bba:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000bc2:	6053      	str	r3, [r2, #4]
}
 8000bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	50004710 	.word	0x50004710
 8000bcc:	50004700 	.word	0x50004700
 8000bd0:	6b5fca6b 	.word	0x6b5fca6b

08000bd4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000be0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000be4:	bf0c      	ite	eq
 8000be6:	2301      	moveq	r3, #1
 8000be8:	2300      	movne	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	50004710 	.word	0x50004710

08000bfc <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c00:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0a:	f023 0302 	bic.w	r3, r3, #2
 8000c0e:	6053      	str	r3, [r2, #4]
}
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	50004710 	.word	0x50004710

08000c1c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c20:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	6053      	str	r3, [r2, #4]
}
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	50004710 	.word	0x50004710

08000c3c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60ba      	str	r2, [r7, #8]
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4603      	mov	r3, r0
 8000c48:	81fb      	strh	r3, [r7, #14]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c4e:	89fb      	ldrh	r3, [r7, #14]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fd99 	bl	8000788 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c56:	7b7b      	ldrb	r3, [r7, #13]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	f040 8084 	bne.w	8000d66 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c64:	f001 fa94 	bl	8002190 <OSCHP_GetFrequency>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000c6c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c70:	0c9b      	lsrs	r3, r3, #18
 8000c72:	059b      	lsls	r3, r3, #22
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e002      	b.n	8000c7e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c78:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c7c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	fb02 f203 	mul.w	r2, r2, r3
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	4a42      	ldr	r2, [pc, #264]	; (8000d9c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	0d9b      	lsrs	r3, r3, #22
 8000c9a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c9c:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c9e:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000ca8:	4a3d      	ldr	r2, [pc, #244]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cb4:	493a      	ldr	r1, [pc, #232]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000cbc:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	0212      	lsls	r2, r2, #8
 8000cc4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ccc:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cd8:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce2:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000ce4:	4a2e      	ldr	r2, [pc, #184]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f023 0310 	bic.w	r3, r3, #16
 8000cee:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000cf0:	4a2b      	ldr	r2, [pc, #172]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfa:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cfc:	bf00      	nop
 8000cfe:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f9      	beq.n	8000cfe <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d16:	bf00      	nop
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f9      	bne.n	8000d18 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000d28:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2c:	095b      	lsrs	r3, r3, #5
 8000d2e:	0d9b      	lsrs	r3, r3, #22
 8000d30:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d32:	6a3a      	ldr	r2, [r7, #32]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d202      	bcs.n	8000d40 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d3a:	6938      	ldr	r0, [r7, #16]
 8000d3c:	f000 f838 	bl	8000db0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	085b      	lsrs	r3, r3, #1
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	0d9b      	lsrs	r3, r3, #22
 8000d4e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d50:	6a3a      	ldr	r2, [r7, #32]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d202      	bcs.n	8000d5e <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d58:	6938      	ldr	r0, [r7, #16]
 8000d5a:	f000 f829 	bl	8000db0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d5e:	6a38      	ldr	r0, [r7, #32]
 8000d60:	f000 f826 	bl	8000db0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d64:	e015      	b.n	8000d92 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d66:	490e      	ldr	r1, [pc, #56]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d70:	6a3b      	ldr	r3, [r7, #32]
 8000d72:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d74:	4313      	orrs	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d84:	bf00      	nop
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f9      	beq.n	8000d86 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	aaaaaaab 	.word	0xaaaaaaab
 8000da0:	50004710 	.word	0x50004710
 8000da4:	f08080ff 	.word	0xf08080ff
 8000da8:	88888889 	.word	0x88888889
 8000dac:	b60b60b7 	.word	0xb60b60b7

08000db0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000dcc:	2032      	movs	r0, #50	; 0x32
 8000dce:	f7ff fb9d 	bl	800050c <XMC_SCU_lDelay>
}
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	50004710 	.word	0x50004710

08000ddc <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
 8000de8:	4613      	mov	r3, r2
 8000dea:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	2303      	movs	r3, #3
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000e06:	78bb      	ldrb	r3, [r7, #2]
 8000e08:	78f9      	ldrb	r1, [r7, #3]
 8000e0a:	0049      	lsls	r1, r1, #1
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f884 	bl	8000f38 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	795b      	ldrb	r3, [r3, #5]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d112      	bne.n	8000e5e <XMC_SPI_CH_Init+0x3e>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d007      	beq.n	8000e50 <XMC_SPI_CH_Init+0x30>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	4619      	mov	r1, r3
 8000e48:	2202      	movs	r2, #2
 8000e4a:	f000 f931 	bl	80010b0 <XMC_USIC_CH_SetBaudrateEx>
 8000e4e:	e006      	b.n	8000e5e <XMC_SPI_CH_Init+0x3e>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	4619      	mov	r1, r3
 8000e58:	2202      	movs	r2, #2
 8000e5a:	f000 f8b9 	bl	8000fd0 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <XMC_SPI_CH_Init+0x7c>)
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	795b      	ldrb	r3, [r3, #5]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d107      	bne.n	8000e84 <XMC_SPI_CH_Init+0x64>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	799b      	ldrb	r3, [r3, #6]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8000e78:	f043 030b 	orr.w	r3, r3, #11
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	891b      	ldrh	r3, [r3, #8]
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	073f0102 	.word	0x073f0102

08000ea0 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eae:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000eda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d103      	bne.n	8000eea <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee6:	81fb      	strh	r3, [r7, #14]
 8000ee8:	e003      	b.n	8000ef2 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000ef0:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <XMC_SPI_CH_DisableEvent>:
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8000f14:	43db      	mvns	r3, r3
 8000f16:	401a      	ands	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	035b      	lsls	r3, r3, #13
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	401a      	ands	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <XMC_USIC_CH_Enable+0x74>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d003      	beq.n	8000f50 <XMC_USIC_CH_Enable+0x18>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <XMC_USIC_CH_Enable+0x78>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d103      	bne.n	8000f58 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <XMC_USIC_CH_Enable+0x7c>)
 8000f52:	f000 f9f9 	bl	8001348 <XMC_USIC_Enable>
 8000f56:	e016      	b.n	8000f86 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <XMC_USIC_CH_Enable+0x80>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d003      	beq.n	8000f68 <XMC_USIC_CH_Enable+0x30>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <XMC_USIC_CH_Enable+0x84>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d103      	bne.n	8000f70 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8000f68:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <XMC_USIC_CH_Enable+0x88>)
 8000f6a:	f000 f9ed 	bl	8001348 <XMC_USIC_Enable>
 8000f6e:	e00a      	b.n	8000f86 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <XMC_USIC_CH_Enable+0x8c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d003      	beq.n	8000f80 <XMC_USIC_CH_Enable+0x48>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <XMC_USIC_CH_Enable+0x90>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8000f80:	4812      	ldr	r0, [pc, #72]	; (8000fcc <XMC_USIC_CH_Enable+0x94>)
 8000f82:	f000 f9e1 	bl	8001348 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8000f8c:	bf00      	nop
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f023 020f 	bic.w	r2, r3, #15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40030000 	.word	0x40030000
 8000fb0:	40030200 	.word	0x40030200
 8000fb4:	40030008 	.word	0x40030008
 8000fb8:	48020000 	.word	0x48020000
 8000fbc:	48020200 	.word	0x48020200
 8000fc0:	48020008 	.word	0x48020008
 8000fc4:	48024000 	.word	0x48024000
 8000fc8:	48024200 	.word	0x48024200
 8000fcc:	48024008 	.word	0x48024008

08000fd0 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	2b63      	cmp	r3, #99	; 0x63
 8000fe0:	d958      	bls.n	8001094 <XMC_USIC_CH_SetBaudrate+0xc4>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d055      	beq.n	8001094 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000fe8:	f7ff fb82 	bl	80006f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8000ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ff4:	095b      	lsrs	r3, r3, #5
 8000ff6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	095b      	lsrs	r3, r3, #5
 8001002:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001008:	2301      	movs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800100c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001010:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001012:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
 8001018:	e022      	b.n	8001060 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101e:	fb02 f203 	mul.w	r2, r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	0a9b      	lsrs	r3, r3, #10
 8001034:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800103c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001044:	d209      	bcs.n	800105a <XMC_USIC_CH_SetBaudrate+0x8a>
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	429a      	cmp	r2, r3
 800104c:	d205      	bcs.n	800105a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800105c:	3b01      	subs	r3, #1
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
 8001060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1d9      	bne.n	800101a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001076:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	3a01      	subs	r2, #1
 800107c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800107e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001082:	3b01      	subs	r3, #1
 8001084:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001086:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001092:	e002      	b.n	800109a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800109a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3738      	adds	r7, #56	; 0x38
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	51eb851f 	.word	0x51eb851f
 80010ac:	fc0080ef 	.word	0xfc0080ef

080010b0 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80010bc:	f7ff fb18 	bl	80006f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80010c0:	4603      	mov	r3, r0
 80010c2:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	fb02 f303 	mul.w	r3, r2, r3
 80010cc:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 80010d2:	6a3a      	ldr	r2, [r7, #32]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dd5f      	ble.n	800119a <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	fb92 f3f3 	sdiv	r3, r2, r3
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80010e4:	e010      	b.n	8001108 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e8:	3301      	adds	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f8:	fb03 f302 	mul.w	r3, r3, r2
 80010fc:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80010fe:	6a3a      	ldr	r2, [r7, #32]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	fb92 f3f3 	sdiv	r3, r2, r3
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800110e:	4293      	cmp	r3, r2
 8001110:	d8e9      	bhi.n	80010e6 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8001112:	6a3a      	ldr	r2, [r7, #32]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001118:	fb01 f303 	mul.w	r3, r1, r3
 800111c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001128:	6a3a      	ldr	r2, [r7, #32]
 800112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112c:	3301      	adds	r3, #1
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001136:	fb01 f303 	mul.w	r3, r1, r3
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800114a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	1acb      	subs	r3, r1, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	bfb8      	it	lt
 8001158:	425b      	neglt	r3, r3
 800115a:	429a      	cmp	r2, r3
 800115c:	da02      	bge.n	8001164 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	3301      	adds	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 800117c:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	3a01      	subs	r2, #1
 8001182:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001184:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	3b01      	subs	r3, #1
 800118a:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800118c:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001198:	e002      	b.n	80011a0 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3730      	adds	r7, #48	; 0x30
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	fc0080ef 	.word	0xfc0080ef

080011b0 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	4613      	mov	r3, r2
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 80011d8:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	0211      	lsls	r1, r2, #8
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80011e6:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80011e8:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	f8ffc0c0 	.word	0xf8ffc0c0

08001200 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001216:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001228:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	0211      	lsls	r1, r2, #8
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001236:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001238:	4313      	orrs	r3, r2
 800123a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	efffc0c0 	.word	0xefffc0c0

08001254 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001268:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001278:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001280:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001286:	431a      	orrs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	460b      	mov	r3, r1
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	2107      	movs	r1, #7
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 80012b6:	7afb      	ldrb	r3, [r7, #11]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80012be:	431a      	orrs	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	460b      	mov	r3, r1
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	2107      	movs	r1, #7
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80012f8:	431a      	orrs	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	460b      	mov	r3, r1
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	2107      	movs	r1, #7
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001334:	431a      	orrs	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop

08001348 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <XMC_USIC_Enable+0xac>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d118      	bne.n	800138a <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001358:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800135c:	f7ff fafc 	bl	8000958 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001360:	bf00      	nop
 8001362:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001366:	f7ff fb13 	bl	8000990 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f8      	bne.n	8001362 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001370:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001374:	f7ff f97c 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001378:	bf00      	nop
 800137a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800137e:	f7ff f993 	bl	80006a8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f8      	bne.n	800137a <XMC_USIC_Enable+0x32>
 8001388:	e030      	b.n	80013ec <XMC_USIC_Enable+0xa4>
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <XMC_USIC_Enable+0xb0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d114      	bne.n	80013bc <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001392:	481a      	ldr	r0, [pc, #104]	; (80013fc <XMC_USIC_Enable+0xb4>)
 8001394:	f7ff fae0 	bl	8000958 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001398:	bf00      	nop
 800139a:	4818      	ldr	r0, [pc, #96]	; (80013fc <XMC_USIC_Enable+0xb4>)
 800139c:	f7ff faf8 	bl	8000990 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f9      	bne.n	800139a <XMC_USIC_Enable+0x52>
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <XMC_USIC_Enable+0xb4>)
 80013a8:	f7ff f962 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 80013ac:	bf00      	nop
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <XMC_USIC_Enable+0xb4>)
 80013b0:	f7ff f97a 	bl	80006a8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f9      	bne.n	80013ae <XMC_USIC_Enable+0x66>
 80013ba:	e017      	b.n	80013ec <XMC_USIC_Enable+0xa4>
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <XMC_USIC_Enable+0xb8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d113      	bne.n	80013ec <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 80013c4:	480f      	ldr	r0, [pc, #60]	; (8001404 <XMC_USIC_Enable+0xbc>)
 80013c6:	f7ff fac7 	bl	8000958 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 80013ca:	bf00      	nop
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <XMC_USIC_Enable+0xbc>)
 80013ce:	f7ff fadf 	bl	8000990 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f9      	bne.n	80013cc <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <XMC_USIC_Enable+0xbc>)
 80013da:	f7ff f949 	bl	8000670 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 80013de:	bf00      	nop
 80013e0:	4808      	ldr	r0, [pc, #32]	; (8001404 <XMC_USIC_Enable+0xbc>)
 80013e2:	f7ff f961 	bl	80006a8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f9      	bne.n	80013e0 <XMC_USIC_Enable+0x98>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40030008 	.word	0x40030008
 80013f8:	48020008 	.word	0x48020008
 80013fc:	10000080 	.word	0x10000080
 8001400:	48024008 	.word	0x48024008
 8001404:	10000100 	.word	0x10000100

08001408 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	460b      	mov	r3, r1
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 8001422:	8979      	ldrh	r1, [r7, #10]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	3220      	adds	r2, #32
 800142a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800148e:	b2db      	uxtb	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014c8:	409a      	lsls	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	460b      	mov	r3, r1
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 8001532:	8979      	ldrh	r1, [r7, #10]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	3260      	adds	r2, #96	; 0x60
 800153a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001556:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800159a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	401a      	ands	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf14      	ite	ne
 80015f2:	2301      	movne	r3, #1
 80015f4:	2300      	moveq	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	019b      	lsls	r3, r3, #6
 800161c:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4798      	blx	r3
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]

  return status;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop

08001650 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 800165c:	2301      	movs	r3, #1
 800165e:	75fb      	strb	r3, [r7, #23]

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001668:	2b00      	cmp	r3, #0
 800166a:	d106      	bne.n	800167a <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	f000 f807 	bl	8001684 <SPI_MASTER_StartTransmitIRQ>
 8001676:	4603      	mov	r3, r0
 8001678:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 800167a:	7dfb      	ldrb	r3, [r7, #23]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <SPI_MASTER_StartTransmitIRQ>:
#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
                                                           Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8001694:	2304      	movs	r3, #4
 8001696:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d15c      	bne.n	8001764 <SPI_MASTER_StartTransmitIRQ+0xe0>
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d057      	beq.n	8001760 <SPI_MASTER_StartTransmitIRQ+0xdc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d054      	beq.n	8001760 <SPI_MASTER_StartTransmitIRQ+0xdc>
    {
      status = SPI_MASTER_STATUS_BUSY;
 80016b6:	2302      	movs	r3, #2
 80016b8:	77fb      	strb	r3, [r7, #31]
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f083 0301 	eor.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d048      	beq.n	800175e <SPI_MASTER_StartTransmitIRQ+0xda>
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d901      	bls.n	80016da <SPI_MASTER_StartTransmitIRQ+0x56>
        {
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	fa03 f202 	lsl.w	r2, r3, r2
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00c      	beq.n	8001724 <SPI_MASTER_StartTransmitIRQ+0xa0>
        {
          /* Flush the Transmit FIFO */
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff1a 	bl	8001548 <XMC_USIC_CH_TXFIFO_Flush>
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800171e:	f7ff fedb 	bl	80014d8 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8001722:	e006      	b.n	8001732 <SPI_MASTER_StartTransmitIRQ+0xae>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	f7ff fe83 	bl	8001438 <XMC_USIC_CH_EnableEvent>
        }
        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	7f1b      	ldrb	r3, [r3, #28]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff ff60 	bl	8001604 <XMC_SPI_CH_SetTransmitMode>
        status = SPI_MASTER_STATUS_SUCCESS;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]

        /* Trigger the transmit buffer interrupt */
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff feae 	bl	80014b8 <XMC_USIC_CH_TriggerServiceRequest>
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 800175c:	e002      	b.n	8001764 <SPI_MASTER_StartTransmitIRQ+0xe0>
 800175e:	e001      	b.n	8001764 <SPI_MASTER_StartTransmitIRQ+0xe0>
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001760:	2303      	movs	r3, #3
 8001762:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8001764:	7ffb      	ldrb	r3, [r7, #31]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop

08001770 <SPI_MASTER_lTransmitHandler>:
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
 8001778:	2301      	movs	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	60fb      	str	r3, [r7, #12]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b08      	cmp	r3, #8
 800178a:	d901      	bls.n	8001790 <SPI_MASTER_lTransmitHandler+0x20>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	f080 808b 	bcs.w	80018b4 <SPI_MASTER_lTransmitHandler+0x144>
  {
    data = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	82fb      	strh	r3, [r7, #22]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04b      	beq.n	8001846 <SPI_MASTER_lTransmitHandler+0xd6>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80017ae:	e03e      	b.n	800182e <SPI_MASTER_lTransmitHandler+0xbe>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d236      	bcs.n	800182a <SPI_MASTER_lTransmitHandler+0xba>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <SPI_MASTER_lTransmitHandler+0x70>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	7f1b      	ldrb	r3, [r3, #28]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017d8:	461a      	mov	r2, r3
 80017da:	f7ff fea3 	bl	8001524 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 80017de:	e01d      	b.n	800181c <SPI_MASTER_lTransmitHandler+0xac>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <SPI_MASTER_lTransmitHandler+0x86>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	82fb      	strh	r3, [r7, #22]
 80017f4:	e006      	b.n	8001804 <SPI_MASTER_lTransmitHandler+0x94>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	82fb      	strh	r3, [r7, #22]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	7f1b      	ldrb	r3, [r3, #28]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461c      	mov	r4, r3
 8001810:	8afb      	ldrh	r3, [r7, #22]
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	4622      	mov	r2, r4
 8001818:	f7ff fe84 	bl	8001524 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	441a      	add	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	e001      	b.n	800182e <SPI_MASTER_lTransmitHandler+0xbe>
        }
        else
        {
          break;
 800182a:	bf00      	nop
 800182c:	e080      	b.n	8001930 <SPI_MASTER_lTransmitHandler+0x1c0>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fe96 	bl	8001564 <XMC_USIC_CH_TXFIFO_IsFull>
 8001838:	4603      	mov	r3, r0
 800183a:	f083 0301 	eor.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1b5      	bne.n	80017b0 <SPI_MASTER_lTransmitHandler+0x40>
 8001844:	e074      	b.n	8001930 <SPI_MASTER_lTransmitHandler+0x1c0>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <SPI_MASTER_lTransmitHandler+0xfa>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	7f1b      	ldrb	r3, [r3, #28]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001862:	461a      	mov	r2, r3
 8001864:	f7ff fdd6 	bl	8001414 <XMC_USIC_CH_WriteToTBUFTCI>
 8001868:	e01d      	b.n	80018a6 <SPI_MASTER_lTransmitHandler+0x136>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d107      	bne.n	8001880 <SPI_MASTER_lTransmitHandler+0x110>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4413      	add	r3, r2
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	82fb      	strh	r3, [r7, #22]
 800187e:	e006      	b.n	800188e <SPI_MASTER_lTransmitHandler+0x11e>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	82fb      	strh	r3, [r7, #22]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	7f1b      	ldrb	r3, [r3, #28]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461c      	mov	r4, r3
 800189a:	8afb      	ldrh	r3, [r7, #22]
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	4622      	mov	r2, r4
 80018a2:	f7ff fdb7 	bl	8001414 <XMC_USIC_CH_WriteToTBUFTCI>
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	441a      	add	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	e03d      	b.n	8001930 <SPI_MASTER_lTransmitHandler+0x1c0>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fe67 	bl	800158c <XMC_USIC_CH_TXFIFO_IsEmpty>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d035      	beq.n	8001930 <SPI_MASTER_lTransmitHandler+0x1c0>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <SPI_MASTER_lTransmitHandler+0x170>
      {
        /* Clear the transmit FIFO event */
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018da:	f7ff fe0f 	bl	80014fc <XMC_USIC_CH_TXFIFO_DisableEvent>
 80018de:	e006      	b.n	80018ee <SPI_MASTER_lTransmitHandler+0x17e>
      }
      else
      {
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	f7ff fdb5 	bl	8001458 <XMC_USIC_CH_DisableEvent>
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80018ee:	bf00      	nop
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fdc1 	bl	800147c <XMC_USIC_CH_GetTransmitBufferStatus>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b80      	cmp	r3, #128	; 0x80
 80018fe:	d0f7      	beq.n	80018f0 <SPI_MASTER_lTransmitHandler+0x180>
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data = NULL;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00b      	beq.n	8001930 <SPI_MASTER_lTransmitHandler+0x1c0>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	7fdb      	ldrb	r3, [r3, #31]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f083 0301 	eor.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <SPI_MASTER_lTransmitHandler+0x1c0>
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4798      	blx	r3
      }
    }
  }
}
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop

08001938 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
 8001940:	2301      	movs	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	613b      	str	r3, [r7, #16]

  data = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	81fb      	strh	r3, [r7, #14]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d901      	bls.n	800195c <SPI_MASTER_lReceiveHandler+0x24>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001958:	2302      	movs	r3, #2
 800195a:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01d      	beq.n	80019a4 <SPI_MASTER_lReceiveHandler+0x6c>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	6979      	ldr	r1, [r7, #20]
 800196c:	f000 f8b6 	bl	8001adc <SPI_MASTER_lFIFORead>
    /* Reconfigure the RXFIFO trigger limit based on pending receive bytes */
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= (1UL << (handle->config->rx_fifo_size - 1)))
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	1ad2      	subs	r2, r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001982:	3b01      	subs	r3, #1
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	429a      	cmp	r2, r3
 800198c:	f200 80a2 	bhi.w	8001ad4 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4619      	mov	r1, r3
 800199e:	f000 f8ff 	bl	8001ba0 <SPI_MASTER_lReconfigureRxFIFO>
 80019a2:	e097      	b.n	8001ad4 <SPI_MASTER_lReceiveHandler+0x19c>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fd77 	bl	800149c <XMC_USIC_CH_GetReceiveBufferStatus>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d028      	beq.n	8001a0a <SPI_MASTER_lReceiveHandler+0xd2>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d222      	bcs.n	8001a0a <SPI_MASTER_lReceiveHandler+0xd2>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fa7f 	bl	8000ecc <XMC_SPI_CH_GetReceivedData>
 80019ce:	4603      	mov	r3, r0
 80019d0:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	89fa      	ldrh	r2, [r7, #14]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d10a      	bne.n	80019fe <SPI_MASTER_lReceiveHandler+0xc6>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	89fa      	ldrh	r2, [r7, #14]
 80019f6:	0a12      	lsrs	r2, r2, #8
 80019f8:	b292      	uxth	r2, r2
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	441a      	add	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	611a      	str	r2, [r3, #16]
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fd44 	bl	800149c <XMC_USIC_CH_GetReceiveBufferStatus>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d028      	beq.n	8001a70 <SPI_MASTER_lReceiveHandler+0x138>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d222      	bcs.n	8001a70 <SPI_MASTER_lReceiveHandler+0x138>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fa4c 	bl	8000ecc <XMC_SPI_CH_GetReceivedData>
 8001a34:	4603      	mov	r3, r0
 8001a36:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	89fa      	ldrh	r2, [r7, #14]
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d10a      	bne.n	8001a64 <SPI_MASTER_lReceiveHandler+0x12c>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	89fa      	ldrh	r2, [r7, #14]
 8001a5c:	0a12      	lsrs	r2, r2, #8
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d12b      	bne.n	8001ad4 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <SPI_MASTER_lReceiveHandler+0x160>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001a92:	f7ff fd8f 	bl	80015b4 <XMC_USIC_CH_RXFIFO_DisableEvent>
 8001a96:	e006      	b.n	8001aa6 <SPI_MASTER_lReceiveHandler+0x16e>
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001aa2:	f7ff fa2d 	bl	8000f00 <XMC_SPI_CH_DisableEvent>
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = true;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      runtime_handle->rx_data = NULL;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]

      if (handle->config->rx_cbhandler != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <SPI_MASTER_lReceiveHandler+0x19c>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad2:	4798      	blx	r3
      }
    }
  }
}
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop

08001adc <SPI_MASTER_lFIFORead>:

/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	817b      	strh	r3, [r7, #10]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001af0:	e047      	b.n	8001b82 <SPI_MASTER_lFIFORead+0xa6>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d222      	bcs.n	8001b44 <SPI_MASTER_lFIFORead+0x68>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff f9e2 	bl	8000ecc <XMC_SPI_CH_GetReceivedData>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	817b      	strh	r3, [r7, #10]
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4413      	add	r3, r2
 8001b16:	897a      	ldrh	r2, [r7, #10]
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d10a      	bne.n	8001b38 <SPI_MASTER_lFIFORead+0x5c>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	897a      	ldrh	r2, [r7, #10]
 8001b30:	0a12      	lsrs	r2, r2, #8
 8001b32:	b292      	uxth	r2, r2
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	441a      	add	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d118      	bne.n	8001b82 <SPI_MASTER_lFIFORead+0xa6>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001b68:	f7ff fd24 	bl	80015b4 <XMC_USIC_CH_RXFIFO_DisableEvent>
      if (handle->config->rx_cbhandler != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <SPI_MASTER_lFIFORead+0xa4>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7c:	4798      	blx	r3
      }
      break;
 8001b7e:	e00b      	b.n	8001b98 <SPI_MASTER_lFIFORead+0xbc>
 8001b80:	e00a      	b.n	8001b98 <SPI_MASTER_lFIFORead+0xbc>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fd28 	bl	80015dc <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f083 0301 	eor.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ac      	bne.n	8001af2 <SPI_MASTER_lFIFORead+0x16>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop

08001ba0 <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d028      	beq.n	8001c08 <SPI_MASTER_lReconfigureRxFIFO+0x68>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d025      	beq.n	8001c08 <SPI_MASTER_lReconfigureRxFIFO+0x68>
  {
	fifo_size = 1UL << (handle->config->rx_fifo_size - 1);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d902      	bls.n	8001bde <SPI_MASTER_lReconfigureRxFIFO+0x3e>
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size <= fifo_size)
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d803      	bhi.n	8001bee <SPI_MASTER_lReconfigureRxFIFO+0x4e>
	{
	  ret_limit_val = data_size - 1U;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e001      	b.n	8001bf2 <SPI_MASTER_lReconfigureRxFIFO+0x52>
	}
	else
	{
	  ret_limit_val = fifo_size;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	60fb      	str	r3, [r7, #12]
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	f7ff fb26 	bl	8001254 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c1c:	0a1b      	lsrs	r3, r3, #8
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_EnableIRQ+0x34>)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	f002 021f 	and.w	r2, r2, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	490d      	ldr	r1, [pc, #52]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
  }
}
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	bf28      	it	cs
 8001cd6:	2306      	movcs	r3, #6
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3306      	adds	r3, #6
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	1e59      	subs	r1, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001d0c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop

08001d1c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001d2c:	78f8      	ldrb	r0, [r7, #3]
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	3306      	adds	r3, #6
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001d3e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001d40:	431a      	orrs	r2, r3
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	1d83      	adds	r3, r0, #6
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d94:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop

08001db0 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8001dc6:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f023 020f 	bic.w	r2, r3, #15
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	2101      	movs	r1, #1
 8001e10:	f7ff ffe4 	bl	8001ddc <XMC_USIC_CH_SetMode>
}
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop

08001e1c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop

08001e3c <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	f7ff ff99 	bl	8001db0 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f7ff ff5f 	bl	8001d58 <XMC_USIC_CH_SetWordLength>
}
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7ff ff67 	bl	8001d84 <XMC_USIC_CH_SetFrameLength>
}
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8001ecc:	78f8      	ldrb	r0, [r7, #3]
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3306      	adds	r3, #6
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001ede:	f043 0210 	orr.w	r2, r3, #16
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	1d83      	adds	r3, r0, #6
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	78bb      	ldrb	r3, [r7, #2]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f7ff ff11 	bl	8001d1c <XMC_USIC_CH_SetInputSource>
}
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8001f06:	2300      	movs	r3, #0
 8001f08:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI2_CH0, &SPI_MASTER_0_Channel_Config);
 8001f0a:	483f      	ldr	r0, [pc, #252]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f0c:	493f      	ldr	r1, [pc, #252]	; (800200c <SPI_MASTER_0_lInit+0x10c>)
 8001f0e:	f7fe ff87 	bl	8000e20 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI2_CH0);
 8001f12:	483d      	ldr	r0, [pc, #244]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f14:	f7ff ff82 	bl	8001e1c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI2_CH0, (uint8_t)8);
 8001f18:	483b      	ldr	r0, [pc, #236]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	f7ff ffb2 	bl	8001e84 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, (uint8_t)64);
 8001f20:	4839      	ldr	r0, [pc, #228]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	f7ff ffbc 	bl	8001ea0 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI2_CH0,
 8001f28:	4837      	ldr	r0, [pc, #220]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f7ff ff9b 	bl	8001e68 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI2_CH0, 2U);
 8001f32:	4835      	ldr	r0, [pc, #212]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f34:	2102      	movs	r1, #2
 8001f36:	f7ff ff81 	bl	8001e3c <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)7, &SPI_MASTER_0_MISO_Config.port_config);
 8001f3a:	4835      	ldr	r0, [pc, #212]	; (8002010 <SPI_MASTER_0_lInit+0x110>)
 8001f3c:	2107      	movs	r1, #7
 8001f3e:	4a35      	ldr	r2, [pc, #212]	; (8002014 <SPI_MASTER_0_lInit+0x114>)
 8001f40:	f7fe fa26 	bl	8000390 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI2_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_C);
 8001f44:	4830      	ldr	r0, [pc, #192]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f46:	2100      	movs	r1, #0
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f7ff ffb7 	bl	8001ebc <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI2_CH0);
 8001f4e:	482e      	ldr	r0, [pc, #184]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f50:	f7ff ff58 	bl	8001e04 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)8, &SPI_MASTER_0_MOSI_Config.port_config);
 8001f54:	482e      	ldr	r0, [pc, #184]	; (8002010 <SPI_MASTER_0_lInit+0x110>)
 8001f56:	2108      	movs	r1, #8
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <SPI_MASTER_0_lInit+0x118>)
 8001f5a:	f7fe fa19 	bl	8000390 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)9, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 8001f5e:	482c      	ldr	r0, [pc, #176]	; (8002010 <SPI_MASTER_0_lInit+0x110>)
 8001f60:	2109      	movs	r1, #9
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <SPI_MASTER_0_lInit+0x11c>)
 8001f64:	f7fe fa14 	bl	8000390 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)6, &SPI_MASTER_0_SS_0_Config.port_config);
 8001f68:	482d      	ldr	r0, [pc, #180]	; (8002020 <SPI_MASTER_0_lInit+0x120>)
 8001f6a:	2106      	movs	r1, #6
 8001f6c:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <SPI_MASTER_0_lInit+0x124>)
 8001f6e:	f7fe fa0f 	bl	8000390 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI2_CH0, XMC_SPI_CH_SLAVE_SELECT_3);
 8001f72:	4825      	ldr	r0, [pc, #148]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8001f78:	f7fe ff92 	bl	8000ea0 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8001f7c:	4822      	ldr	r0, [pc, #136]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f7e:	2110      	movs	r1, #16
 8001f80:	2200      	movs	r2, #0
 8001f82:	f7ff f989 	bl	8001298 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI2_CH0,
 8001f86:	4820      	ldr	r0, [pc, #128]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f88:	2110      	movs	r1, #16
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f7ff f90f 	bl	80011b0 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI2_CH0,
 8001f92:	481d      	ldr	r0, [pc, #116]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f94:	2110      	movs	r1, #16
 8001f96:	2203      	movs	r2, #3
 8001f98:	f7ff f99a 	bl	80012d0 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_3);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI2_CH0,
 8001f9c:	481a      	ldr	r0, [pc, #104]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f7ff f92c 	bl	8001200 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI2_CH0,
 8001fa8:	4817      	ldr	r0, [pc, #92]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001faa:	2110      	movs	r1, #16
 8001fac:	2202      	movs	r2, #2
 8001fae:	f7ff f9ad 	bl	800130c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI2_CH0,
 8001fb2:	4815      	ldr	r0, [pc, #84]	; (8002008 <SPI_MASTER_0_lInit+0x108>)
 8001fb4:	2113      	movs	r1, #19
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f7ff f9a8 	bl	800130c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)99, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 8001fbc:	f7ff fe28 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	213f      	movs	r1, #63	; 0x3f
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f7ff fe76 	bl	8001cb8 <NVIC_EncodePriority>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2063      	movs	r0, #99	; 0x63
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7ff fe47 	bl	8001c64 <__NVIC_SetPriority>
     
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)99);
 8001fd6:	2063      	movs	r0, #99	; 0x63
 8001fd8:	f7ff fe28 	bl	8001c2c <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)98, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 8001fdc:	f7ff fe18 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	213e      	movs	r1, #62	; 0x3e
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f7ff fe66 	bl	8001cb8 <NVIC_EncodePriority>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2062      	movs	r0, #98	; 0x62
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7ff fe37 	bl	8001c64 <__NVIC_SetPriority>
    
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)98);
 8001ff6:	2062      	movs	r0, #98	; 0x62
 8001ff8:	f7ff fe18 	bl	8001c2c <__NVIC_EnableIRQ>
    
  return status;
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	48024000 	.word	0x48024000
 800200c:	1ffe8814 	.word	0x1ffe8814
 8002010:	48028300 	.word	0x48028300
 8002014:	1ffe8a38 	.word	0x1ffe8a38
 8002018:	1ffe8800 	.word	0x1ffe8800
 800201c:	080027b4 	.word	0x080027b4
 8002020:	48028500 	.word	0x48028500
 8002024:	080027d0 	.word	0x080027d0

08002028 <USIC2_3_IRQHandler>:
/*Transmit ISR*/
void SPI_MASTER_0_tx_handler()
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_0);
 800202c:	4801      	ldr	r0, [pc, #4]	; (8002034 <USIC2_3_IRQHandler+0xc>)
 800202e:	f7ff fb9f 	bl	8001770 <SPI_MASTER_lTransmitHandler>
}
 8002032:	bd80      	pop	{r7, pc}
 8002034:	1ffe8844 	.word	0x1ffe8844

08002038 <USIC2_2_IRQHandler>:

/*Receive ISR*/
void SPI_MASTER_0_rx_handler()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_0);
 800203c:	4801      	ldr	r0, [pc, #4]	; (8002044 <USIC2_2_IRQHandler+0xc>)
 800203e:	f7ff fc7b 	bl	8001938 <SPI_MASTER_lReceiveHandler>
}
 8002042:	bd80      	pop	{r7, pc}
 8002044:	1ffe8844 	.word	0x1ffe8844

08002048 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7c1a      	ldrb	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	f7fe f995 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6819      	ldr	r1, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7c1a      	ldrb	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7c5b      	ldrb	r3, [r3, #17]
 8002072:	4608      	mov	r0, r1
 8002074:	4611      	mov	r1, r2
 8002076:	461a      	mov	r2, r3
 8002078:	f7fe feb0 	bl	8000ddc <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff ffd6 	bl	8002088 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <SystemCoreSetup+0x94>)
 80020e0:	4a21      	ldr	r2, [pc, #132]	; (8002168 <SystemCoreSetup+0x98>)
 80020e2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020e4:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80020e8:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <SystemCoreSetup+0x94>)
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <SystemCoreSetup+0x94>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <SystemCoreSetup+0x9c>)
 80020fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002100:	3314      	adds	r3, #20
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f023 030f 	bic.w	r3, r3, #15
 800210c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <SystemCoreSetup+0x9c>)
 8002118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211c:	3314      	adds	r3, #20
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <SystemCoreSetup+0x94>)
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <SystemCoreSetup+0x94>)
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f023 0310 	bic.w	r3, r3, #16
 800212c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800212e:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <SystemCoreSetup+0x94>)
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <SystemCoreSetup+0x94>)
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	f023 0308 	bic.w	r3, r3, #8
 8002138:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SystemCoreSetup+0x94>)
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <SystemCoreSetup+0x94>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <SystemCoreSetup+0x94>)
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <SystemCoreSetup+0x94>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002150:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <SystemCoreSetup+0x94>)
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <SystemCoreSetup+0x94>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	08000000 	.word	0x08000000
 800216c:	58001000 	.word	0x58001000

08002170 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]

  return (status);
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <OSCHP_GetFrequency+0x10>)
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	00b71b00 	.word	0x00b71b00

080021a4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <SystemCoreClockSetup+0x50>)
 80021ac:	1d3c      	adds	r4, r7, #4
 80021ae:	461d      	mov	r5, r3
 80021b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f9e2 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7fe fb01 	bl	80007c8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe fab6 	bl	8000738 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80021cc:	2004      	movs	r0, #4
 80021ce:	f7fe fb87 	bl	80008e0 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80021d2:	2001      	movs	r0, #1
 80021d4:	2120      	movs	r1, #32
 80021d6:	f7fe fbff 	bl	80009d8 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80021da:	2000      	movs	r0, #0
 80021dc:	f7fe fac0 	bl	8000760 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7fe fba5 	bl	8000930 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f7fe fb8e 	bl	8000908 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bdb0      	pop	{r4, r5, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	080028ac 	.word	0x080028ac

080021f8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80021fe:	2300      	movs	r3, #0
 8002200:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002202:	4815      	ldr	r0, [pc, #84]	; (8002258 <DAVE_Init+0x60>)
 8002204:	f7ff ffb4 	bl	8002170 <CLOCK_XMC4_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <DAVE_Init+0x24>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 8002212:	4812      	ldr	r0, [pc, #72]	; (800225c <DAVE_Init+0x64>)
 8002214:	f7ff fa0c 	bl	8001630 <SPI_MASTER_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance RESET */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RESET); 
 8002222:	480f      	ldr	r0, [pc, #60]	; (8002260 <DAVE_Init+0x68>)
 8002224:	f7ff ff10 	bl	8002048 <DIGITAL_IO_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d104      	bne.n	800223c <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance REGISTER_SIGNAL */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&REGISTER_SIGNAL); 
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <DAVE_Init+0x6c>)
 8002234:	f7ff ff08 	bl	8002048 <DIGITAL_IO_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d104      	bne.n	800224c <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance OLED_CS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&OLED_CS); 
 8002242:	4809      	ldr	r0, [pc, #36]	; (8002268 <DAVE_Init+0x70>)
 8002244:	f7ff ff00 	bl	8002048 <DIGITAL_IO_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800224c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	1ffe8a4c 	.word	0x1ffe8a4c
 800225c:	1ffe8844 	.word	0x1ffe8844
 8002260:	08002870 	.word	0x08002870
 8002264:	08002884 	.word	0x08002884
 8002268:	08002898 	.word	0x08002898

0800226c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	2201      	movs	r2, #1
 800227c:	409a      	lsls	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]
}
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800229e:	409a      	lsls	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	605a      	str	r2, [r3, #4]
}
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop

080022b0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7c1b      	ldrb	r3, [r3, #16]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7ff ffd2 	bl	800226c <XMC_GPIO_SetOutputHigh>
}
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop

080022d0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7c1b      	ldrb	r3, [r3, #16]
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7ff ffd2 	bl	800228c <XMC_GPIO_SetOutputLow>
}
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop

080022f0 <display_setup>:
#include"display_functions.h"
#include"display_database.h"


void display_setup(){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af02      	add	r7, sp, #8

	SPI_MASTER_Init (&SPI_MASTER_0);
 80022f6:	4880      	ldr	r0, [pc, #512]	; (80024f8 <display_setup+0x208>)
 80022f8:	f7ff f99a 	bl	8001630 <SPI_MASTER_Init>
	DIGITAL_IO_SetOutputLow(&RESET);
 80022fc:	487f      	ldr	r0, [pc, #508]	; (80024fc <display_setup+0x20c>)
 80022fe:	f7ff ffe7 	bl	80022d0 <DIGITAL_IO_SetOutputLow>

    DIGITAL_IO_SetOutputHigh(&RESET);
 8002302:	487e      	ldr	r0, [pc, #504]	; (80024fc <display_setup+0x20c>)
 8002304:	f7ff ffd4 	bl	80022b0 <DIGITAL_IO_SetOutputHigh>
	//DIGITAL_IO_SetOutputHigh(&REGISTER_SIGNAL);
	//DIGITAL_IO_SetOutputHigh(&OLED_CS);


    // display off, analog reset
    OLED_Command_160128RGB(0x04);
 8002308:	2004      	movs	r0, #4
 800230a:	f000 f8f9 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x01);
 800230e:	2001      	movs	r0, #1
 8002310:	f000 f914 	bl	800253c <OLED_Data_160128RGB>

     // normal mode
    OLED_Command_160128RGB(0x04);
 8002314:	2004      	movs	r0, #4
 8002316:	f000 f8f3 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x00);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f90e 	bl	800253c <OLED_Data_160128RGB>

    // display off
    OLED_Command_160128RGB(0x06);
 8002320:	2006      	movs	r0, #6
 8002322:	f000 f8ed 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f000 f908 	bl	800253c <OLED_Data_160128RGB>

    // turn on internal oscillator using external resistor
    OLED_Command_160128RGB(0x02);
 800232c:	2002      	movs	r0, #2
 800232e:	f000 f8e7 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x01);
 8002332:	2001      	movs	r0, #1
 8002334:	f000 f902 	bl	800253c <OLED_Data_160128RGB>

    // 90 hz frame rate, divider 0
    OLED_Command_160128RGB(0x03);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 f8e1 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x30);
 800233e:	2030      	movs	r0, #48	; 0x30
 8002340:	f000 f8fc 	bl	800253c <OLED_Data_160128RGB>

    // duty cycle 127
    OLED_Command_160128RGB(0x28);
 8002344:	2028      	movs	r0, #40	; 0x28
 8002346:	f000 f8db 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x7F);
 800234a:	207f      	movs	r0, #127	; 0x7f
 800234c:	f000 f8f6 	bl	800253c <OLED_Data_160128RGB>

    // start on line 0
    OLED_Command_160128RGB(0x29);
 8002350:	2029      	movs	r0, #41	; 0x29
 8002352:	f000 f8d5 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f000 f8f0 	bl	800253c <OLED_Data_160128RGB>

    // rgb_if
    OLED_Command_160128RGB(0x14);
 800235c:	2014      	movs	r0, #20
 800235e:	f000 f8cf 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x31);
 8002362:	2031      	movs	r0, #49	; 0x31
 8002364:	f000 f8ea 	bl	800253c <OLED_Data_160128RGB>

    // Set Memory Write Mode
    OLED_Command_160128RGB(0x16);
 8002368:	2016      	movs	r0, #22
 800236a:	f000 f8c9 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x76);
 800236e:	2076      	movs	r0, #118	; 0x76
 8002370:	f000 f8e4 	bl	800253c <OLED_Data_160128RGB>

    // driving current r g b (uA)
    OLED_Command_160128RGB(0x10);
 8002374:	2010      	movs	r0, #16
 8002376:	f000 f8c3 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x45);
 800237a:	2045      	movs	r0, #69	; 0x45
 800237c:	f000 f8de 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x11);
 8002380:	2011      	movs	r0, #17
 8002382:	f000 f8bd 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x34);
 8002386:	2034      	movs	r0, #52	; 0x34
 8002388:	f000 f8d8 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x12);
 800238c:	2012      	movs	r0, #18
 800238e:	f000 f8b7 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x33);
 8002392:	2033      	movs	r0, #51	; 0x33
 8002394:	f000 f8d2 	bl	800253c <OLED_Data_160128RGB>

    // precharge time r g b
    OLED_Command_160128RGB(0x08);
 8002398:	2008      	movs	r0, #8
 800239a:	f000 f8b1 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x04);
 800239e:	2004      	movs	r0, #4
 80023a0:	f000 f8cc 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x09);
 80023a4:	2009      	movs	r0, #9
 80023a6:	f000 f8ab 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x05);
 80023aa:	2005      	movs	r0, #5
 80023ac:	f000 f8c6 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x0A);
 80023b0:	200a      	movs	r0, #10
 80023b2:	f000 f8a5 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x05);
 80023b6:	2005      	movs	r0, #5
 80023b8:	f000 f8c0 	bl	800253c <OLED_Data_160128RGB>

    // precharge current r g b (uA)
    OLED_Command_160128RGB(0x0B);
 80023bc:	200b      	movs	r0, #11
 80023be:	f000 f89f 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x9D);
 80023c2:	209d      	movs	r0, #157	; 0x9d
 80023c4:	f000 f8ba 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x0C);
 80023c8:	200c      	movs	r0, #12
 80023ca:	f000 f899 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x8C);
 80023ce:	208c      	movs	r0, #140	; 0x8c
 80023d0:	f000 f8b4 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x0D);
 80023d4:	200d      	movs	r0, #13
 80023d6:	f000 f893 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x57);
 80023da:	2057      	movs	r0, #87	; 0x57
 80023dc:	f000 f8ae 	bl	800253c <OLED_Data_160128RGB>

    // Set Reference Voltage Controlled by External Resister
    OLED_Command_160128RGB(0x80);
 80023e0:	2080      	movs	r0, #128	; 0x80
 80023e2:	f000 f88d 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x00);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f000 f8a8 	bl	800253c <OLED_Data_160128RGB>

    // mode set
    OLED_Command_160128RGB(0x13);
 80023ec:	2013      	movs	r0, #19
 80023ee:	f000 f887 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0xA0);
 80023f2:	20a0      	movs	r0, #160	; 0xa0
 80023f4:	f000 f8a2 	bl	800253c <OLED_Data_160128RGB>

    OLED_SetColumnAddress_160128RGB(0, 159);
 80023f8:	2000      	movs	r0, #0
 80023fa:	219f      	movs	r1, #159	; 0x9f
 80023fc:	f000 f8f6 	bl	80025ec <OLED_SetColumnAddress_160128RGB>
    OLED_SetRowAddress_160128RGB(0, 127);
 8002400:	2000      	movs	r0, #0
 8002402:	217f      	movs	r1, #127	; 0x7f
 8002404:	f000 f90c 	bl	8002620 <OLED_SetRowAddress_160128RGB>

    // Display On
    OLED_Command_160128RGB(0x06);
 8002408:	2006      	movs	r0, #6
 800240a:	f000 f879 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(0x01);
 800240e:	2001      	movs	r0, #1
 8002410:	f000 f894 	bl	800253c <OLED_Data_160128RGB>

    OLED_FillScreen_160128RGB(BLACK);                // fill screen with black
 8002414:	2000      	movs	r0, #0
 8002416:	f000 f91d 	bl	8002654 <OLED_FillScreen_160128RGB>

   // OLED_NHDText_160128RGB(GREEN, BLACK);            // show NEWHAVEN DISPLAY

    OLED_Text_160128RGB(20, 58, 40, WHITE, BLACK);   // H
 800241a:	2300      	movs	r3, #0
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2014      	movs	r0, #20
 8002420:	213a      	movs	r1, #58	; 0x3a
 8002422:	2228      	movs	r2, #40	; 0x28
 8002424:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002428:	f000 f898 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(27, 58, 69, WHITE, BLACK);   // e
 800242c:	2300      	movs	r3, #0
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	201b      	movs	r0, #27
 8002432:	213a      	movs	r1, #58	; 0x3a
 8002434:	2245      	movs	r2, #69	; 0x45
 8002436:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800243a:	f000 f88f 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(34, 58, 76, WHITE, BLACK);   // l
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2022      	movs	r0, #34	; 0x22
 8002444:	213a      	movs	r1, #58	; 0x3a
 8002446:	224c      	movs	r2, #76	; 0x4c
 8002448:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800244c:	f000 f886 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(41, 58, 76, WHITE, BLACK);   // l
 8002450:	2300      	movs	r3, #0
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2029      	movs	r0, #41	; 0x29
 8002456:	213a      	movs	r1, #58	; 0x3a
 8002458:	224c      	movs	r2, #76	; 0x4c
 800245a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800245e:	f000 f87d 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(48, 58, 79, WHITE, BLACK);   // o
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2030      	movs	r0, #48	; 0x30
 8002468:	213a      	movs	r1, #58	; 0x3a
 800246a:	224f      	movs	r2, #79	; 0x4f
 800246c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002470:	f000 f874 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(55, 58, 0, WHITE, BLACK);    //
 8002474:	2300      	movs	r3, #0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2037      	movs	r0, #55	; 0x37
 800247a:	213a      	movs	r1, #58	; 0x3a
 800247c:	2200      	movs	r2, #0
 800247e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002482:	f000 f86b 	bl	800255c <OLED_Text_160128RGB>

	OLED_Text_160128RGB(62, 58, 55, WHITE, BLACK);   // W
 8002486:	2300      	movs	r3, #0
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	203e      	movs	r0, #62	; 0x3e
 800248c:	213a      	movs	r1, #58	; 0x3a
 800248e:	2237      	movs	r2, #55	; 0x37
 8002490:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002494:	f000 f862 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(69, 58, 79, WHITE, BLACK);   // o
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2045      	movs	r0, #69	; 0x45
 800249e:	213a      	movs	r1, #58	; 0x3a
 80024a0:	224f      	movs	r2, #79	; 0x4f
 80024a2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80024a6:	f000 f859 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(76, 58, 82, WHITE, BLACK);   // r
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	204c      	movs	r0, #76	; 0x4c
 80024b0:	213a      	movs	r1, #58	; 0x3a
 80024b2:	2252      	movs	r2, #82	; 0x52
 80024b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80024b8:	f000 f850 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(83, 58, 76, WHITE, BLACK);   // l
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2053      	movs	r0, #83	; 0x53
 80024c2:	213a      	movs	r1, #58	; 0x3a
 80024c4:	224c      	movs	r2, #76	; 0x4c
 80024c6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80024ca:	f000 f847 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(90, 58, 68, WHITE, BLACK);   // d
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	205a      	movs	r0, #90	; 0x5a
 80024d4:	213a      	movs	r1, #58	; 0x3a
 80024d6:	2244      	movs	r2, #68	; 0x44
 80024d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80024dc:	f000 f83e 	bl	800255c <OLED_Text_160128RGB>
	OLED_Text_160128RGB(97, 58, 1, WHITE, BLACK);    // !
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2061      	movs	r0, #97	; 0x61
 80024e6:	213a      	movs	r1, #58	; 0x3a
 80024e8:	2201      	movs	r2, #1
 80024ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80024ee:	f000 f835 	bl	800255c <OLED_Text_160128RGB>
}
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	1ffe8844 	.word	0x1ffe8844
 80024fc:	08002870 	.word	0x08002870

08002500 <OLED_Command_160128RGB>:


void OLED_Command_160128RGB(uint8_t command){
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
	DIGITAL_IO_SetOutputLow(&REGISTER_SIGNAL);
 800250a:	4809      	ldr	r0, [pc, #36]	; (8002530 <OLED_Command_160128RGB+0x30>)
 800250c:	f7ff fee0 	bl	80022d0 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&OLED_CS);
 8002510:	4808      	ldr	r0, [pc, #32]	; (8002534 <OLED_Command_160128RGB+0x34>)
 8002512:	f7ff fedd 	bl	80022d0 <DIGITAL_IO_SetOutputLow>
	SPI_MASTER_Transmit(&SPI_MASTER_0, command, sizeof(command));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	4807      	ldr	r0, [pc, #28]	; (8002538 <OLED_Command_160128RGB+0x38>)
 800251a:	4619      	mov	r1, r3
 800251c:	2201      	movs	r2, #1
 800251e:	f7ff f897 	bl	8001650 <SPI_MASTER_Transmit>
	DIGITAL_IO_SetOutputHigh(&REGISTER_SIGNAL);
 8002522:	4803      	ldr	r0, [pc, #12]	; (8002530 <OLED_Command_160128RGB+0x30>)
 8002524:	f7ff fec4 	bl	80022b0 <DIGITAL_IO_SetOutputHigh>
	}
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	08002884 	.word	0x08002884
 8002534:	08002898 	.word	0x08002898
 8002538:	1ffe8844 	.word	0x1ffe8844

0800253c <OLED_Data_160128RGB>:

void OLED_Data_160128RGB(uint8_t data){
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
	SPI_MASTER_Transmit(&SPI_MASTER_0, data, sizeof(data));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4803      	ldr	r0, [pc, #12]	; (8002558 <OLED_Data_160128RGB+0x1c>)
 800254a:	4619      	mov	r1, r3
 800254c:	2201      	movs	r2, #1
 800254e:	f7ff f87f 	bl	8001650 <SPI_MASTER_Transmit>
}
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	1ffe8844 	.word	0x1ffe8844

0800255c <OLED_Text_160128RGB>:

void OLED_Text_160128RGB(unsigned char x_pos, unsigned char y_pos, unsigned char letter, unsigned long textColor, unsigned long backgroundColor)  // function to show text
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
 8002568:	460b      	mov	r3, r1
 800256a:	71bb      	strb	r3, [r7, #6]
 800256c:	4613      	mov	r3, r2
 800256e:	717b      	strb	r3, [r7, #5]
    int i;
    int count;
    unsigned char mask = 0x80;
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	73fb      	strb	r3, [r7, #15]

    for(i=0;i<8;i++)     // each character is 8 pixels tall
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e02f      	b.n	80025da <OLED_Text_160128RGB+0x7e>
    {
        OLED_SetPosition_160128RGB(x_pos,y_pos);
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	f000 f881 	bl	8002688 <OLED_SetPosition_160128RGB>
        OLED_WriteMemoryStart_160128RGB();
 8002586:	f000 f899 	bl	80026bc <OLED_WriteMemoryStart_160128RGB>
        for (count=0;count<5;count++)    // each character is 5 pixels wide
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e018      	b.n	80025c2 <OLED_Text_160128RGB+0x66>
        {
            if((Ascii_1[letter][count] & mask) == mask)
 8002590:	797a      	ldrb	r2, [r7, #5]
 8002592:	4915      	ldr	r1, [pc, #84]	; (80025e8 <OLED_Text_160128RGB+0x8c>)
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	4013      	ands	r3, r2
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d103      	bne.n	80025b6 <OLED_Text_160128RGB+0x5a>
                OLED_Pixel_160128RGB(textColor);
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	f000 f88a 	bl	80026c8 <OLED_Pixel_160128RGB>
 80025b4:	e002      	b.n	80025bc <OLED_Text_160128RGB+0x60>
            else
                OLED_Pixel_160128RGB(backgroundColor);
 80025b6:	6a38      	ldr	r0, [r7, #32]
 80025b8:	f000 f886 	bl	80026c8 <OLED_Pixel_160128RGB>

    for(i=0;i<8;i++)     // each character is 8 pixels tall
    {
        OLED_SetPosition_160128RGB(x_pos,y_pos);
        OLED_WriteMemoryStart_160128RGB();
        for (count=0;count<5;count++)    // each character is 5 pixels wide
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	3301      	adds	r3, #1
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	dde3      	ble.n	8002590 <OLED_Text_160128RGB+0x34>
            if((Ascii_1[letter][count] & mask) == mask)
                OLED_Pixel_160128RGB(textColor);
            else
                OLED_Pixel_160128RGB(backgroundColor);
        }
        y_pos++;
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	3301      	adds	r3, #1
 80025cc:	71bb      	strb	r3, [r7, #6]
        mask = mask >> 1;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
{
    int i;
    int count;
    unsigned char mask = 0x80;

    for(i=0;i<8;i++)     // each character is 8 pixels tall
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b07      	cmp	r3, #7
 80025de:	ddcc      	ble.n	800257a <OLED_Text_160128RGB+0x1e>
                OLED_Pixel_160128RGB(backgroundColor);
        }
        y_pos++;
        mask = mask >> 1;
    }
}
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	1ffe8850 	.word	0x1ffe8850

080025ec <OLED_SetColumnAddress_160128RGB>:

void OLED_SetColumnAddress_160128RGB(unsigned char x_start, unsigned char x_end){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	460a      	mov	r2, r1
 80025f6:	71fb      	strb	r3, [r7, #7]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71bb      	strb	r3, [r7, #6]
    OLED_Command_160128RGB(0x17);
 80025fc:	2017      	movs	r0, #23
 80025fe:	f7ff ff7f 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(x_start);
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff99 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x18);
 800260a:	2018      	movs	r0, #24
 800260c:	f7ff ff78 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(x_end);
 8002610:	79bb      	ldrb	r3, [r7, #6]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff92 	bl	800253c <OLED_Data_160128RGB>
}
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop

08002620 <OLED_SetRowAddress_160128RGB>:

void OLED_SetRowAddress_160128RGB(unsigned char y_start, unsigned char y_end){
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	460a      	mov	r2, r1
 800262a:	71fb      	strb	r3, [r7, #7]
 800262c:	4613      	mov	r3, r2
 800262e:	71bb      	strb	r3, [r7, #6]
    OLED_Command_160128RGB(0x19);
 8002630:	2019      	movs	r0, #25
 8002632:	f7ff ff65 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(y_start);
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff7f 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x1A);
 800263e:	201a      	movs	r0, #26
 8002640:	f7ff ff5e 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(y_end);
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff78 	bl	800253c <OLED_Data_160128RGB>
}
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop

08002654 <OLED_FillScreen_160128RGB>:

void OLED_FillScreen_160128RGB(unsigned long color)    // fill screen with a given color
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    unsigned int i;
    OLED_SetPosition_160128RGB(0,0);
 800265c:	2000      	movs	r0, #0
 800265e:	2100      	movs	r1, #0
 8002660:	f000 f812 	bl	8002688 <OLED_SetPosition_160128RGB>
    OLED_WriteMemoryStart_160128RGB();
 8002664:	f000 f82a 	bl	80026bc <OLED_WriteMemoryStart_160128RGB>
    for(i=0;i<20480;i++)
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e005      	b.n	800267a <OLED_FillScreen_160128RGB+0x26>
    {
        OLED_Pixel_160128RGB(color);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f82a 	bl	80026c8 <OLED_Pixel_160128RGB>
void OLED_FillScreen_160128RGB(unsigned long color)    // fill screen with a given color
{
    unsigned int i;
    OLED_SetPosition_160128RGB(0,0);
    OLED_WriteMemoryStart_160128RGB();
    for(i=0;i<20480;i++)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3301      	adds	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002680:	d3f5      	bcc.n	800266e <OLED_FillScreen_160128RGB+0x1a>
    {
        OLED_Pixel_160128RGB(color);
    }
}
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <OLED_SetPosition_160128RGB>:

void OLED_SetPosition_160128RGB(unsigned char x_pos, unsigned char y_pos)    // set x,y address
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	460a      	mov	r2, r1
 8002692:	71fb      	strb	r3, [r7, #7]
 8002694:	4613      	mov	r3, r2
 8002696:	71bb      	strb	r3, [r7, #6]
    OLED_Command_160128RGB(0x20);
 8002698:	2020      	movs	r0, #32
 800269a:	f7ff ff31 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(x_pos);
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff4b 	bl	800253c <OLED_Data_160128RGB>
    OLED_Command_160128RGB(0x21);
 80026a6:	2021      	movs	r0, #33	; 0x21
 80026a8:	f7ff ff2a 	bl	8002500 <OLED_Command_160128RGB>
    OLED_Data_160128RGB(y_pos);
 80026ac:	79bb      	ldrb	r3, [r7, #6]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff44 	bl	800253c <OLED_Data_160128RGB>
}
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop

080026bc <OLED_WriteMemoryStart_160128RGB>:

void OLED_WriteMemoryStart_160128RGB(void)    // write to RAM command
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
    OLED_Command_160128RGB(0x22);
 80026c0:	2022      	movs	r0, #34	; 0x22
 80026c2:	f7ff ff1d 	bl	8002500 <OLED_Command_160128RGB>
}
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <OLED_Pixel_160128RGB>:

void OLED_Pixel_160128RGB(unsigned long color)    // write one pixel of a given color
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	OLED_SerialPixelData_160128RGB((color>>16));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f80e 	bl	80026f8 <OLED_SerialPixelData_160128RGB>
	OLED_SerialPixelData_160128RGB((color>>8));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f808 	bl	80026f8 <OLED_SerialPixelData_160128RGB>
	OLED_SerialPixelData_160128RGB(color);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f803 	bl	80026f8 <OLED_SerialPixelData_160128RGB>
}
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <OLED_SerialPixelData_160128RGB>:

void OLED_SerialPixelData_160128RGB(unsigned char d)    // serial write for pixel data
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]

    DIGITAL_IO_SetOutputLow(&OLED_CS);
 8002702:	4809      	ldr	r0, [pc, #36]	; (8002728 <OLED_SerialPixelData_160128RGB+0x30>)
 8002704:	f7ff fde4 	bl	80022d0 <DIGITAL_IO_SetOutputLow>
    DIGITAL_IO_SetOutputLow(&RESET);
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <OLED_SerialPixelData_160128RGB+0x34>)
 800270a:	f7ff fde1 	bl	80022d0 <DIGITAL_IO_SetOutputLow>

	SPI_MASTER_Transmit(&SPI_MASTER_0, d, sizeof(d));
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4807      	ldr	r0, [pc, #28]	; (8002730 <OLED_SerialPixelData_160128RGB+0x38>)
 8002712:	4619      	mov	r1, r3
 8002714:	2201      	movs	r2, #1
 8002716:	f7fe ff9b 	bl	8001650 <SPI_MASTER_Transmit>

    DIGITAL_IO_SetOutputHigh(&OLED_CS);
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <OLED_SerialPixelData_160128RGB+0x30>)
 800271c:	f7ff fdc8 	bl	80022b0 <DIGITAL_IO_SetOutputHigh>
}
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	08002898 	.word	0x08002898
 800272c:	08002870 	.word	0x08002870
 8002730:	1ffe8844 	.word	0x1ffe8844

08002734 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800273a:	f7ff fd5d 	bl	80021f8 <DAVE_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]

  if(status != DAVE_STATUS_SUCCESS)
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d000      	beq.n	800274a <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 8002748:	e7fe      	b.n	8002748 <main+0x14>
  }

  display_setup();
 800274a:	f7ff fdd1 	bl	80022f0 <display_setup>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 800274e:	e7fe      	b.n	800274e <main+0x1a>

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <__libc_init_array+0x3c>)
 8002754:	4c0e      	ldr	r4, [pc, #56]	; (8002790 <__libc_init_array+0x40>)
 8002756:	1ae4      	subs	r4, r4, r3
 8002758:	10a4      	asrs	r4, r4, #2
 800275a:	2500      	movs	r5, #0
 800275c:	461e      	mov	r6, r3
 800275e:	42a5      	cmp	r5, r4
 8002760:	d004      	beq.n	800276c <__libc_init_array+0x1c>
 8002762:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002766:	4798      	blx	r3
 8002768:	3501      	adds	r5, #1
 800276a:	e7f8      	b.n	800275e <__libc_init_array+0xe>
 800276c:	f7fe fe4c 	bl	8001408 <_init>
 8002770:	4c08      	ldr	r4, [pc, #32]	; (8002794 <__libc_init_array+0x44>)
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <__libc_init_array+0x48>)
 8002774:	1ae4      	subs	r4, r4, r3
 8002776:	10a4      	asrs	r4, r4, #2
 8002778:	2500      	movs	r5, #0
 800277a:	461e      	mov	r6, r3
 800277c:	42a5      	cmp	r5, r4
 800277e:	d004      	beq.n	800278a <__libc_init_array+0x3a>
 8002780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002784:	4798      	blx	r3
 8002786:	3501      	adds	r5, #1
 8002788:	e7f8      	b.n	800277c <__libc_init_array+0x2c>
 800278a:	bd70      	pop	{r4, r5, r6, pc}
 800278c:	1ffe8a38 	.word	0x1ffe8a38
 8002790:	1ffe8a38 	.word	0x1ffe8a38
 8002794:	1ffe8a38 	.word	0x1ffe8a38
 8002798:	1ffe8a38 	.word	0x1ffe8a38

0800279c <SPI_MASTER_0_MOSI>:
 800279c:	48028300 00000008                       ...H....

080027a4 <SPI_MASTER_0_MISO>:
 80027a4:	48028300 00000007                       ...H....

080027ac <SPI_MASTER_0_SCLKOUT>:
 80027ac:	48028300 00000009                       ...H....

080027b4 <SPI_MASTER_0_SCLKOUT_Config>:
 80027b4:	00000088 00000001 00000001 00000000     ................
 80027c4:	00000000                                ....

080027c8 <SPI_MASTER_0_SS_0>:
 80027c8:	48028500 00000006                       ...H....

080027d0 <SPI_MASTER_0_SS_0_Config>:
 80027d0:	00000088 00000001 00000001 00000000     ................
 80027e0:	00080000                                ....

080027e4 <SPI_MASTER_0_Config>:
 80027e4:	1ffe8814 08001f01 0800279c 1ffe8800     .........'......
 80027f4:	080027a4 1ffe8a38 00000000 00000000     .'..8...........
	...
 800280c:	080027ac 080027b4 080027c8 00000000     .'...'...'......
	...
 8002834:	080027d0 00000000 00000000 00000000     .'..............
	...
 8002860:	00000404 00000000 01000000 00020302     ................

08002870 <RESET>:
 8002870:	48028100 00000080 00010000 00000000     ...H............
 8002880:	00000009                                ....

08002884 <REGISTER_SIGNAL>:
 8002884:	48028100 00000080 00010000 00000000     ...H............
 8002894:	0000000a                                ....

08002898 <OLED_CS>:
 8002898:	48028300 00000080 00000001 00000000     ...H............
 80028a8:	0000000a 01010230 00010000 00000000     ....0...........
 80028b8:	00010000 01010102                       ........
