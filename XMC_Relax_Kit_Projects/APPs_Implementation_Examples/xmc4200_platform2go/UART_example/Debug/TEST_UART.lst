
TEST_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a90  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1fffc000  1fffc000  00014000  2**0
                  ALLOC
  2 .data         0000004c  1fffc800  0c002a90  0000c800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000f0  1fffc84c  0c002adc  0000c84c  2**2
                  ALLOC
  4 .no_init      00000020  20005fc0  20005fc0  00014000  2**2
                  ALLOC
  5 .debug_aranges 00000cd0  00000000  00000000  0000c850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012c08  00000000  00000000  0000d520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003032  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000084ab  00000000  00000000  0002315a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003344  00000000  00000000  0002b608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000086d9  00000000  00000000  0002e94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a2c  00000000  00000000  00037025  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad8  00000000  00000000  0003da51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000624  00000000  00000000  0003e529  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 5d 28 00 08     ............](..
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 2d 20 00 08 1d 20 00 08     ........- ... ..
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002a90 	.word	0x0c002a90
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	0000004c 	.word	0x0000004c
 8000254:	0c002a90 	.word	0x0c002a90
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffc84c 	.word	0x1fffc84c
 8000264:	000000f0 	.word	0x000000f0
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000270:	1fffc800 	.word	0x1fffc800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000274:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	08002981 	.word	0x08002981
    blx  r0
#endif

    ldr  r0, =main
 800028c:	08002879 	.word	0x08002879

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SystemInit+0x28>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x2c>)
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <SystemInit+0x30>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b0:	f002 f9d4 	bl	800265c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b4:	f002 fa3c 	bl	8002730 <SystemCoreClockSetup>
}
 80002b8:	bd98      	pop	{r3, r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20005fc4 	.word	0x20005fc4
 80002c0:	20005fd4 	.word	0x20005fd4
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <SystemCoreClockUpdate+0xc4>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d03e      	beq.n	8000358 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ec:	f002 fa16 	bl	800271c <OSCHP_GetFrequency>
 80002f0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d020      	beq.n	8000340 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000306:	0e1b      	lsrs	r3, r3, #24
 8000308:	3301      	adds	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	fbb2 f3f3 	udiv	r3, r2, r3
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00d      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000348:	3301      	adds	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e001      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 800035a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	3301      	adds	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	3301      	adds	r3, #1
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	fbb2 f3f3 	udiv	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800037e:	4a06      	ldr	r2, [pc, #24]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	50004600 	.word	0x50004600
 8000390:	50004710 	.word	0x50004710
 8000394:	016e3600 	.word	0x016e3600
 8000398:	20005fc0 	.word	0x20005fc0

0800039c <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <XMC_ERU_Enable+0x28>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d107      	bne.n	80003bc <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 80003ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003b0:	f000 faea 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003b8:	f000 f976 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40044000 	.word	0x40044000

080003c8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	460b      	mov	r3, r1
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	089b      	lsrs	r3, r3, #2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	4618      	mov	r0, r3
 80003de:	7afb      	ldrb	r3, [r7, #11]
 80003e0:	089b      	lsrs	r3, r3, #2
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3204      	adds	r2, #4
 80003ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ee:	7afb      	ldrb	r3, [r7, #11]
 80003f0:	f003 0303 	and.w	r3, r3, #3
 80003f4:	00db      	lsls	r3, r3, #3
 80003f6:	4619      	mov	r1, r3
 80003f8:	23f8      	movs	r3, #248	; 0xf8
 80003fa:	408b      	lsls	r3, r1
 80003fc:	43db      	mvns	r3, r3
 80003fe:	ea02 0103 	and.w	r1, r2, r3
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	1d02      	adds	r2, r0, #4
 8000406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	4619      	mov	r1, r3
 8000414:	2303      	movs	r3, #3
 8000416:	408b      	lsls	r3, r1
 8000418:	43db      	mvns	r3, r3
 800041a:	401a      	ands	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	4a38      	ldr	r2, [pc, #224]	; (8000504 <XMC_GPIO_Init+0x13c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d10a      	bne.n	800043e <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800042c:	7afb      	ldrb	r3, [r7, #11]
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	401a      	ands	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	661a      	str	r2, [r3, #96]	; 0x60
 800043c:	e042      	b.n	80004c4 <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	b25b      	sxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	da3c      	bge.n	80004c4 <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685a      	ldr	r2, [r3, #4]
 800044e:	7afb      	ldrb	r3, [r7, #11]
 8000450:	409a      	lsls	r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	08db      	lsrs	r3, r3, #3
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4618      	mov	r0, r3
 800045e:	7afb      	ldrb	r3, [r7, #11]
 8000460:	08db      	lsrs	r3, r3, #3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3210      	adds	r2, #16
 800046a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046e:	7afb      	ldrb	r3, [r7, #11]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4619      	mov	r1, r3
 8000478:	2307      	movs	r3, #7
 800047a:	408b      	lsls	r3, r1
 800047c:	43db      	mvns	r3, r3
 800047e:	ea02 0103 	and.w	r1, r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f100 0210 	add.w	r2, r0, #16
 8000488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800048c:	7afb      	ldrb	r3, [r7, #11]
 800048e:	08db      	lsrs	r3, r3, #3
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	08db      	lsrs	r3, r3, #3
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3210      	adds	r2, #16
 80004a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	7a1b      	ldrb	r3, [r3, #8]
 80004a8:	4619      	mov	r1, r3
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	f003 0307 	and.w	r3, r3, #7
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	ea42 0103 	orr.w	r1, r2, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f100 0210 	add.w	r2, r0, #16
 80004c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004c4:	7afb      	ldrb	r3, [r7, #11]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	7afb      	ldrb	r3, [r7, #11]
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	3204      	adds	r2, #4
 80004d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	f003 0303 	and.w	r3, r3, #3
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	ea42 0103 	orr.w	r1, r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	1d02      	adds	r2, r0, #4
 80004f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	48028e00 	.word	0x48028e00

08000508 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20005fc0 	.word	0x20005fc0

08000520 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <XMC_SCU_GetMirrorStatus+0x14>)
 8000526:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	50004000 	.word	0x50004000

08000538 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000540:	f7ff fec2 	bl	80002c8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <XMC_SCU_lDelay+0x3c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <XMC_SCU_lDelay+0x40>)
 800054a:	fba2 2303 	umull	r2, r3, r2, r3
 800054e:	0c9a      	lsrs	r2, r3, #18
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e003      	b.n	8000566 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800055e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3f7      	bcc.n	800055e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20005fc0 	.word	0x20005fc0
 8000578:	431bde83 	.word	0x431bde83

0800057c <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000582:	685b      	ldr	r3, [r3, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	50004074 	.word	0x50004074

08000594 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	60d3      	str	r3, [r2, #12]
}
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	50004074 	.word	0x50004074

080005b0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f8c5 	bl	8000748 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005be:	f000 fab3 	bl	8000b28 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	79db      	ldrb	r3, [r3, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00a      	beq.n	80005e0 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005ca:	f000 faeb 	bl	8000ba4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005ce:	bf00      	nop
 80005d0:	f000 fad6 	bl	8000b80 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f083 0301 	eor.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1f7      	bne.n	80005d0 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7a5b      	ldrb	r3, [r3, #9]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f929 	bl	800083c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005ea:	bf00      	nop
 80005ec:	f7ff ff98 	bl	8000520 <XMC_SCU_GetMirrorStatus>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1fa      	bne.n	80005ec <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7a1b      	ldrb	r3, [r3, #8]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fa6e 	bl	8000adc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c1b      	ldrb	r3, [r3, #16]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f937 	bl	8000878 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7c5b      	ldrb	r3, [r3, #17]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f95a 	bl	80008c8 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7c9b      	ldrb	r3, [r3, #18]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f941 	bl	80008a0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7cdb      	ldrb	r3, [r3, #19]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f964 	bl	80008f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	799b      	ldrb	r3, [r3, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00a      	beq.n	8000646 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000630:	f000 faf0 	bl	8000c14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000634:	bf00      	nop
 8000636:	f000 fb15 	bl	8000c64 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800063a:	4603      	mov	r3, r0
 800063c:	f083 0301 	eor.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d1f7      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	78db      	ldrb	r3, [r3, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	799b      	ldrb	r3, [r3, #6]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d017      	beq.n	800068c <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 800065c:	f000 fb26 	bl	8000cac <XMC_SCU_CLOCK_DisableSystemPll>
 8000660:	e014      	b.n	800068c <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000662:	f000 fb13 	bl	8000c8c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	8899      	ldrh	r1, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000672:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000678:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4608      	mov	r0, r1
 8000682:	4611      	mov	r1, r2
 8000684:	462a      	mov	r2, r5
 8000686:	4623      	mov	r3, r4
 8000688:	f000 fb20 	bl	8000ccc <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000694:	d103      	bne.n	800069e <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000696:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800069a:	f000 f855 	bl	8000748 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800069e:	f7ff fe13 	bl	80002c8 <SystemCoreClockUpdate>
}
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}

080006a8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	0f1b      	lsrs	r3, r3, #28
 80006b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006bc:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006cc:	4413      	add	r3, r2
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	50004414 	.word	0x50004414

080006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	0f1b      	lsrs	r3, r3, #28
 80006ec:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006f4:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	461a      	mov	r2, r3
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000704:	4413      	add	r3, r2
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4013      	ands	r3, r2
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf14      	ite	ne
 8000710:	2301      	movne	r3, #1
 8000712:	2300      	moveq	r3, #0
 8000714:	b2db      	uxtb	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	5000440c 	.word	0x5000440c

08000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800072c:	f7ff feec 	bl	8000508 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000730:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000734:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	50004600 	.word	0x50004600

08000748 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000750:	4906      	ldr	r1, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	50004600 	.word	0x50004600

08000770 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000778:	4906      	ldr	r1, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	50004600 	.word	0x50004600

08000798 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	50004600 	.word	0x50004600

080007c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d108      	bne.n	80007e2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	60d3      	str	r3, [r2, #12]
 80007e0:	e007      	b.n	80007f2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007e2:	4a06      	ldr	r2, [pc, #24]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	60d3      	str	r3, [r2, #12]
  }
}
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	50004710 	.word	0x50004710

08000800 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800080a:	bf00      	nop
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800080e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1f8      	bne.n	800080c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800081a:	4907      	ldr	r1, [pc, #28]	; (8000838 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000824:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000826:	4313      	orrs	r3, r2
 8000828:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	50004000 	.word	0x50004000
 8000838:	50004300 	.word	0x50004300

0800083c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000846:	bf00      	nop
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800084a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f8      	bne.n	8000848 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000856:	4907      	ldr	r1, [pc, #28]	; (8000874 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000860:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004000 	.word	0x50004000
 8000874:	50004300 	.word	0x50004300

08000878 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800088e:	4313      	orrs	r3, r2
 8000890:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	50004600 	.word	0x50004600

080008a0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80008ac:	6a1b      	ldr	r3, [r3, #32]
 80008ae:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80008b6:	4313      	orrs	r3, r2
 80008b8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	50004600 	.word	0x50004600

080008c8 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008d0:	4906      	ldr	r1, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008de:	4313      	orrs	r3, r2
 80008e0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	50004600 	.word	0x50004600

080008f0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000906:	4313      	orrs	r3, r2
 8000908:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	50004600 	.word	0x50004600

08000918 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 800092e:	4313      	orrs	r3, r2
 8000930:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	50004600 	.word	0x50004600

08000940 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000956:	4313      	orrs	r3, r2
 8000958:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	50004600 	.word	0x50004600

08000968 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	6053      	str	r3, [r2, #4]
}
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	50004600 	.word	0x50004600

08000988 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	0f1b      	lsrs	r3, r3, #28
 8000994:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800099c:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009ac:	4413      	add	r3, r2
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	50004648 	.word	0x50004648

080009c0 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	0f1b      	lsrs	r3, r3, #28
 80009cc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009d4:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009e4:	4413      	add	r3, r2
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4013      	ands	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	50004640 	.word	0x50004640

08000a08 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a0c:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a16:	f023 0302 	bic.w	r3, r3, #2
 8000a1a:	6153      	str	r3, [r2, #20]
}
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	50004710 	.word	0x50004710

08000a28 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a32:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a3e:	bf00      	nop
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f9      	beq.n	8000a40 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a58:	491e      	ldr	r1, [pc, #120]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a66:	4313      	orrs	r3, r2
 8000a68:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f023 0310 	bic.w	r3, r3, #16
 8000a80:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a8e:	bf00      	nop
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f9      	beq.n	8000a90 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f023 0301 	bic.w	r3, r3, #1
 8000aa6:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000aa8:	bf00      	nop
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f9      	bne.n	8000aaa <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ab6:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ac0:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	60da      	str	r2, [r3, #12]
}
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	50004710 	.word	0x50004710
 8000ad8:	50004160 	.word	0x50004160

08000adc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000af0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d10e      	bne.n	8000b16 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b02:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f7ff fd17 	bl	8000538 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b0a:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b14:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f7ff fd0e 	bl	8000538 <XMC_SCU_lDelay>
}
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	50004710 	.word	0x50004710

08000b28 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d109      	bne.n	8000b4c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b3e:	bf00      	nop
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f9      	beq.n	8000b40 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5e:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b60:	bf00      	nop
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f9      	bne.n	8000b62 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	50004200 	.word	0x50004200
 8000b7c:	50004400 	.word	0x50004400

08000b80 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf0c      	ite	eq
 8000b90:	2301      	moveq	r3, #1
 8000b92:	2300      	movne	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	50004300 	.word	0x50004300

08000ba4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ba8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bac:	f7ff fcf2 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bba:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000bbc:	bf00      	nop
 8000bbe:	f7ff fcdd 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d0f8      	beq.n	8000bbe <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bcc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bd0:	f7ff fce0 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bda:	bf00      	nop
 8000bdc:	f7ff fcce 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f8      	beq.n	8000bdc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bee:	f7ff fcd1 	bl	8000594 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bf2:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bfe:	bf00      	nop
 8000c00:	f7ff fcbc 	bl	800057c <XMC_SCU_INTERUPT_GetEventStatus>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f8      	beq.n	8000c00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	50004300 	.word	0x50004300

08000c14 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c14:	b5b0      	push	{r4, r5, r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c22:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c24:	4d0d      	ldr	r5, [pc, #52]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c2e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c32:	f001 fd73 	bl	800271c <OSCHP_GetFrequency>
 8000c36:	4602      	mov	r2, r0
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3e:	0d1b      	lsrs	r3, r3, #20
 8000c40:	3b01      	subs	r3, #1
 8000c42:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c44:	4323      	orrs	r3, r4
 8000c46:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c52:	6053      	str	r3, [r2, #4]
}
 8000c54:	bdb0      	pop	{r4, r5, r7, pc}
 8000c56:	bf00      	nop
 8000c58:	50004710 	.word	0x50004710
 8000c5c:	50004700 	.word	0x50004700
 8000c60:	6b5fca6b 	.word	0x6b5fca6b

08000c64 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c70:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c74:	bf0c      	ite	eq
 8000c76:	2301      	moveq	r3, #1
 8000c78:	2300      	movne	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	50004710 	.word	0x50004710

08000c8c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9a:	f023 0302 	bic.w	r3, r3, #2
 8000c9e:	6053      	str	r3, [r2, #4]
}
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	50004710 	.word	0x50004710

08000cac <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	6053      	str	r3, [r2, #4]
}
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	50004710 	.word	0x50004710

08000ccc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	81fb      	strh	r3, [r7, #14]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cde:	89fb      	ldrh	r3, [r7, #14]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fd6d 	bl	80007c0 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000ce6:	7b7b      	ldrb	r3, [r7, #13]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	f040 808b 	bne.w	8000e04 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cf4:	f001 fd12 	bl	800271c <OSCHP_GetFrequency>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8000d00:	0c9b      	lsrs	r3, r3, #18
 8000d02:	059b      	lsls	r3, r3, #22
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	e002      	b.n	8000d0e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d0c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	fb02 f203 	mul.w	r2, r2, r3
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	4a4b      	ldr	r2, [pc, #300]	; (8000e50 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	091b      	lsrs	r3, r3, #4
 8000d28:	0d9b      	lsrs	r3, r3, #22
 8000d2a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d2c:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2e:	4b49      	ldr	r3, [pc, #292]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d38:	bf00      	nop
 8000d3a:	4b46      	ldr	r3, [pc, #280]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f9      	beq.n	8000d3a <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d46:	4a43      	ldr	r2, [pc, #268]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d48:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f043 0310 	orr.w	r3, r3, #16
 8000d50:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d52:	4940      	ldr	r1, [pc, #256]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d54:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d5a:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	0212      	lsls	r2, r2, #8
 8000d62:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d6a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d72:	4313      	orrs	r3, r2
 8000d74:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d76:	4a37      	ldr	r2, [pc, #220]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d84:	4b33      	ldr	r3, [pc, #204]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f023 0310 	bic.w	r3, r3, #16
 8000d8c:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d8e:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d90:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d98:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d9a:	bf00      	nop
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f9      	beq.n	8000d9c <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000da8:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000db4:	bf00      	nop
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	0d9b      	lsrs	r3, r3, #22
 8000dce:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dd0:	6a3a      	ldr	r2, [r7, #32]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d202      	bcs.n	8000dde <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dd8:	6938      	ldr	r0, [r7, #16]
 8000dda:	f000 f845 	bl	8000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	095b      	lsrs	r3, r3, #5
 8000dea:	0d9b      	lsrs	r3, r3, #22
 8000dec:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dee:	6a3a      	ldr	r2, [r7, #32]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d202      	bcs.n	8000dfc <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000df6:	6938      	ldr	r0, [r7, #16]
 8000df8:	f000 f836 	bl	8000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000dfc:	6a38      	ldr	r0, [r7, #32]
 8000dfe:	f000 f833 	bl	8000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e02:	e01c      	b.n	8000e3e <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e04:	4913      	ldr	r1, [pc, #76]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e12:	4313      	orrs	r3, r2
 8000e14:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e16:	bf00      	nop
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f9      	beq.n	8000e18 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e30:	bf00      	nop
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f9      	beq.n	8000e32 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e40:	2205      	movs	r2, #5
 8000e42:	60da      	str	r2, [r3, #12]
}
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	aaaaaaab 	.word	0xaaaaaaab
 8000e54:	50004710 	.word	0x50004710
 8000e58:	f08080ff 	.word	0xf08080ff
 8000e5c:	88888889 	.word	0x88888889
 8000e60:	b60b60b7 	.word	0xb60b60b7
 8000e64:	50004160 	.word	0x50004160

08000e68 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e70:	490b      	ldr	r1, [pc, #44]	; (8000ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e80:	4313      	orrs	r3, r2
 8000e82:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e84:	bf00      	nop
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f9      	beq.n	8000e86 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e92:	2032      	movs	r0, #50	; 0x32
 8000e94:	f7ff fb50 	bl	8000538 <XMC_SCU_lDelay>
}
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	50004710 	.word	0x50004710

08000ea4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb2:	60da      	str	r2, [r3, #12]
}
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <XMC_CCU4_lDeassertReset+0x2c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d103      	bne.n	8000ed8 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	f7ff fbe9 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000ed6:	e006      	b.n	8000ee6 <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <XMC_CCU4_lDeassertReset+0x30>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d102      	bne.n	8000ee6 <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f7ff fbe1 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	4000c000 	.word	0x4000c000
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <XMC_CCU4_lUngateClock+0x2c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d103      	bne.n	8000f0c <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000f04:	2004      	movs	r0, #4
 8000f06:	f7ff fd3f 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f0a:	e006      	b.n	8000f1a <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <XMC_CCU4_lUngateClock+0x30>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d102      	bne.n	8000f1a <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000f14:	2008      	movs	r0, #8
 8000f16:	f7ff fd37 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	4000c000 	.word	0x4000c000
 8000f24:	40010000 	.word	0x40010000

08000f28 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000f30:	2010      	movs	r0, #16
 8000f32:	f7ff fd19 	bl	8000968 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffdc 	bl	8000ef4 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffbf 	bl	8000ec0 <XMC_CCU4_lDeassertReset>
#endif
}
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe7 	bl	8000f28 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f6c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	039b      	lsls	r3, r3, #14
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	051a      	lsls	r2, r3, #20
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	795b      	ldrb	r3, [r3, #5]
 8000fba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	795b      	ldrb	r3, [r3, #5]
 8000fca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b0b      	cmp	r3, #11
 8001004:	d836      	bhi.n	8001074 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	0800103d 	.word	0x0800103d
 8001010:	0800103d 	.word	0x0800103d
 8001014:	08001047 	.word	0x08001047
 8001018:	08001047 	.word	0x08001047
 800101c:	08001075 	.word	0x08001075
 8001020:	08001075 	.word	0x08001075
 8001024:	08001075 	.word	0x08001075
 8001028:	08001075 	.word	0x08001075
 800102c:	08001051 	.word	0x08001051
 8001030:	0800105d 	.word	0x0800105d
 8001034:	08001069 	.word	0x08001069
 8001038:	08001069 	.word	0x08001069
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 800103c:	2303      	movs	r3, #3
 800103e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
      break;
 8001044:	e01b      	b.n	800107e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001046:	230c      	movs	r3, #12
 8001048:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800104a:	2302      	movs	r3, #2
 800104c:	617b      	str	r3, [r7, #20]
      break;
 800104e:	e016      	b.n	800107e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001054:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001056:	2308      	movs	r3, #8
 8001058:	617b      	str	r3, [r7, #20]
      break;
 800105a:	e010      	b.n	800107e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 800105c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001060:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8001062:	230a      	movs	r3, #10
 8001064:	617b      	str	r3, [r7, #20]
      break;
 8001066:	e00a      	b.n	800107e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001068:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800106c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800106e:	230c      	movs	r3, #12
 8001070:	617b      	str	r3, [r7, #20]
      break;
 8001072:	e004      	b.n	800107e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
	  break;
 800107c:	bf00      	nop
  }

  if (mask != 0)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800108a:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8001096:	78ba      	ldrb	r2, [r7, #2]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 80010ac:	371c      	adds	r7, #28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	460b      	mov	r3, r1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f7ff f968 	bl	800039c <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80010d0:	7afb      	ldrb	r3, [r7, #11]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4619      	mov	r1, r3
 80010d6:	230f      	movs	r3, #15
 80010d8:	408b      	lsls	r3, r1
 80010da:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 80010dc:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	7af9      	ldrb	r1, [r7, #11]
 80010e4:	0089      	lsls	r1, r1, #2
 80010e6:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80010e8:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
 80010ee:	7afa      	ldrb	r2, [r7, #11]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3204      	adds	r2, #4
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop

08001104 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
 8001110:	4613      	mov	r3, r2
 8001112:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8001114:	78fa      	ldrb	r2, [r7, #3]
 8001116:	78bb      	ldrb	r3, [r7, #2]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	b2d9      	uxtb	r1, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	f001 0103 	and.w	r1, r1, #3
 8001126:	0109      	lsls	r1, r1, #4
 8001128:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800112c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8001130:	4301      	orrs	r1, r0
 8001132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
 800114c:	4613      	mov	r3, r2
 800114e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4619      	mov	r1, r3
 800115a:	2303      	movs	r3, #3
 800115c:	408b      	lsls	r3, r1
 800115e:	43db      	mvns	r3, r3
 8001160:	401a      	ands	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800116a:	78bb      	ldrb	r3, [r7, #2]
 800116c:	78f9      	ldrb	r1, [r7, #3]
 800116e:	0049      	lsls	r1, r1, #1
 8001170:	408b      	lsls	r3, r1
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001196:	b2db      	uxtb	r3, r3
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 80011ce:	2310      	movs	r3, #16
 80011d0:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f89e 	bl	8001314 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	7a1b      	ldrb	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	7a1b      	ldrb	r3, [r3, #8]
 80011e4:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d014      	beq.n	8001216 <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	4611      	mov	r1, r2
 8001200:	461a      	mov	r2, r3
 8001202:	f000 f933 	bl	800146c <XMC_USIC_CH_SetBaudrateEx>
 8001206:	e006      	b.n	8001216 <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	4619      	mov	r1, r3
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	f000 f8b9 	bl	8001388 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	79db      	ldrb	r3, [r3, #7]
 800121a:	3b01      	subs	r3, #1
 800121c:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	3301      	adds	r3, #1
 8001224:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001226:	4313      	orrs	r3, r2
 8001228:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	795b      	ldrb	r3, [r3, #5]
 8001238:	3b01      	subs	r3, #1
 800123a:	061b      	lsls	r3, r3, #24
 800123c:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	799b      	ldrb	r3, [r3, #6]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d009      	beq.n	8001260 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	799b      	ldrb	r3, [r3, #6]
 8001254:	3b01      	subs	r3, #1
 8001256:	041b      	lsls	r3, r3, #16
 8001258:	431a      	orrs	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
 800125e:	e008      	b.n	8001272 <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	795b      	ldrb	r3, [r3, #5]
 8001268:	3b01      	subs	r3, #1
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	431a      	orrs	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	895b      	ldrh	r3, [r3, #10]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop

08001294 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d110      	bne.n	80012d0 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80012ae:	bf00      	nop
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff67 	bl	8001184 <XMC_USIC_CH_GetTransmitBufferStatus>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b80      	cmp	r3, #128	; 0x80
 80012ba:	d0f9      	beq.n	80012b0 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c2:	f7ff ff6f 	bl	80011a4 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80012ce:	e003      	b.n	80012d8 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 80012d0:	887a      	ldrh	r2, [r7, #2]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop

080012e0 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80012ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fa:	81fb      	strh	r3, [r7, #14]
 80012fc:	e003      	b.n	8001306 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001304:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001306:	89fb      	ldrh	r3, [r7, #14]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <XMC_USIC_CH_Enable+0x5c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d003      	beq.n	800132c <XMC_USIC_CH_Enable+0x18>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <XMC_USIC_CH_Enable+0x60>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d103      	bne.n	8001334 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800132c:	4812      	ldr	r0, [pc, #72]	; (8001378 <XMC_USIC_CH_Enable+0x64>)
 800132e:	f000 f9df 	bl	80016f0 <XMC_USIC_Enable>
 8001332:	e00a      	b.n	800134a <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <XMC_USIC_CH_Enable+0x68>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d003      	beq.n	8001344 <XMC_USIC_CH_Enable+0x30>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <XMC_USIC_CH_Enable+0x6c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d102      	bne.n	800134a <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <XMC_USIC_CH_Enable+0x70>)
 8001346:	f000 f9d3 	bl	80016f0 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2203      	movs	r2, #3
 800134e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001350:	bf00      	nop
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f9      	beq.n	8001352 <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f023 020f 	bic.w	r2, r3, #15
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
}
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40030000 	.word	0x40030000
 8001374:	40030200 	.word	0x40030200
 8001378:	40030008 	.word	0x40030008
 800137c:	48020000 	.word	0x48020000
 8001380:	48020200 	.word	0x48020200
 8001384:	48020008 	.word	0x48020008

08001388 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b63      	cmp	r3, #99	; 0x63
 8001398:	d95a      	bls.n	8001450 <XMC_USIC_CH_SetBaudrate+0xc8>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d057      	beq.n	8001450 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80013a0:	f7ff f9c2 	bl	8000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80013a8:	fba3 2302 	umull	r2, r3, r3, r2
 80013ac:	095b      	lsrs	r3, r3, #5
 80013ae:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	095b      	lsrs	r3, r3, #5
 80013ba:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 80013bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80013c2:	2301      	movs	r3, #1
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80013c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80013cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
 80013d2:	e022      	b.n	800141a <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d8:	fb02 f203 	mul.w	r2, r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e8:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	0a9b      	lsrs	r3, r3, #10
 80013ee:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013f6:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013fe:	d809      	bhi.n	8001414 <XMC_USIC_CH_SetBaudrate+0x8c>
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	429a      	cmp	r2, r3
 8001406:	d205      	bcs.n	8001414 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001416:	3b01      	subs	r3, #1
 8001418:	633b      	str	r3, [r7, #48]	; 0x30
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1d9      	bne.n	80013d4 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001424:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8001432:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	3a01      	subs	r2, #1
 8001438:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800143a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	3b01      	subs	r3, #1
 8001440:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001442:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800144e:	e002      	b.n	8001456 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8001456:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800145a:	4618      	mov	r0, r3
 800145c:	3738      	adds	r7, #56	; 0x38
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	51eb851f 	.word	0x51eb851f
 8001468:	fc0080ef 	.word	0xfc0080ef

0800146c <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001478:	f7ff f956 	bl	8000728 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800147c:	4603      	mov	r3, r0
 800147e:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	fb02 f303 	mul.w	r3, r2, r3
 8001488:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 800148e:	6a3a      	ldr	r2, [r7, #32]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	429a      	cmp	r2, r3
 8001494:	dd5f      	ble.n	8001556 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001496:	6a3a      	ldr	r2, [r7, #32]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	fb92 f3f3 	sdiv	r3, r2, r3
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80014a0:	e010      	b.n	80014c4 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	3301      	adds	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	fb03 f302 	mul.w	r3, r3, r2
 80014b8:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80014ba:	6a3a      	ldr	r2, [r7, #32]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d8e9      	bhi.n	80014a2 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80014ce:	6a3a      	ldr	r2, [r7, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80014e4:	6a3a      	ldr	r2, [r7, #32]
 80014e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e8:	3301      	adds	r3, #1
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001506:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1acb      	subs	r3, r1, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	bfb8      	it	lt
 8001514:	425b      	neglt	r3, r3
 8001516:	429a      	cmp	r2, r3
 8001518:	da02      	bge.n	8001520 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	3301      	adds	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001538:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	3a01      	subs	r2, #1
 800153e:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001540:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	3b01      	subs	r3, #1
 8001546:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001548:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001554:	e002      	b.n	800155c <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 800155c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001560:	4618      	mov	r0, r3
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	fc0080ef 	.word	0xfc0080ef

0800156c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001582:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001594:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	0211      	lsls	r1, r2, #8
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80015a2:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 80015a4:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	f8ffc0c0 	.word	0xf8ffc0c0

080015bc <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80015e4:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	0211      	lsls	r1, r2, #8
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80015ee:	79fa      	ldrb	r2, [r7, #7]
 80015f0:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80015f2:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80015f4:	4313      	orrs	r3, r2
 80015f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	efffc0c0 	.word	0xefffc0c0

08001610 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	460b      	mov	r3, r1
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001624:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800162c:	431a      	orrs	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	460b      	mov	r3, r1
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	2107      	movs	r1, #7
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001666:	431a      	orrs	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	460b      	mov	r3, r1
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	2107      	movs	r1, #7
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	460b      	mov	r3, r1
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80016c8:	7afb      	ldrb	r3, [r7, #11]
 80016ca:	2107      	movs	r1, #7
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (service_request << (uint32_t)interrupt_node));
}
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <XMC_USIC_Enable+0x78>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d118      	bne.n	8001732 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001700:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001704:	f7ff f940 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001708:	bf00      	nop
 800170a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800170e:	f7ff f957 	bl	80009c0 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f8      	bne.n	800170a <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001718:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800171c:	f7fe ffc4 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001720:	bf00      	nop
 8001722:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001726:	f7fe ffdb 	bl	80006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f8      	bne.n	8001722 <XMC_USIC_Enable+0x32>
 8001730:	e017      	b.n	8001762 <XMC_USIC_Enable+0x72>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <XMC_USIC_Enable+0x7c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d113      	bne.n	8001762 <XMC_USIC_Enable+0x72>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <XMC_USIC_Enable+0x80>)
 800173c:	f7ff f924 	bl	8000988 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001740:	bf00      	nop
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <XMC_USIC_Enable+0x80>)
 8001744:	f7ff f93c 	bl	80009c0 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f9      	bne.n	8001742 <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <XMC_USIC_Enable+0x80>)
 8001750:	f7fe ffaa 	bl	80006a8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001754:	bf00      	nop
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <XMC_USIC_Enable+0x80>)
 8001758:	f7fe ffc2 	bl	80006e0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <XMC_USIC_Enable+0x66>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40030008 	.word	0x40030008
 800176c:	48020008 	.word	0x48020008
 8001770:	10000080 	.word	0x10000080

08001774 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017d6:	b2db      	uxtb	r3, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f4:	409a      	lsls	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800185e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800187a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80018a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	401a      	ands	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001916:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4798      	blx	r3
 8001960:	4603      	mov	r3, r0
 8001962:	73fb      	strb	r3, [r7, #15]

  return status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop

08001970 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 800197c:	2304      	movs	r3, #4
 800197e:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001988:	2b00      	cmp	r3, #0
 800198a:	d000      	beq.n	800198e <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 800198c:	e007      	b.n	800199e <UART_Transmit+0x2e>

  switch(handle->config->transmit_mode)
  {
#ifdef UART_TX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartTransmitIRQ(handle, data_ptr, count);
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	f000 f824 	bl	80019e0 <UART_StartTransmitIRQ>
 8001998:	4603      	mov	r3, r0
 800199a:	75fb      	strb	r3, [r7, #23]
    break;
 800199c:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <UART_Receive>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80019b4:	2304      	movs	r3, #4
 80019b6:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->receive_mode)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d000      	beq.n	80019c6 <UART_Receive+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartReceivePolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 80019c4:	e007      	b.n	80019d6 <UART_Receive+0x2e>

  switch(handle->config->receive_mode)
  {
#ifdef UART_RX_INTERRUPT_USED
  case UART_TRANSFER_MODE_INTERRUPT:
    ret_stat = UART_StartReceiveIRQ(handle, data_ptr, count);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	f000 f864 	bl	8001a98 <UART_StartReceiveIRQ>
 80019d0:	4603      	mov	r3, r0
 80019d2:	75fb      	strb	r3, [r7, #23]
    break;
 80019d4:	bf00      	nop
    break;
#endif
  default:
    break;
  }
  return ret_stat;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <UART_StartTransmitIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 80019ec:	2304      	movs	r3, #4
 80019ee:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartTransmitIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)));

  if (handle->config->transmit_mode == UART_TRANSFER_MODE_INTERRUPT)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d144      	bne.n	8001a8c <UART_StartTransmitIRQ+0xac>
  {
    ret_stat = UART_STATUS_BUSY;
 8001a02:	2302      	movs	r3, #2
 8001a04:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->tx_busy == false)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	7e1b      	ldrb	r3, [r3, #24]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f083 0301 	eor.w	r3, r3, #1
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03a      	beq.n	8001a8c <UART_StartTransmitIRQ+0xac>
    {
      /*If there is no transmission in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d035      	beq.n	8001a88 <UART_StartTransmitIRQ+0xa8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d032      	beq.n	8001a88 <UART_StartTransmitIRQ+0xa8>
      {
        /*Obtain the address of data, size of data*/
        ptr_runtime->tx_data = data_ptr;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	601a      	str	r2, [r3, #0]
        ptr_runtime->tx_data_count = count;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
        /*Initialize to first index and set the busy flag*/
        ptr_runtime->tx_data_index = 0U;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
        ptr_runtime->tx_busy = true;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2201      	movs	r2, #1
 8001a38:	761a      	strb	r2, [r3, #24]

        /*Enable the transmit buffer event*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00c      	beq.n	8001a60 <UART_StartTransmitIRQ+0x80>
        {
          /*Clear the transmit FIFO*/
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff00 	bl	8001850 <XMC_USIC_CH_TXFIFO_Flush>
          /*Enable transmit buffer interrupt*/
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a5a:	f7ff fed3 	bl	8001804 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8001a5e:	e006      	b.n	8001a6e <UART_StartTransmitIRQ+0x8e>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6a:	f7ff fe89 	bl	8001780 <XMC_USIC_CH_EnableEvent>
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]
        /*Trigger the transmit buffer interrupt*/
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff feaf 	bl	80017e4 <XMC_USIC_CH_TriggerServiceRequest>
 8001a86:	e001      	b.n	8001a8c <UART_StartTransmitIRQ+0xac>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop

08001a98 <UART_StartReceiveIRQ>:
 * request is registered.
 *
 *
 */
UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	75fb      	strb	r3, [r7, #23]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	613b      	str	r3, [r7, #16]

  XMC_ASSERT("UART_StartReceiveIRQ: UART APP handle invalid", ((handle != NULL)&&
            (handle->runtime != NULL)));

  if (handle->config->receive_mode == UART_TRANSFER_MODE_INTERRUPT)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d13e      	bne.n	8001b38 <UART_StartReceiveIRQ+0xa0>
  {
    ret_stat = UART_STATUS_BUSY;
 8001aba:	2302      	movs	r3, #2
 8001abc:	75fb      	strb	r3, [r7, #23]
    if (ptr_runtime->rx_busy == false)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	7e5b      	ldrb	r3, [r3, #25]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f083 0301 	eor.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d034      	beq.n	8001b38 <UART_StartReceiveIRQ+0xa0>
    {
      /*If no active reception in progress*/
      if ((data_ptr != NULL) && (count > 0U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d02f      	beq.n	8001b34 <UART_StartReceiveIRQ+0x9c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02c      	beq.n	8001b34 <UART_StartReceiveIRQ+0x9c>
      {
        /*Obtain the address of data buffer and
         * number of data bytes to be received*/
        ptr_runtime->rx_data = data_ptr;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	605a      	str	r2, [r3, #4]
        ptr_runtime->rx_data_count = count;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
        ptr_runtime->rx_busy = true;
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	765a      	strb	r2, [r3, #25]
        ptr_runtime->rx_data_index = 0U;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]

        if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <UART_StartReceiveIRQ+0x88>
        {
          /*Clear the receive FIFO, configure the trigger lime
           * and enable the receive events*/
          XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff00 	bl	8001908 <XMC_USIC_CH_RXFIFO_Flush>

          /*Configure the FIFO trigger limit based on the required data size*/
          UART_lReconfigureRxFIFO(handle, count);
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	f000 f930 	bl	8001d70 <UART_lReconfigureRxFIFO>

          XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001b1a:	f7ff fecf 	bl	80018bc <XMC_USIC_CH_RXFIFO_EnableEvent>
 8001b1e:	e006      	b.n	8001b2e <UART_StartReceiveIRQ+0x96>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001b2a:	f7ff fe29 	bl	8001780 <XMC_USIC_CH_EnableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE));
        }
        ret_stat = UART_STATUS_SUCCESS;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]
 8001b32:	e001      	b.n	8001b38 <UART_StartReceiveIRQ+0xa0>
      }
      else
      {
        ret_stat = UART_STATUS_BUFFER_INVALID;
 8001b34:	2303      	movs	r3, #3
 8001b36:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return ret_stat;
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop

08001b44 <UART_lTransmitHandler>:
 *  * param[in]  handle UART APP handle pointer of type UART_t*
 *
 *  * return void
 */
void UART_lTransmitHandler(const UART_t * const handle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	60fb      	str	r3, [r7, #12]

  if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d240      	bcs.n	8001be0 <UART_lTransmitHandler+0x9c>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d027      	beq.n	8001bba <UART_lTransmitHandler+0x76>
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001b6a:	e01a      	b.n	8001ba2 <UART_lTransmitHandler+0x5e>
      {
        if (ptr_runtime->tx_data_index < ptr_runtime->tx_data_count)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d212      	bcs.n	8001b9e <UART_lTransmitHandler+0x5a>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff fb81 	bl	8001294 <XMC_UART_CH_Transmit>
          (ptr_runtime->tx_data_index)++;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	e001      	b.n	8001ba2 <UART_lTransmitHandler+0x5e>
        }
        else
        {
          break;
 8001b9e:	bf00      	nop
 8001ba0:	e053      	b.n	8001c4a <UART_lTransmitHandler+0x106>
  {
    if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
    {
      /*When Transmit FIFO is enabled*/
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe60 	bl	800186c <XMC_USIC_CH_TXFIFO_IsFull>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1d9      	bne.n	8001b6c <UART_lTransmitHandler+0x28>
 8001bb8:	e047      	b.n	8001c4a <UART_lTransmitHandler+0x106>
      }
    }
    else
    {
      /*When Transmit FIFO is disabled*/
      XMC_UART_CH_Transmit(handle->channel,(uint16_t)ptr_runtime->tx_data[ptr_runtime->tx_data_index]);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7ff fb60 	bl	8001294 <XMC_UART_CH_Transmit>
      (ptr_runtime->tx_data_index)++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	e034      	b.n	8001c4a <UART_lTransmitHandler+0x106>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe55 	bl	8001894 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d02c      	beq.n	8001c4a <UART_lTransmitHandler+0x106>
    {
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <UART_lTransmitHandler+0xc8>
      {
        /*Disable the transmit FIFO event*/
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c06:	f7ff fe0f 	bl	8001828 <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001c0a:	e006      	b.n	8001c1a <UART_lTransmitHandler+0xd6>
      }
      else
      {
        /*Disable the standard transmit event*/
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	f7ff fdc3 	bl	80017a0 <XMC_USIC_CH_DisableEvent>
      }

      /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001c1a:	bf00      	nop
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fdcf 	bl	80017c4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b80      	cmp	r3, #128	; 0x80
 8001c2a:	d0f7      	beq.n	8001c1c <UART_lTransmitHandler+0xd8>
      {

      }
      /*All data is transmitted*/
      ptr_runtime->tx_busy = false;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	761a      	strb	r2, [r3, #24]
      ptr_runtime->tx_data = NULL;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

      if (handle->config->tx_cbhandler != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <UART_lTransmitHandler+0x106>
      {
        /*Execute the callback function provided in the UART APP UI*/
        handle->config->tx_cbhandler();
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4798      	blx	r3
      }
    }
  }
}
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04e      	beq.n	8001d08 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001c6a:	e032      	b.n	8001cd2 <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d211      	bcs.n	8001c9c <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	18d4      	adds	r4, r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fb2a 	bl	80012e0 <XMC_UART_CH_GetReceivedData>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d114      	bne.n	8001cd2 <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001cb8:	f7ff fe12 	bl	80018e0 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4798      	blx	r3
        }
        break;
 8001cce:	e00b      	b.n	8001ce8 <UART_lReceiveHandler+0x98>
 8001cd0:	e00a      	b.n	8001ce8 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fe24 	bl	8001924 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f083 0301 	eor.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1c1      	bne.n	8001c6c <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d23a      	bcs.n	8001d6a <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f000 f835 	bl	8001d70 <UART_lReconfigureRxFIFO>
 8001d06:	e030      	b.n	8001d6a <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d211      	bcs.n	8001d38 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	18d4      	adds	r4, r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fadc 	bl	80012e0 <XMC_UART_CH_GetReceivedData>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d112      	bne.n	8001d6a <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001d54:	f7ff fd24 	bl	80017a0 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4798      	blx	r3
      }
    }
  }
}
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}

08001d70 <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d86:	461a      	mov	r2, r3
 8001d88:	2301      	movs	r3, #1
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d203      	bcs.n	8001d9e <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e002      	b.n	8001da4 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8001dac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	f7ff fc2b 	bl	8001610 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001dcc:	0a1b      	lsrs	r3, r3, #8
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_EnableIRQ+0x34>)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	4909      	ldr	r1, [pc, #36]	; (8001e64 <__NVIC_SetPriority+0x50>)
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	3b04      	subs	r3, #4
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
  }
}
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	bf28      	it	cs
 8001e86:	2306      	movcs	r3, #6
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3306      	adds	r3, #6
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	1e5a      	subs	r2, r3, #1
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	1e59      	subs	r1, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001ebc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3724      	adds	r7, #36	; 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001edc:	78f8      	ldrb	r0, [r7, #3]
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	3306      	adds	r3, #6
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001eee:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	1d83      	adds	r3, r0, #6
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop

08001f08 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f7ff f952 	bl	80011c0 <XMC_UART_CH_InitEx>
}
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop

08001f24 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f023 030f 	bic.w	r3, r3, #15
 8001f34:	f043 0202 	orr.w	r2, r3, #2
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop

08001f48 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 15U, &UART_0_rx_pin_config);
 8001f52:	482d      	ldr	r0, [pc, #180]	; (8002008 <UART_0_init+0xc0>)
 8001f54:	210f      	movs	r1, #15
 8001f56:	4a2d      	ldr	r2, [pc, #180]	; (800200c <UART_0_init+0xc4>)
 8001f58:	f7fe fa36 	bl	80003c8 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 8001f5c:	482c      	ldr	r0, [pc, #176]	; (8002010 <UART_0_init+0xc8>)
 8001f5e:	492d      	ldr	r1, [pc, #180]	; (8002014 <UART_0_init+0xcc>)
 8001f60:	f7ff ffd2 	bl	8001f08 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 2U);
 8001f64:	482a      	ldr	r0, [pc, #168]	; (8002010 <UART_0_init+0xc8>)
 8001f66:	2100      	movs	r1, #0
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f7ff ffaf 	bl	8001ecc <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH0,
 8001f6e:	4828      	ldr	r0, [pc, #160]	; (8002010 <UART_0_init+0xc8>)
 8001f70:	2110      	movs	r1, #16
 8001f72:	2204      	movs	r2, #4
 8001f74:	2301      	movs	r3, #1
 8001f76:	f7ff faf9 	bl	800156c <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 8001f7a:	4825      	ldr	r0, [pc, #148]	; (8002010 <UART_0_init+0xc8>)
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2204      	movs	r2, #4
 8001f80:	2300      	movs	r3, #0
 8001f82:	f7ff fb1b 	bl	80015bc <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8001f86:	4822      	ldr	r0, [pc, #136]	; (8002010 <UART_0_init+0xc8>)
 8001f88:	f7ff ffcc 	bl	8001f24 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &UART_0_tx_pin_config);
 8001f8c:	481e      	ldr	r0, [pc, #120]	; (8002008 <UART_0_init+0xc0>)
 8001f8e:	210e      	movs	r1, #14
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <UART_0_init+0xd0>)
 8001f92:	f7fe fa19 	bl	80003c8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8001f96:	481e      	ldr	r0, [pc, #120]	; (8002010 <UART_0_init+0xc8>)
 8001f98:	2110      	movs	r1, #16
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f7ff fb50 	bl	8001640 <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8001fa0:	481b      	ldr	r0, [pc, #108]	; (8002010 <UART_0_init+0xc8>)
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f7ff fb67 	bl	8001678 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8001faa:	4819      	ldr	r0, [pc, #100]	; (8002010 <UART_0_init+0xc8>)
 8001fac:	2110      	movs	r1, #16
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f7ff fb80 	bl	80016b4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8001fb4:	4816      	ldr	r0, [pc, #88]	; (8002010 <UART_0_init+0xc8>)
 8001fb6:	2113      	movs	r1, #19
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f7ff fb7b 	bl	80016b4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Set priority and enable NVIC node for transmit interrupt*/
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001fbe:	f7ff feff 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	213f      	movs	r1, #63	; 0x3f
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f7ff ff4d 	bl	8001e68 <NVIC_EncodePriority>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	205b      	movs	r0, #91	; 0x5b
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7ff ff1e 	bl	8001e14 <__NVIC_SetPriority>
                        63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)91);
 8001fd8:	205b      	movs	r0, #91	; 0x5b
 8001fda:	f7ff feff 	bl	8001ddc <__NVIC_EnableIRQ>
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8001fde:	f7ff feef 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	213f      	movs	r1, #63	; 0x3f
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f7ff ff3d 	bl	8001e68 <NVIC_EncodePriority>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	205a      	movs	r0, #90	; 0x5a
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7ff ff0e 	bl	8001e14 <__NVIC_SetPriority>
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)90);
 8001ff8:	205a      	movs	r0, #90	; 0x5a
 8001ffa:	f7ff feef 	bl	8001ddc <__NVIC_EnableIRQ>
  return status;
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	48028200 	.word	0x48028200
 800200c:	08002a20 	.word	0x08002a20
 8002010:	48020000 	.word	0x48020000
 8002014:	080029cc 	.word	0x080029cc
 8002018:	080029d8 	.word	0x080029d8

0800201c <USIC1_1_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void UART_0_TX_HANDLER()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  UART_lTransmitHandler(&UART_0);
 8002020:	4801      	ldr	r0, [pc, #4]	; (8002028 <USIC1_1_IRQHandler+0xc>)
 8002022:	f7ff fd8f 	bl	8001b44 <UART_lTransmitHandler>
}
 8002026:	bd80      	pop	{r7, pc}
 8002028:	1fffc800 	.word	0x1fffc800

0800202c <USIC1_0_IRQHandler>:

/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8002030:	4801      	ldr	r0, [pc, #4]	; (8002038 <USIC1_0_IRQHandler+0xc>)
 8002032:	f7ff fe0d 	bl	8001c50 <UART_lReceiveHandler>
}
 8002036:	bd80      	pop	{r7, pc}
 8002038:	1fffc800 	.word	0x1fffc800

0800203c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60da      	str	r2, [r3, #12]
}
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	60da      	str	r2, [r3, #12]
}
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	611a      	str	r2, [r3, #16]
}
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8002098:	887a      	ldrh	r2, [r7, #2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	611a      	str	r2, [r3, #16]
}
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop

080020e0 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f808 	bl	8002148 <TIMER_CCU4_lInit>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop

08002148 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fa1d 	bl	8002594 <GLOBAL_CCU4_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7e1b      	ldrb	r3, [r3, #24]
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f7ff ff66 	bl	800203c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f7fe ff02 	bl	8000f84 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f82d 	bl	80021e0 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00f      	beq.n	80021b0 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800219a:	4610      	mov	r0, r2
 800219c:	2100      	movs	r1, #0
 800219e:	461a      	mov	r2, r3
 80021a0:	f7fe ff26 	bl	8000ff0 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	4618      	mov	r0, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	f7ff ff98 	bl	80020e0 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff43 	bl	800205c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7ff ff4a 	bl	800208c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	4618      	mov	r0, r3
 80021fe:	2100      	movs	r1, #0
 8002200:	f7ff ff52 	bl	80020a8 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7ff ff57 	bl	80020c4 <XMC_CCU4_EnableShadowTransfer>
}
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002228:	0a1b      	lsrs	r3, r3, #8
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <__NVIC_EnableIRQ+0x34>)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	79fa      	ldrb	r2, [r7, #7]
 8002254:	f002 021f 	and.w	r2, r2, #31
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0c      	blt.n	800229c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	4909      	ldr	r1, [pc, #36]	; (80022a8 <__NVIC_ClearPendingIRQ+0x38>)
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	f002 021f 	and.w	r2, r2, #31
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	490d      	ldr	r1, [pc, #52]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	4909      	ldr	r1, [pc, #36]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	0092      	lsls	r2, r2, #2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
  }
}
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b06      	cmp	r3, #6
 800231c:	bf28      	it	cs
 800231e:	2306      	movcs	r3, #6
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3306      	adds	r3, #6
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b01      	subs	r3, #1
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2201      	movs	r2, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	401a      	ands	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	1e59      	subs	r1, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002354:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3308      	adds	r3, #8
 800237a:	4608      	mov	r0, r1
 800237c:	4611      	mov	r1, r2
 800237e:	461a      	mov	r2, r3
 8002380:	f7fe f822 	bl	80003c8 <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7fda      	ldrb	r2, [r3, #31]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3314      	adds	r3, #20
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	f7fe fe8f 	bl	80010b8 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	2201      	movs	r2, #1
 80023aa:	f7fe feab 	bl	8001104 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7f1c      	ldrb	r4, [r3, #28]
 80023b2:	f7ff ff33 	bl	800221c <__NVIC_GetPriorityGrouping>
 80023b6:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80023bc:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80023c2:	4608      	mov	r0, r1
 80023c4:	4611      	mov	r1, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	f7ff ff9a 	bl	8002300 <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	b263      	sxtb	r3, r4
 80023d0:	4618      	mov	r0, r3
 80023d2:	4611      	mov	r1, r2
 80023d4:	f7ff ff6a 	bl	80022ac <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7f1b      	ldrb	r3, [r3, #28]
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff41 	bl	8002270 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7f1b      	ldrb	r3, [r3, #28]
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff1f 	bl	8002238 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_GetPriorityGrouping+0x18>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002410:	0a1b      	lsrs	r3, r3, #8
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	2b00      	cmp	r3, #0
 8002430:	db0b      	blt.n	800244a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_EnableIRQ+0x34>)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	f002 021f 	and.w	r2, r2, #31
 8002440:	2001      	movs	r0, #1
 8002442:	fa00 f202 	lsl.w	r2, r0, r2
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	490d      	ldr	r1, [pc, #52]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	4909      	ldr	r1, [pc, #36]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	0092      	lsls	r2, r2, #2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
  }
}
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	bf28      	it	cs
 80024ca:	2306      	movcs	r3, #6
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3306      	adds	r3, #6
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b01      	subs	r3, #1
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2201      	movs	r2, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	401a      	ands	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	1e59      	subs	r1, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002500:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b25b      	sxtb	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff7e 	bl	8002420 <__NVIC_EnableIRQ>
}
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop

0800252c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	781c      	ldrb	r4, [r3, #0]
 8002538:	f7ff ff64 	bl	8002404 <__NVIC_GetPriorityGrouping>
 800253c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002542:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	f7ff ffad 	bl	80024ac <NVIC_EncodePriority>
 8002552:	4602      	mov	r2, r0
 8002554:	b263      	sxtb	r3, r4
 8002556:	4618      	mov	r0, r3
 8002558:	4611      	mov	r1, r2
 800255a:	f7ff ff7d 	bl	8002458 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffd2 	bl	8002510 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop

08002578 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002586:	60da      	str	r2, [r3, #12]
}
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop

08002594 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7b5b      	ldrb	r3, [r3, #13]
 80025a0:	f083 0301 	eor.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00f      	beq.n	80025ca <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7fe fcc7 	bl	8000f48 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ffda 	bl	8002578 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7c1a      	ldrb	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	f7fd feeb 	bl	80003c8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7c1a      	ldrb	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7c5b      	ldrb	r3, [r3, #17]
 80025fe:	4608      	mov	r0, r1
 8002600:	4611      	mov	r1, r2
 8002602:	461a      	mov	r2, r3
 8002604:	f7fe fd9c 	bl	8001140 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff ffd6 	bl	8002614 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800266a:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <SystemCoreSetup+0x94>)
 800266c:	4a21      	ldr	r2, [pc, #132]	; (80026f4 <SystemCoreSetup+0x98>)
 800266e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002670:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002674:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002676:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <SystemCoreSetup+0x94>)
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <SystemCoreSetup+0x94>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002682:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <SystemCoreSetup+0x9c>)
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	3314      	adds	r3, #20
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f023 030f 	bic.w	r3, r3, #15
 8002698:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <SystemCoreSetup+0x9c>)
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	3314      	adds	r3, #20
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <SystemCoreSetup+0x94>)
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <SystemCoreSetup+0x94>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f023 0310 	bic.w	r3, r3, #16
 80026b8:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <SystemCoreSetup+0x94>)
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <SystemCoreSetup+0x94>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f023 0308 	bic.w	r3, r3, #8
 80026c4:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SystemCoreSetup+0x94>)
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <SystemCoreSetup+0x94>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80026d2:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <SystemCoreSetup+0x94>)
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <SystemCoreSetup+0x94>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80026dc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <SystemCoreSetup+0x94>)
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <SystemCoreSetup+0x94>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	08000000 	.word	0x08000000
 80026f8:	58001000 	.word	0x58001000

080026fc <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]

  return (status);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002720:	4b02      	ldr	r3, [pc, #8]	; (800272c <OSCHP_GetFrequency+0x10>)
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	00b71b00 	.word	0x00b71b00

08002730 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <SystemCoreClockSetup+0x4c>)
 8002738:	1d3c      	adds	r4, r7, #4
 800273a:	461d      	mov	r5, r3
 800273c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002740:	682b      	ldr	r3, [r5, #0]
 8002742:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd ff32 	bl	80005b0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe f857 	bl	8000800 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe f80c 	bl	8000770 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002758:	2004      	movs	r0, #4
 800275a:	f7fe f8dd 	bl	8000918 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 800275e:	f7fe f953 	bl	8000a08 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002762:	2001      	movs	r0, #1
 8002764:	2120      	movs	r1, #32
 8002766:	f7fe f95f 	bl	8000a28 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe f814 	bl	8000798 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002770:	2001      	movs	r0, #1
 8002772:	f7fe f8e5 	bl	8000940 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bdb0      	pop	{r4, r5, r7, pc}
 800277c:	08002a7c 	.word	0x08002a7c

08002780 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002786:	2300      	movs	r3, #0
 8002788:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800278a:	481d      	ldr	r0, [pc, #116]	; (8002800 <DAVE_Init+0x80>)
 800278c:	f7ff ffb6 	bl	80026fc <CLOCK_XMC4_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 800279a:	481a      	ldr	r0, [pc, #104]	; (8002804 <DAVE_Init+0x84>)
 800279c:	f7ff f8d6 	bl	800194c <UART_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d104      	bne.n	80027b4 <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 80027aa:	4817      	ldr	r0, [pc, #92]	; (8002808 <DAVE_Init+0x88>)
 80027ac:	f7ff fcae 	bl	800210c <TIMER_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d104      	bne.n	80027c4 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance TIMER_INT */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIMER_INT); 
 80027ba:	4814      	ldr	r0, [pc, #80]	; (800280c <DAVE_Init+0x8c>)
 80027bc:	f7ff feb6 	bl	800252c <INTERRUPT_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance RTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RTS); 
 80027ca:	4811      	ldr	r0, [pc, #68]	; (8002810 <DAVE_Init+0x90>)
 80027cc:	f7ff ff02 	bl	80025d4 <DIGITAL_IO_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d104      	bne.n	80027e4 <DAVE_Init+0x64>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_0); 
 80027da:	480e      	ldr	r0, [pc, #56]	; (8002814 <DAVE_Init+0x94>)
 80027dc:	f7ff fdc2 	bl	8002364 <PIN_INTERRUPT_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance CTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CTS); 
 80027ea:	480b      	ldr	r0, [pc, #44]	; (8002818 <DAVE_Init+0x98>)
 80027ec:	f7ff fef2 	bl	80025d4 <DIGITAL_IO_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	1fffc868 	.word	0x1fffc868
 8002804:	1fffc800 	.word	0x1fffc800
 8002808:	1fffc814 	.word	0x1fffc814
 800280c:	08002a50 	.word	0x08002a50
 8002810:	08002a54 	.word	0x08002a54
 8002814:	08002a2c 	.word	0x08002a2c
 8002818:	08002a68 	.word	0x08002a68

0800281c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	2201      	movs	r2, #1
 800282c:	409a      	lsls	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	605a      	str	r2, [r3, #4]
}
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7c1b      	ldrb	r3, [r3, #16]
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f7ff ffe4 	bl	800281c <XMC_GPIO_SetOutputHigh>
}
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop

0800285c <CCU41_1_IRQHandler>:
uint8_t receive_buffer[100] = {0};
uint8_t rx_count = 0;
uint8_t seconds_flag = 0;
uint16_t milisseconds = 0;

void periodic_messages(){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	milisseconds++;
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <CCU41_1_IRQHandler+0x18>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <CCU41_1_IRQHandler+0x18>)
 800286a:	801a      	strh	r2, [r3, #0]
	UART_Rx();
 800286c:	f000 f81c 	bl	80028a8 <UART_Rx>
}
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	1fffc870 	.word	0x1fffc870

08002878 <main>:

int main(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800287e:	f7ff ff7f 	bl	8002780 <DAVE_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d000      	beq.n	800288e <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 800288c:	e7fe      	b.n	800288c <main+0x14>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  if(milisseconds > 1000){
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <main+0x2c>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002896:	d904      	bls.n	80028a2 <main+0x2a>
		  UART_TX();
 8002898:	f000 f852 	bl	8002940 <UART_TX>
		  milisseconds = 0;
 800289c:	4b01      	ldr	r3, [pc, #4]	; (80028a4 <main+0x2c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	801a      	strh	r2, [r3, #0]
	  }

  }
 80028a2:	e7f4      	b.n	800288e <main+0x16>
 80028a4:	1fffc870 	.word	0x1fffc870

080028a8 <UART_Rx>:
}

void UART_Rx(){
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
	static uint8_t receive_buffer[100] = {0};
	static uint8_t rx_count = 0;

	// Check Transmit/receive buffer status register
	while (((UART_0.channel->TRBSR) & 0x08) == 0) {
 80028ac:	e017      	b.n	80028de <UART_Rx+0x36>
		// Receive FIFO output register
		receive_buffer[rx_count] = (uint8_t) (UART_0.channel->OUTR);
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <UART_Rx+0x50>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <UART_Rx+0x54>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80028bc:	b2d9      	uxtb	r1, r3
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <UART_Rx+0x58>)
 80028c0:	5499      	strb	r1, [r3, r2]

		if(rx_count == 99){
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <UART_Rx+0x50>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b63      	cmp	r3, #99	; 0x63
 80028c8:	d103      	bne.n	80028d2 <UART_Rx+0x2a>
			rx_count = 0;
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <UART_Rx+0x50>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e005      	b.n	80028de <UART_Rx+0x36>
		}else{
			rx_count++;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <UART_Rx+0x50>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <UART_Rx+0x50>)
 80028dc:	701a      	strb	r2, [r3, #0]
void UART_Rx(){
	static uint8_t receive_buffer[100] = {0};
	static uint8_t rx_count = 0;

	// Check Transmit/receive buffer status register
	while (((UART_0.channel->TRBSR) & 0x08) == 0) {
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <UART_Rx+0x54>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0df      	beq.n	80028ae <UART_Rx+0x6>
			rx_count = 0;
		}else{
			rx_count++;
		}
	}
}
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	1fffc872 	.word	0x1fffc872
 80028fc:	1fffc800 	.word	0x1fffc800
 8002900:	1fffc874 	.word	0x1fffc874

08002904 <UART_Rx_>:

void UART_Rx_(){
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	static uint8_t receive_buffer_[100] = {0};
	static uint8_t rx_count_ = 0;

	if(UART_Receive(&UART_0, receive_buffer_, 1) == UART_STATUS_SUCCESS)
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <UART_Rx_+0x2c>)
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <UART_Rx_+0x30>)
 800290c:	2201      	movs	r2, #1
 800290e:	f7ff f84b 	bl	80019a8 <UART_Receive>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <UART_Rx_+0x2a>
   {
	 //Retransmit the received 10 bytes
		DIGITAL_IO_SetOutputHigh(&RTS);
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <UART_Rx_+0x34>)
 800291a:	f7ff ff8f 	bl	800283c <DIGITAL_IO_SetOutputHigh>
		DIGITAL_IO_SetOutputHigh(&CTS);
 800291e:	4807      	ldr	r0, [pc, #28]	; (800293c <UART_Rx_+0x38>)
 8002920:	f7ff ff8c 	bl	800283c <DIGITAL_IO_SetOutputHigh>
	 UART_Transmit(&UART_0, receive_buffer_, 1);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <UART_Rx_+0x2c>)
 8002926:	4903      	ldr	r1, [pc, #12]	; (8002934 <UART_Rx_+0x30>)
 8002928:	2201      	movs	r2, #1
 800292a:	f7ff f821 	bl	8001970 <UART_Transmit>
   }

}
 800292e:	bd80      	pop	{r7, pc}
 8002930:	1fffc800 	.word	0x1fffc800
 8002934:	1fffc8d8 	.word	0x1fffc8d8
 8002938:	08002a54 	.word	0x08002a54
 800293c:	08002a68 	.word	0x08002a68

08002940 <UART_TX>:

void UART_TX(){
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	if(transmit_byte[0] > 250){
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <UART_TX+0x2c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2bfa      	cmp	r3, #250	; 0xfa
 800294a:	d906      	bls.n	800295a <UART_TX+0x1a>
		transmit_byte[0]++;
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <UART_TX+0x2c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	b2da      	uxtb	r2, r3
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <UART_TX+0x2c>)
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e002      	b.n	8002960 <UART_TX+0x20>
	}
	else{
		transmit_byte[0] = 'a';
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <UART_TX+0x2c>)
 800295c:	2261      	movs	r2, #97	; 0x61
 800295e:	701a      	strb	r2, [r3, #0]
	}
	//DIGITAL_IO_SetOutputHigh(&RTS);
	//DIGITAL_IO_SetOutputHigh(&CTS);
	UART_Transmit(&UART_0, transmit_byte, 1);
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <UART_TX+0x30>)
 8002962:	4902      	ldr	r1, [pc, #8]	; (800296c <UART_TX+0x2c>)
 8002964:	2201      	movs	r2, #1
 8002966:	f7ff f803 	bl	8001970 <UART_Transmit>

}
 800296a:	bd80      	pop	{r7, pc}
 800296c:	1fffc86c 	.word	0x1fffc86c
 8002970:	1fffc800 	.word	0x1fffc800

08002974 <Clear_lines>:

void Clear_lines(){
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	//DIGITAL_IO_SetOutputLow(&RTS);
	//DIGITAL_IO_SetOutputLow(&CTS);
}
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <__libc_init_array>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <__libc_init_array+0x3c>)
 8002984:	4c0e      	ldr	r4, [pc, #56]	; (80029c0 <__libc_init_array+0x40>)
 8002986:	1ae4      	subs	r4, r4, r3
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	2500      	movs	r5, #0
 800298c:	461e      	mov	r6, r3
 800298e:	42a5      	cmp	r5, r4
 8002990:	d004      	beq.n	800299c <__libc_init_array+0x1c>
 8002992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002996:	4798      	blx	r3
 8002998:	3501      	adds	r5, #1
 800299a:	e7f8      	b.n	800298e <__libc_init_array+0xe>
 800299c:	f7fe feea 	bl	8001774 <_init>
 80029a0:	4c08      	ldr	r4, [pc, #32]	; (80029c4 <__libc_init_array+0x44>)
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <__libc_init_array+0x48>)
 80029a4:	1ae4      	subs	r4, r4, r3
 80029a6:	10a4      	asrs	r4, r4, #2
 80029a8:	2500      	movs	r5, #0
 80029aa:	461e      	mov	r6, r3
 80029ac:	42a5      	cmp	r5, r4
 80029ae:	d004      	beq.n	80029ba <__libc_init_array+0x3a>
 80029b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029b4:	4798      	blx	r3
 80029b6:	3501      	adds	r5, #1
 80029b8:	e7f8      	b.n	80029ac <__libc_init_array+0x2c>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	1fffc84c 	.word	0x1fffc84c
 80029c0:	1fffc84c 	.word	0x1fffc84c
 80029c4:	1fffc84c 	.word	0x1fffc84c
 80029c8:	1fffc84c 	.word	0x1fffc84c

080029cc <UART_0_channel_config>:
 80029cc:	00002580 01080800 00000010              .%..........

080029d8 <UART_0_tx_pin_config>:
 80029d8:	00000090 00000001 00000002              ............

080029e4 <UART_0_tx_pin>:
 80029e4:	48028200 0000000e 080029d8              ...H.....)..

080029f0 <UART_0_config>:
 80029f0:	080029cc 08001f49 08002975 08002905     .)..I...u)...)..
	...
 8002a14:	080029e4 04000000 00000104              .)..........

08002a20 <UART_0_rx_pin_config>:
 8002a20:	00000000 00000001 00000002              ............

08002a2c <PIN_INTERRUPT_0>:
 8002a2c:	40044000 48028200 00000000 00000000     .@.@...H........
	...
 8002a44:	00000105 01003f05 00010700              .....?......

08002a50 <TIMER_INT>:
 8002a50:	01003f31                                1?..

08002a54 <RTS>:
 8002a54:	48028000 00000000 00000000 00000000     ...H............
 8002a64:	00000007                                ....

08002a68 <CTS>:
 8002a68:	48028000 00000080 00010000 00000000     ...H............
 8002a78:	0000000a 01040350 00010000 00000000     ....P...........
 8002a88:	00010000 01010101                       ........
