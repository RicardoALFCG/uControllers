package Model.APPS.UART_CONFIG.v4_0_12;

// Import statements
import ifx.davex.app.manifest.*

abstract class UART_CONFIG_GUI extends AppManifest {
	/* Begin : UI variable section */
	 public GTab tab_general;
	 public GTab gtab_events;
	 public GTab gtab_fifo;
	 public GImage gimage_baud_rate;
	 public GInteger ginteger_desired_baud_rate;
	 public GInteger ginteger_step_value;
	 public GInteger ginteger_divider_factor_internal_clk;
	 public GInteger ginteger_oversampling;
	 public GInteger ginteger_predivider;
	 public GInteger ginteger_divider_factor_external_clk;
	 public GInteger ginteger_sample_point;
	 public GInteger ginteger_pulse_length;
	 public GInteger ginteger_word_length;
	 public GInteger ginteger_frame_length;
	 public GInteger ginteger_tx_fifo_data_pointer;
	 public GInteger ginteger_rx_fifo_data_pointer;
	 public GInteger ginteger_limit_for_transmit_events;
	 public GInteger ginteger_limit_for_receive_events;
	 public GCombo gcombo_operation_mode;
	 public GCombo gcombo_dx1_input_stage;
	 public GCombo gcombo_type_transmit_data_validation;
	 public GCombo gcombo_transmit_data_validation_trigger_edge;
	 public GCombo gcombo_clock_selection;
	 public GCombo gcombo_external_clock_edge;
	 public GCombo gcombo_parity;
	 public GCombo gcombo_stop_bits;
	 public GCombo gcombo_number_tx_fifo_entries;
	 public GCombo gcombo_number_rx_fifo_entries;
	 public GFloat gfloat_real_baud_rate;
	 public GCheck gcheck_enable_transmit_enable;
	 public GCheck gcheck_enable_capture_mode_timer;
	 public GCheck gcheck_collision_detection_event;
	 public GCheck gcheck_receiver_noise_detection_event;
	 public GCheck gcheck_frame_finished_event;
	 public GCheck gcheck_format_error_event;
	 public GCheck gcheck_synchronization_break_detection_event;
	 public GCheck gcheck_baud_rate_event;
	 public GCheck gcheck_datalost;
	 public GLabel glabel_dx1_input_stage;
	 public GLabel glabel_type_transmit_data_validation;
	 public GLabel glabel_operation_mode;
	 public GLabel glabel_transmit_data_validation_trigger_edge;
	 public GLabel glabel_desired_baud_rate;
	 public GLabel glabel_step_value;
	 public GLabel glabel_divider_factor_internal_clk;
	 public GLabel glabel_divider_factor_external_clk;
	 public GLabel glabel_predivider;
	 public GLabel glabel_oversampling;
	 public GLabel glabel_clock_selection;
	 public GLabel glabel_external_clock_edge;
	 public GLabel glabel_real_baud_rate;
	 public GLabel glabel_pulse_length;
	 public GLabel glabel_sample_point;
	 public GLabel glabel_parity;
	 public GLabel glabel_stop_bits;
	 public GLabel glabel_word_length;
	 public GLabel glabel_frame_length;
	 public GLabel glabel_tx_fifo_data_pointer;
	 public GLabel glabel_number_tx_fifo_entries;
	 public GLabel glabel_rx_fifo_data_pointer;
	 public GLabel glabel_number_rx_fifo_entries;
	 public GLabel glabel_limit_for_transmit_events;
	 public GLabel glabel_transmit_limit_for_event;
	 public GLabel glabel_limit_for_receive_events;
	 public GLabel glabel_receive_limit_for_event;
	 public GGroup ggroup_operation_mode;
	 public GGroup ggroup_baud_rate;
	 public GGroup ggroup_pcr_settings;
	 public GGroup ggroup_frame_format;
	 public GGroup ggroup_protocol_events;
	 public GGroup ggroup_tx_fifo_buffer_conf;
	 public GGroup ggroup_rx_fifo_buffer_conf;
	 public GGroup ggroup_tx_fifo_interrupts_conf;
	 public GGroup ggroup_rx_fifo_events_conf;
	 public GMessage gmessage_clock_selection;

	 public UART_CONFIG_GUI(DaveEnv daveEnv){

	 tab_general = GTab(widgetName:"tab_general", text:"General", enabled:true, visible:true)
	 gtab_events = GTab(widgetName:"gtab_events", text:"Events", enabled:true, visible:true)
	 gtab_fifo = GTab(widgetName:"gtab_fifo", text:"FIFO", enabled:true, visible:true)
	 gimage_baud_rate = GImage(widgetName:"gimage_baud_rate", path: "doc/USIC_CONFIG_UART_BRG_internal_clk.jpg", enabled:true, visible:true)
	 ginteger_desired_baud_rate = GInteger(widgetName:"ginteger_desired_baud_rate", value:19200, minValue:1, maxValue:7500000, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_step_value = GInteger(widgetName:"ginteger_step_value", value:0, minValue:0, maxValue:1023, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_divider_factor_internal_clk = GInteger(widgetName:"ginteger_divider_factor_internal_clk", value:0, minValue:1, maxValue:1024, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_oversampling = GInteger(widgetName:"ginteger_oversampling", value:16, minValue:4, maxValue:32, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_predivider = GInteger(widgetName:"ginteger_predivider", value:0, minValue:0, maxValue:3, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_divider_factor_external_clk = GInteger(widgetName:"ginteger_divider_factor_external_clk", value:1, minValue:1, maxValue:1024, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_sample_point = GInteger(widgetName:"ginteger_sample_point", value:8, minValue:0, maxValue:15, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_pulse_length = GInteger(widgetName:"ginteger_pulse_length", value:0, minValue:0, maxValue:7, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_word_length = GInteger(widgetName:"ginteger_word_length", value:8, minValue:1, maxValue:16, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_frame_length = GInteger(widgetName:"ginteger_frame_length", value:8, minValue:1, maxValue:63, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_tx_fifo_data_pointer = GInteger(widgetName:"ginteger_tx_fifo_data_pointer", value:0, minValue:0, maxValue:64, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_rx_fifo_data_pointer = GInteger(widgetName:"ginteger_rx_fifo_data_pointer", value:0, minValue:0, maxValue:64, enabled:false, visible:true, isMandatoryValue:false)
	 ginteger_limit_for_transmit_events = GInteger(widgetName:"ginteger_limit_for_transmit_events", value:0, minValue:0, maxValue:63, enabled:true, visible:true, isMandatoryValue:false)
	 ginteger_limit_for_receive_events = GInteger(widgetName:"ginteger_limit_for_receive_events", value:0, minValue:0, maxValue:63, enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_operation_mode = GCombo(widgetName:"gcombo_operation_mode", options:["Full Duplex","Half Duplex","Loop Back","IrDA"], value:"Full Duplex", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_dx1_input_stage = GCombo(widgetName:"gcombo_dx1_input_stage", options:["None","External Frequency Input","Collision Detection"], value:"None", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_type_transmit_data_validation = GCombo(widgetName:"gcombo_type_transmit_data_validation", options:["Transfer on low (DX2S = 0)","Transfer on high (DX2S = 1)","Transfer on event (DX2T)"], value:"Transfer on low (DX2S = 0)", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_transmit_data_validation_trigger_edge = GCombo(widgetName:"gcombo_transmit_data_validation_trigger_edge", options:["Rising Edge","Falling Edge","Both Edges"], value:"Rising Edge", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_clock_selection = GCombo(widgetName:"gcombo_clock_selection", options:["Internal Source (FD)","External Source (DX1T)"], value:"Internal Source (FD)", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_external_clock_edge = GCombo(widgetName:"gcombo_external_clock_edge", options:["Rising Edge","Falling Edge","Both Edges"], value:"Falling Edge", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_parity = GCombo(widgetName:"gcombo_parity", options:["No parity","Even parity","Odd parity"], value:"No parity", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_stop_bits = GCombo(widgetName:"gcombo_stop_bits", options:["1 stop bit","2 stop bits"], value:"1 stop bit", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_number_tx_fifo_entries = GCombo(widgetName:"gcombo_number_tx_fifo_entries", options:["0","2","4","8","16","32","64"], value:"0", enabled:true, visible:true, isMandatoryValue:false)
	 gcombo_number_rx_fifo_entries = GCombo(widgetName:"gcombo_number_rx_fifo_entries", options:["0","2","4","8","16","32","64"], value:"0", enabled:true, visible:true, isMandatoryValue:false)
	 gfloat_real_baud_rate = GFloat(widgetName:"gfloat_real_baud_rate", value:19200, minValue:Double.NEGATIVE_INFINITY, maxValue:Double.POSITIVE_INFINITY, enabled:false, visible:true, isMandatoryValue:false)
	 gcheck_enable_transmit_enable = GCheck(widgetName:"gcheck_enable_transmit_enable", value:false, enabled:true, visible:true)
	 gcheck_enable_capture_mode_timer = GCheck(widgetName:"gcheck_enable_capture_mode_timer", value:false, enabled:true, visible:true)
	 gcheck_collision_detection_event = GCheck(widgetName:"gcheck_collision_detection_event", value:false, enabled:true, visible:true)
	 gcheck_receiver_noise_detection_event = GCheck(widgetName:"gcheck_receiver_noise_detection_event", value:false, enabled:true, visible:true)
	 gcheck_frame_finished_event = GCheck(widgetName:"gcheck_frame_finished_event", value:false, enabled:true, visible:true)
	 gcheck_format_error_event = GCheck(widgetName:"gcheck_format_error_event", value:false, enabled:true, visible:true)
	 gcheck_synchronization_break_detection_event = GCheck(widgetName:"gcheck_synchronization_break_detection_event", value:false, enabled:true, visible:true)
	 gcheck_baud_rate_event = GCheck(widgetName:"gcheck_baud_rate_event", value:false, enabled:true, visible:true)
	 gcheck_datalost = GCheck(widgetName:"gcheck_datalost", value:false, enabled:true, visible:true)
	 glabel_dx1_input_stage = GLabel(widgetName:"glabel_dx1_input_stage", text:"DX1 input stage:", enabled:true, visible:true)
	 glabel_type_transmit_data_validation = GLabel(widgetName:"glabel_type_transmit_data_validation", text:"Type of data validation:", enabled:true, visible:true)
	 glabel_operation_mode = GLabel(widgetName:"glabel_operation_mode", text:"Communication type:", enabled:true, visible:true)
	 glabel_transmit_data_validation_trigger_edge = GLabel(widgetName:"glabel_transmit_data_validation_trigger_edge", text:"Triggering edge for data validation on event:", enabled:true, visible:true)
	 glabel_desired_baud_rate = GLabel(widgetName:"glabel_desired_baud_rate", text:"Desired speed [baud]:", enabled:true, visible:true)
	 glabel_step_value = GLabel(widgetName:"glabel_step_value", text:"Step value:", enabled:true, visible:true)
	 glabel_divider_factor_internal_clk = GLabel(widgetName:"glabel_divider_factor_internal_clk", text:"Divider factor:", enabled:true, visible:true)
	 glabel_divider_factor_external_clk = GLabel(widgetName:"glabel_divider_factor_external_clk", text:"Divider factor:", enabled:true, visible:true)
	 glabel_predivider = GLabel(widgetName:"glabel_predivider", text:"Pre-divider:", enabled:true, visible:true)
	 glabel_oversampling = GLabel(widgetName:"glabel_oversampling", text:"Oversampling:", enabled:true, visible:true)
	 glabel_clock_selection = GLabel(widgetName:"glabel_clock_selection", text:"Clock:", enabled:true, visible:true)
	 glabel_external_clock_edge = GLabel(widgetName:"glabel_external_clock_edge", text:"Edge selection:", enabled:true, visible:true)
	 glabel_real_baud_rate = GLabel(widgetName:"glabel_real_baud_rate", text:"Real baud rate [Hz]:", enabled:true, visible:true)
	 glabel_pulse_length = GLabel(widgetName:"glabel_pulse_length", text:"Pulse length:", enabled:true, visible:true)
	 glabel_sample_point = GLabel(widgetName:"glabel_sample_point", text:"Sample point:", enabled:true, visible:true)
	 glabel_parity = GLabel(widgetName:"glabel_parity", text:"Type of parity:", enabled:true, visible:true)
	 glabel_stop_bits = GLabel(widgetName:"glabel_stop_bits", text:"Stop bit(s):", enabled:true, visible:true)
	 glabel_word_length = GLabel(widgetName:"glabel_word_length", text:"Word length:", enabled:true, visible:true)
	 glabel_frame_length = GLabel(widgetName:"glabel_frame_length", text:"Frame length:", enabled:true, visible:true)
	 glabel_tx_fifo_data_pointer = GLabel(widgetName:"glabel_tx_fifo_data_pointer", text:"Tx FIFO data pointer:", enabled:true, visible:true)
	 glabel_number_tx_fifo_entries = GLabel(widgetName:"glabel_number_tx_fifo_entries", text:"No. of FIFO buffer entries:", enabled:true, visible:true)
	 glabel_rx_fifo_data_pointer = GLabel(widgetName:"glabel_rx_fifo_data_pointer", text:"Rx FIFO data pointer:", enabled:true, visible:true)
	 glabel_number_rx_fifo_entries = GLabel(widgetName:"glabel_number_rx_fifo_entries", text:"No. of FIFO buffer entries:", enabled:true, visible:true)
	 glabel_limit_for_transmit_events = GLabel(widgetName:"glabel_limit_for_transmit_events", text:"Limit for the transmit buffer event generation:", enabled:true, visible:true)
	 glabel_transmit_limit_for_event = GLabel(widgetName:"glabel_transmit_limit_for_event", text:"Note: the transmit buffer event is triggered when the filling level is falling\r\nbelow the limit (TBCTR.LOF = 0).", enabled:true, visible:true)
	 glabel_limit_for_receive_events = GLabel(widgetName:"glabel_limit_for_receive_events", text:"Filling level for the receive buffer event detection:", enabled:true, visible:true)
	 glabel_receive_limit_for_event = GLabel(widgetName:"glabel_receive_limit_for_event", text:"Note: the receive buffer event triggered when the filling level exceeds the \r\nlimit (RBCTR.LOF = 1).", enabled:true, visible:true)
	 ggroup_operation_mode = GGroup(widgetName:"ggroup_operation_mode", text:"Operation Mode", enabled:true, visible:true)
	 ggroup_baud_rate = GGroup(widgetName:"ggroup_baud_rate", text:"Baud Rate Generator", enabled:true, visible:true)
	 ggroup_pcr_settings = GGroup(widgetName:"ggroup_pcr_settings", text:"Protocol Control Settings", enabled:true, visible:true)
	 ggroup_frame_format = GGroup(widgetName:"ggroup_frame_format", text:"Frame Format", enabled:true, visible:true)
	 ggroup_protocol_events = GGroup(widgetName:"ggroup_protocol_events", text:"Protocol-Specific Events", enabled:true, visible:true)
	 ggroup_tx_fifo_buffer_conf = GGroup(widgetName:"ggroup_tx_fifo_buffer_conf", text:"Transmit FIFO Buffer Configuration", enabled:true, visible:true)
	 ggroup_rx_fifo_buffer_conf = GGroup(widgetName:"ggroup_rx_fifo_buffer_conf", text:"Receive FIFO Buffer Configuration", enabled:true, visible:true)
	 ggroup_tx_fifo_interrupts_conf = GGroup(widgetName:"ggroup_tx_fifo_interrupts_conf", text:"Transmit FIFO Events Configuration", enabled:true, visible:true)
	 ggroup_rx_fifo_events_conf = GGroup(widgetName:"ggroup_rx_fifo_events_conf", text:"Receive FIFO Events Configuration", enabled:true, visible:true)
	 gmessage_clock_selection = GMessage(widgetName:"gmessage_clock_selection", text:"Using an external source for baud rate generation, the \"External Frequency Input\" signal must be selected for the DX1 input stage.", isError:false, visible:true)


	 }
	/* End : UI variable section */
}
