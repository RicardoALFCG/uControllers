
/**
 * @file multican_config.c
 * @date 2021-01-08
 *
 * NOTE:
 * This file is generated by DAVE-4. Any manual modification done to this file will be lost when the code is regenerated.
 *
 *
 ***********************************************************************************************************************
 * MULTICAN_CONFIG v4.0.14 - Configures MultiCAN peripheral
 *
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-10-26:
 *     - Initial version<br>
 * 2016-03-31:
 *     - Updated comments
 *
 * 2021-01-08:
 *     - Modified check for minimum XMCLib version
 *
 */

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

#ifndef MULTICAN_CONFIG_H
#define MULTICAN_CONFIG_H

#include "xmc_can.h"

#include "GLOBAL_CAN/global_can.h"
#include "multican_config_conf.h"
#include "DAVE_Common.h"

 /**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
#define MULTICAN_CONFIG_XMC_LIB_MAJOR_VERSION 2
#define MULTICAN_CONFIG_XMC_LIB_MINOR_VERSION 0
#define MULTICAN_CONFIG_XMC_LIB_PATCH_VERSION 0

#if !((XMC_LIB_MAJOR_VERSION > MULTICAN_CONFIG_XMC_LIB_MAJOR_VERSION) ||\
      ((XMC_LIB_MAJOR_VERSION == MULTICAN_CONFIG_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > MULTICAN_CONFIG_XMC_LIB_MINOR_VERSION)) ||\
      ((XMC_LIB_MAJOR_VERSION == MULTICAN_CONFIG_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == MULTICAN_CONFIG_XMC_LIB_MINOR_VERSION) && (XMC_LIB_PATCH_VERSION >= MULTICAN_CONFIG_XMC_LIB_PATCH_VERSION)))
#error "MULTICAN_CONFIG requires XMC Peripheral Library v2.0.0 or higher"
#endif

 /**********************************************************************************************************************
 * ENUMS
 **********************************************************************************************************************/
/**
 * @ingroup MULTICAN_CONFIG_enumerations
 * @{
 */
/**
 *  @brief Enum to describe the possible status values, returned
 *         by MULTICAN_CONFIG APIs.
 */
typedef enum MULTICAN_CONFIG_STATUS
{
  MULTICAN_CONFIG_STATUS_SUCCESS = 0,       /*!< APP success state */
  MULTICAN_CONFIG_STATUS_FAILURE,  	        /*!< Returned when unknown error occurred */
  MULTICAN_CONFIG_STATUS_BUSY,   		    /*!< NODE is busy and cannot handle request*/
  MULTICAN_CONFIG_STATUS_MO_NOT_ACCEPTABLE, /*!< Message object type not allowed*/
  MULTICAN_CONFIG_STATUS_MO_DISABLED        /*!< Returned if Message object is disabled */
} MULTICAN_CONFIG_STATUS_t;

/**
 *  @brief Enum for multimode control
 *
 */
typedef enum MULTICAN_CONFIG_MMC
{
  MULTICAN_CONFIG_MMC_STDMSG = 0,           /*!< Standard message */
  MULTICAN_CONFIG_MMC_RXFIFO_BASE,          /*!< Configures RXFIFO as base object */
  MULTICAN_CONFIG_MMC_RXFIFO_SLAVE,         /*!< Configures RXFIFO as slave object */
  MULTICAN_CONFIG_MMC_TXFIFO_BASE,          /*!< Configures TXFIFO as base object */
  MULTICAN_CONFIG_MMC_TXFIFO_SLAVE,         /*!< Configures TXFIFO as slave object */
  MULTICAN_CONFIG_MMC_GATEWAYSRC            /*!< Configures gateway as source object */
} MULTICAN_CONFIG_MMC_t;
/**
 * @}
 */

/**********************************************************************************************************************
* DATA STRUCTURES
**********************************************************************************************************************/
/**
 * @ingroup MULTICAN_CONFIG_datastructures
 * @{
 */
/**
 *   Message object structure for MULTICAN_CONFIG APP
 */
typedef struct MULTICAN_CONFIG_NODE_LMO
{
  XMC_CAN_MO_t *const mo_ptr;                   /*!< CAN message object pointer */
  XMC_CAN_FIFO_CONFIG_t *const fifo;            /*!< Pointer to fifo configuration*/
  XMC_CAN_GATEWAY_CONFIG_t *const gateway;      /*!< Pointer to gateway configuration*/
  const MULTICAN_CONFIG_MMC_t message_mode_control; /*!< CAN message mode control combo box */
  const uint8_t list;					        /*!< message list*/
  const uint8_t number;                         /*!< Consumed CAN message object number */
  const uint8_t tx_sr;                          /*!< CAN message object transmit service request */
  const uint8_t rx_sr;                          /*!< CAN message object receive service request */
  const bool single_data_transfer;              /*!< CAN message object single data transfer check box*/
  const bool single_transmit_trial;             /*!< CAN message object single transmit trial check box*/
  const bool tx_event_enable;                   /*!< CAN message object transmit event check box  */
  const bool rx_event_enable;                   /*!< CAN message object receive event check box  */
  const bool ov_event_enable;                   /*!< CAN message object overflow event check box */
  const bool foreign_remote;	                /*!< CAN message object foreign remote check box */
  const bool init_as_gateway_destination;       /*!< CAN message object Gateway destination */
} MULTICAN_CONFIG_NODE_LMO_t;

/**
 *  Initialization data structure for can nodes
 */
typedef struct MULTICAN_CONFIG_NODE
{
  GLOBAL_CAN_t *const global_ptr;              /*!< Global CAN pointer */
  XMC_CAN_NODE_t *const node_ptr;              /*!< Consumed CAN node pointer */
  const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const baudrate_config; /*!< bit time config structure */
  const XMC_CAN_NODE_FRAME_COUNTER_t *const node_fc_ptr;         /*!< frame counter */
  const XMC_CAN_NODE_RECEIVE_INPUT_t rx_signal;                  /*!< Possible input type for CAN receive pin */
  const uint8_t node_num;                                        /*!< Consumed CAN node number */
  const uint8_t alert_event_sr;                                  /*!< Alert event service request  */
  const uint8_t lec_event_sr;                                    /*!< LEC event service request  */
  const uint8_t txok_event_sr;                                   /*!< Transmit OK event service request  */
  const uint8_t framecount_event_sr;                             /*!< Frame count event service request  */
  const bool lec_event_enable;                       	         /*!< LEC event check box  */
  const bool txok_event_enable;                      	         /*!< transmit OK event check box */
  const bool alert_event_enable;                     	         /*!< alert event check box  */
  const bool framecount_event_enable;                	         /*!< frame count event check box  */
  const bool loopback_enable;                        	         /*!< loop back enable check box  */
  const bool analyzer_mode;                        	             /*!< analyzer mode enable check box  */
} MULTICAN_CONFIG_NODE_t;

/**
 *  Initialization data structure for MULTICAN_CONFIG APP
 */
typedef struct MULTICAN_CONFIG
{
  GLOBAL_CAN_t *const global_ptr;                          /*!< Global CAN pointer */
  MULTICAN_CONFIG_NODE_LMO_t *lmobj_ptr[NUM_MSGOBJECTS];   /*!< Array of pointer to lmo structure*/
  MULTICAN_CONFIG_STATUS_t (*multican_config_init_func)(void); /**< Defines the local initialization function for the instance.*/
#if defined(NODE_0_ENABLED)
  const MULTICAN_CONFIG_NODE_t *const node0;			   /*!< Maximum of 1 Nodes */
#endif
#if defined(NODE_1_ENABLED)
  const MULTICAN_CONFIG_NODE_t *const node1;			   /*!< Maximum of 2 Nodes */
#endif
#if defined(NODE_2_ENABLED)
  const MULTICAN_CONFIG_NODE_t *const node2;			   /*!< Maximum of 3 Nodes */
#endif
#if defined(NODE_3_ENABLED)
  const MULTICAN_CONFIG_NODE_t *const node3;			   /*!< Maximum of 4 Nodes */
#endif
#if defined(NODE_4_ENABLED)
  const MULTICAN_CONFIG_NODE_t *const node4;			   /*!< Maximum of 5 Nodes */
#endif
#if defined(NODE_5_ENABLED)
  const MULTICAN_CONFIG_NODE_t *const node5;			   /*!< Maximum of 6 Nodes */
#endif
} MULTICAN_CONFIG_t;

/**
 * @}
 */
/***********************************************************************************************************************
* API Prototypes
**********************************************************************************************************************/
/* Support for C++ codebase */
#ifdef __cplusplus
extern "C" {
#endif

/**
 * @ingroup MULTICAN_CONFIG_apidoc
 * @{
 */

/**
 * @brief Function to read the MULTICAN_CONFIG APP version.
 *
 * @return DAVE_APP_VERSION_t Structure that contains the members
 *         major, minor and patch values.
 *
 * <b>Description:</b><br>
 * The function can be used to check application software compatibility with a
 * specific version of the APP.
 *
 *
 * Example Usage:
 * @code
 *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     DAVE_STATUS_t init_status;
 *     DAVE_APP_VERSION_t can_version;
 *     init_status = DAVE_Init();
 *     if (init_status == DAVE_STATUS_SUCCESS)
 *     {
 *       multican_config_version = MULTICAN_CONFIG_GetAppVersion();
 *       if ((multican_config_version.major == 4U) &&
 *          (multican_config_version.minor == 1U))
 *       {
 *         // Application code
 *       }
 *       else
 *       {
 *         // Probably, not the right version.
 *       }
 *     }
 *     // More code here
 *     while(1)
 *     {
 *
 *     }
 *
 *     return (1);
 *  }
 *  @endcode
 */
DAVE_APP_VERSION_t MULTICAN_CONFIG_GetAppVersion(void);

/**
 * @brief Function to initialize the MULTICAN peripheral by configuring nodes, the baud rate,
 *        can bus type(External or internal) and message objects.
 *
 * @param handle  is a pointer pointing to APP data structure.@ref MULTICAN_CONFIG_t
 * @return MULTICAN_CONFIG_STATUS_t MULTICAN_CONFIG_STATUS_SUCCESS: if the initialization succeeds.<BR>
 *                           MULTICAN_CONFIG_STATUS_FAILURE  : for failure case.<BR>
 *
 * <b>Description:</b><br>
 * This function internally calls GLOBAL_CAN_Init() API to configure peripheral frequency
 * to enable CAN communication. API configures loop back mode or external CAN bus, message objects
 *  based on the settings and enables configured event flags and service request values.
 *
 * <BR>
 *
 * Example Usage:
 * @code
 *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     MULTICAN_CONFIG_STATUS_t init_status;
 *      // DAVE_Init() internally calls MULTICAN_CONFIG_Init()
 *     init_status = MULTICAN_CONFIG_Init(&MULTICAN_CONFIG_0);
 *     if (init_status == MULTICAN_CONFIG_STATUS_SUCCESS)
 *     {
 *
 *       // Application code
 *
 *     }
 *     else
 *     {
 *
 *      // Failed to initialize the MULTICAN peripheral
 *     }
 *     // More code here
 *     while(1)
 *     {
 *
 *     }
 *
 *     return (1);
 *  }
 *  @endcode
 */
MULTICAN_CONFIG_STATUS_t MULTICAN_CONFIG_Init(MULTICAN_CONFIG_t *handle);

/**
 * @}
 */

#include"multican_config_extern.h"
/* Support for C++ codebase */
#ifdef __cplusplus
}
#endif

#endif /* End of _MULTICAN_CONFIG_H */
