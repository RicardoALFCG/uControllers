package Model.APPS.MULTICAN_CONFIG.v4_0_14;

import ifx.davex.app.manifest.*;

class Gindexgroup_nodesettings{
	 public GCheck gcheck_enablenode;
	 public GLabel glabel_baudrate;
	 public GInteger ginteger_baudrate;
	 public GCheck gcheck_enable_analyzer_mode;
	 public GCheck gcheck_loopback_mode;
	 public GGroup ggroup_bit_timing;
	 public GInteger ginteger_sync_jump_width;
	 public GInteger ginteger_next_bit_time_percent;
	 public GGroup ggroup_frame_counter;
	 public GCombo gcombo_frame_counter_mode;
	 public GInteger ginteger_frame_count_selection;
	 public GGroup ggroup_events;
	 public GCheck gcheck_node_alert_event;
	 public GCheck gcheck_last_err_code_event;
	 public GCheck gcheck_transfer_ok_event;
	 public GCheck gcheck_frame_counter_event;

	public Gindexgroup_nodesettings (DaveEnv daveEnv, String widgetName,int index){
	 gcheck_enablenode = new GCheck(widgetName:"gcheck_enablenode", value:false, enabled:true, visible:true, parentWidgetName:widgetName)
	 glabel_baudrate = new GLabel(widgetName:"glabel_baudrate", text:"Baud rate [Kbps]:", enabled:false, visible:true, parentWidgetName:widgetName)
	 ginteger_baudrate = new GInteger(widgetName:"ginteger_baudrate", value:500, minValue:100, maxValue:1000, enabled:false, visible:true, isMandatoryValue:false , parentWidgetName:widgetName)
	 gcheck_enable_analyzer_mode = new GCheck(widgetName:"gcheck_enable_analyzer_mode", value:false, enabled:false, visible:true, parentWidgetName:widgetName)
	 gcheck_loopback_mode = new GCheck(widgetName:"gcheck_loopback_mode", value:false, enabled:false, visible:true, parentWidgetName:widgetName)
	 ggroup_bit_timing = new GGroup(widgetName:"ggroup_bit_timing", text:"Bit Timing", enabled:false, visible:true , parentWidgetName:widgetName)
	 ginteger_sync_jump_width = new GInteger(widgetName:"ginteger_sync_jump_width", value:1, minValue:0, maxValue:3, enabled:true, visible:true, isMandatoryValue:false , parentWidgetName:widgetName)
	 ginteger_next_bit_time_percent = new GInteger(widgetName:"ginteger_next_bit_time_percent", value:80, minValue:0, maxValue:100, enabled:true, visible:true, isMandatoryValue:false , parentWidgetName:widgetName)
	 ggroup_frame_counter = new GGroup(widgetName:"ggroup_frame_counter", text:"Frame Counter", enabled:false, visible:true , parentWidgetName:widgetName)
	 gcombo_frame_counter_mode = new GCombo(widgetName:"gcombo_frame_counter_mode", options:["Frame Count Mode","Time Stamp Mode","Bit Timing Mode"], value:"Frame Count Mode", enabled:true, visible:true, isMandatoryValue:false , parentWidgetName:widgetName)
	 ginteger_frame_count_selection = new GInteger(widgetName:"ginteger_frame_count_selection", value:0, minValue:0, maxValue:7, enabled:true, visible:true, isMandatoryValue:false , parentWidgetName:widgetName)
	 ggroup_events = new GGroup(widgetName:"ggroup_events", text:"Events", enabled:false, visible:true , parentWidgetName:widgetName)
	 gcheck_node_alert_event = new GCheck(widgetName:"gcheck_node_alert_event", value:false, enabled:true, visible:true, parentWidgetName:widgetName)
	 gcheck_last_err_code_event = new GCheck(widgetName:"gcheck_last_err_code_event", value:false, enabled:true, visible:true, parentWidgetName:widgetName)
	 gcheck_transfer_ok_event = new GCheck(widgetName:"gcheck_transfer_ok_event", value:false, enabled:true, visible:true, parentWidgetName:widgetName)
	 gcheck_frame_counter_event = new GCheck(widgetName:"gcheck_frame_counter_event", value:false, enabled:true, visible:true, parentWidgetName:widgetName)
	}
}
