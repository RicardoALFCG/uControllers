package Model.APPS.MULTICAN_CONFIG.v4_0_14.Templates;

import Model.APPS.MULTICAN_CONFIG.v4_0_14.MULTICAN_CONFIG

out.print("""
/**
 * @file multican_config_conf.c
 * @date 2016-09-14
 *
 * NOTE:
 * This file is generated by DAVE-4. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 *
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-10-26:
 *     - Initial version<br>
 * 2016-07-22:
 *     - Defect fix:Transmit request is set only for message object which is not gateway destination<br>
 * 2016-08-10:
 *     - Code for mapping events is always generated for the visible signals.<br>
 * 2016-09-14:
 *     - Fixed code generation issue for XMC_CAN_MO_Config() API.<br>
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#include "multican_config.h"

""");

/* Variable declaration */

String appInst = null
List NodeUri0 = null   /* CAN Node 0 */
List NodeUri1 = null   /* CAN Node 1 */
List NodeUri2 = null   /* CAN Node 2 */
List NodeUri3 = null   /* CAN Node 3 */
List NodeUri4 = null   /* CAN Node 4 */
List NodeUri5 = null   /* CAN Node 5 */

Integer count_mode0=null
Integer count_mode1=null
Integer count_mode2=null
Integer count_mode3=null
Integer count_mode4=null
Integer count_mode5=null

Integer message_mode_control = 0
Integer data0=0
Integer data1=0
Integer data2=0
Integer data3=0
Integer data4=0
Integer data5=0
Integer data6=0
Integer data7=0
Integer data=0

Integer mo_count = 0

Integer list = 0
Integer bottom = 0
Integer top = 0

Integer num_elements_fifo = 0
Integer num_fifo = 0

Integer mobjects = 0
/* For MO */
List Consumed_can_mo_num = null

List map_arr = new Object [256]

out.print("""
 
/**********************************************************************************************************************
* DATA STRUCTURES
**********************************************************************************************************************/
/**
  * @ingroup can_node_datastructures
  * @{
  */
""");

/* To identify the number of instances created in the project */
for (MULTICAN_CONFIG CanInstance : appInstancesList)
{
	appInst= CanInstance.getInstanceLabel()
	
	NodeUri0 = CanInstance.hwres_can_node0.getSolverUri()
	NodeUri1 = CanInstance.hwres_can_node1.getSolverUri()
	NodeUri2 = CanInstance.hwres_can_node2.getSolverUri()
	NodeUri3 = CanInstance.hwres_can_node3.getSolverUri()
	NodeUri4 = CanInstance.hwres_can_node4.getSolverUri()
	NodeUri5 = CanInstance.hwres_can_node5.getSolverUri()
	
	Map msg_objarr = [
		0:  CanInstance.hwres_can_mobj0,
		1:  CanInstance.hwres_can_mobj1,
		2:  CanInstance.hwres_can_mobj2,
		3:  CanInstance.hwres_can_mobj3,
		4:  CanInstance.hwres_can_mobj4,
		5:  CanInstance.hwres_can_mobj5,
		6:  CanInstance.hwres_can_mobj6,
		7:  CanInstance.hwres_can_mobj7,
		8:  CanInstance.hwres_can_mobj8,
		9:  CanInstance.hwres_can_mobj9,
		10: CanInstance.hwres_can_mobj10,
		11: CanInstance.hwres_can_mobj11,
		12: CanInstance.hwres_can_mobj12,
		13: CanInstance.hwres_can_mobj13,
		14: CanInstance.hwres_can_mobj14,
		15: CanInstance.hwres_can_mobj15,
		16: CanInstance.hwres_can_mobj16,
		17: CanInstance.hwres_can_mobj17,
		18: CanInstance.hwres_can_mobj18,
		19: CanInstance.hwres_can_mobj19,
		20: CanInstance.hwres_can_mobj20,
		21: CanInstance.hwres_can_mobj21,
		22: CanInstance.hwres_can_mobj22,
		23: CanInstance.hwres_can_mobj23,
		24: CanInstance.hwres_can_mobj24,
		25: CanInstance.hwres_can_mobj25,
		26: CanInstance.hwres_can_mobj26,
		27: CanInstance.hwres_can_mobj27,
		28: CanInstance.hwres_can_mobj28,
		29: CanInstance.hwres_can_mobj29,
		30: CanInstance.hwres_can_mobj30,
		31: CanInstance.hwres_can_mobj31,
		32: CanInstance.hwres_can_mobj32,
		33: CanInstance.hwres_can_mobj33,
		34: CanInstance.hwres_can_mobj34,
		35: CanInstance.hwres_can_mobj35,
		36: CanInstance.hwres_can_mobj36,
		37: CanInstance.hwres_can_mobj37,
		38: CanInstance.hwres_can_mobj38,
		39: CanInstance.hwres_can_mobj39,
		40: CanInstance.hwres_can_mobj40,
		41: CanInstance.hwres_can_mobj41,
		42: CanInstance.hwres_can_mobj42,
		43: CanInstance.hwres_can_mobj43,
		44: CanInstance.hwres_can_mobj44,
		45: CanInstance.hwres_can_mobj45,
		46: CanInstance.hwres_can_mobj46,
		47: CanInstance.hwres_can_mobj47,
		48: CanInstance.hwres_can_mobj48,
		49: CanInstance.hwres_can_mobj49,
		50: CanInstance.hwres_can_mobj50,
		51: CanInstance.hwres_can_mobj51,
		52: CanInstance.hwres_can_mobj52,
		53: CanInstance.hwres_can_mobj53,
		54: CanInstance.hwres_can_mobj54,
		55: CanInstance.hwres_can_mobj55,
		56: CanInstance.hwres_can_mobj56,
		57: CanInstance.hwres_can_mobj57,
		58: CanInstance.hwres_can_mobj58,
		59: CanInstance.hwres_can_mobj59,
		60: CanInstance.hwres_can_mobj60,
		61: CanInstance.hwres_can_mobj61,
		62: CanInstance.hwres_can_mobj62,
		63: CanInstance.hwres_can_mobj63,
		
		64: CanInstance.hwres_can_mobj64,
		65: CanInstance.hwres_can_mobj65,
		66: CanInstance.hwres_can_mobj66,
		67: CanInstance.hwres_can_mobj67,
		68: CanInstance.hwres_can_mobj68,
		69: CanInstance.hwres_can_mobj69,
		70: CanInstance.hwres_can_mobj70,
		71: CanInstance.hwres_can_mobj71,
		72: CanInstance.hwres_can_mobj72,
		73: CanInstance.hwres_can_mobj73,
		74: CanInstance.hwres_can_mobj74,
		75: CanInstance.hwres_can_mobj75,
		76: CanInstance.hwres_can_mobj76,
		77: CanInstance.hwres_can_mobj77,
		78: CanInstance.hwres_can_mobj78,
		79: CanInstance.hwres_can_mobj79,
		80: CanInstance.hwres_can_mobj80,
		81: CanInstance.hwres_can_mobj81,
		82: CanInstance.hwres_can_mobj82,
		83: CanInstance.hwres_can_mobj83,
		84: CanInstance.hwres_can_mobj84,
		85: CanInstance.hwres_can_mobj85,
		86: CanInstance.hwres_can_mobj86,
		87: CanInstance.hwres_can_mobj87,
		88: CanInstance.hwres_can_mobj88,
		89: CanInstance.hwres_can_mobj89,
		90: CanInstance.hwres_can_mobj90,
		91: CanInstance.hwres_can_mobj91,
		92: CanInstance.hwres_can_mobj92,
		93: CanInstance.hwres_can_mobj93,
		94: CanInstance.hwres_can_mobj94,
		95: CanInstance.hwres_can_mobj95,
		96: CanInstance.hwres_can_mobj96,
		97: CanInstance.hwres_can_mobj97,
		98: CanInstance.hwres_can_mobj98,
		99: CanInstance.hwres_can_mobj99,
		100: CanInstance.hwres_can_mobj100,
		101: CanInstance.hwres_can_mobj101,
		102: CanInstance.hwres_can_mobj102,
		103: CanInstance.hwres_can_mobj103,
		104: CanInstance.hwres_can_mobj104,
		105: CanInstance.hwres_can_mobj105,
		106: CanInstance.hwres_can_mobj106,
		107: CanInstance.hwres_can_mobj107,
		108: CanInstance.hwres_can_mobj108,
		109: CanInstance.hwres_can_mobj109,
		110: CanInstance.hwres_can_mobj110,
		111: CanInstance.hwres_can_mobj111,
		112: CanInstance.hwres_can_mobj112,
		113: CanInstance.hwres_can_mobj113,
		114: CanInstance.hwres_can_mobj114,
		115: CanInstance.hwres_can_mobj115,
		116: CanInstance.hwres_can_mobj116,
		117: CanInstance.hwres_can_mobj117,
		118: CanInstance.hwres_can_mobj118,
		119: CanInstance.hwres_can_mobj119,
		120: CanInstance.hwres_can_mobj120,
		121: CanInstance.hwres_can_mobj121,
		122: CanInstance.hwres_can_mobj122,
		123: CanInstance.hwres_can_mobj123,
		124: CanInstance.hwres_can_mobj124,
		125: CanInstance.hwres_can_mobj125,
		126: CanInstance.hwres_can_mobj126,
		127: CanInstance.hwres_can_mobj127,
		
		128: CanInstance.hwres_can_mobj128,
		129: CanInstance.hwres_can_mobj129,
		130: CanInstance.hwres_can_mobj130,
		131: CanInstance.hwres_can_mobj131,
		132: CanInstance.hwres_can_mobj132,
		133: CanInstance.hwres_can_mobj133,
		134: CanInstance.hwres_can_mobj134,
		135: CanInstance.hwres_can_mobj135,
		136: CanInstance.hwres_can_mobj136,
		137: CanInstance.hwres_can_mobj137,
		138: CanInstance.hwres_can_mobj138,
		139: CanInstance.hwres_can_mobj139,
		140: CanInstance.hwres_can_mobj140,
		141: CanInstance.hwres_can_mobj141,
		142: CanInstance.hwres_can_mobj142,
		143: CanInstance.hwres_can_mobj143,
		144: CanInstance.hwres_can_mobj144,
		145: CanInstance.hwres_can_mobj145,
		146: CanInstance.hwres_can_mobj146,
		147: CanInstance.hwres_can_mobj147,
		148: CanInstance.hwres_can_mobj148,
		149: CanInstance.hwres_can_mobj149,
		150: CanInstance.hwres_can_mobj150,
		151: CanInstance.hwres_can_mobj151,
		152: CanInstance.hwres_can_mobj152,
		153: CanInstance.hwres_can_mobj153,
		154: CanInstance.hwres_can_mobj154,
		155: CanInstance.hwres_can_mobj155,
		156: CanInstance.hwres_can_mobj156,
		157: CanInstance.hwres_can_mobj157,
		158: CanInstance.hwres_can_mobj158,
		159: CanInstance.hwres_can_mobj159,
		160: CanInstance.hwres_can_mobj160,
		161: CanInstance.hwres_can_mobj161,
		162: CanInstance.hwres_can_mobj162,
		163: CanInstance.hwres_can_mobj163,
		164: CanInstance.hwres_can_mobj164,
		165: CanInstance.hwres_can_mobj165,
		166: CanInstance.hwres_can_mobj166,
		167: CanInstance.hwres_can_mobj167,
		168: CanInstance.hwres_can_mobj168,
		169: CanInstance.hwres_can_mobj169,
		170: CanInstance.hwres_can_mobj170,
		171: CanInstance.hwres_can_mobj171,
		172: CanInstance.hwres_can_mobj172,
		173: CanInstance.hwres_can_mobj173,
		174: CanInstance.hwres_can_mobj174,
		175: CanInstance.hwres_can_mobj175,
		176: CanInstance.hwres_can_mobj176,
		177: CanInstance.hwres_can_mobj177,
		178: CanInstance.hwres_can_mobj178,
		179: CanInstance.hwres_can_mobj179,
		180: CanInstance.hwres_can_mobj180,
		181: CanInstance.hwres_can_mobj181,
		182: CanInstance.hwres_can_mobj182,
		183: CanInstance.hwres_can_mobj183,
		184: CanInstance.hwres_can_mobj184,
		185: CanInstance.hwres_can_mobj185,
		186: CanInstance.hwres_can_mobj186,
		187: CanInstance.hwres_can_mobj187,
		188: CanInstance.hwres_can_mobj188,
		189: CanInstance.hwres_can_mobj189,
		190: CanInstance.hwres_can_mobj190,
		191: CanInstance.hwres_can_mobj191,
		192: CanInstance.hwres_can_mobj192,
		193: CanInstance.hwres_can_mobj193,
		194: CanInstance.hwres_can_mobj194,
		195: CanInstance.hwres_can_mobj195,
		196: CanInstance.hwres_can_mobj196,
		197: CanInstance.hwres_can_mobj197,
		198: CanInstance.hwres_can_mobj198,
		199: CanInstance.hwres_can_mobj199,
		200: CanInstance.hwres_can_mobj200,
		201: CanInstance.hwres_can_mobj201,
		202: CanInstance.hwres_can_mobj202,
		203: CanInstance.hwres_can_mobj203,
		204: CanInstance.hwres_can_mobj204,
		205: CanInstance.hwres_can_mobj205,
		206: CanInstance.hwres_can_mobj206,
		207: CanInstance.hwres_can_mobj207,
		208: CanInstance.hwres_can_mobj208,
		209: CanInstance.hwres_can_mobj209,
		210: CanInstance.hwres_can_mobj210,
		211: CanInstance.hwres_can_mobj211,
		212: CanInstance.hwres_can_mobj212,
		213: CanInstance.hwres_can_mobj213,
		214: CanInstance.hwres_can_mobj214,
		215: CanInstance.hwres_can_mobj215,
		216: CanInstance.hwres_can_mobj216,
		217: CanInstance.hwres_can_mobj217,
		218: CanInstance.hwres_can_mobj218,
		219: CanInstance.hwres_can_mobj219,
		220: CanInstance.hwres_can_mobj220,
		221: CanInstance.hwres_can_mobj221,
		222: CanInstance.hwres_can_mobj222,
		223: CanInstance.hwres_can_mobj223,
		224: CanInstance.hwres_can_mobj224,
		225: CanInstance.hwres_can_mobj225,
		226: CanInstance.hwres_can_mobj226,
		227: CanInstance.hwres_can_mobj227,
		228: CanInstance.hwres_can_mobj228,
		229: CanInstance.hwres_can_mobj229,
		230: CanInstance.hwres_can_mobj230,
		231: CanInstance.hwres_can_mobj231,
		232: CanInstance.hwres_can_mobj232,
		233: CanInstance.hwres_can_mobj233,
		234: CanInstance.hwres_can_mobj234,
		235: CanInstance.hwres_can_mobj235,
		236: CanInstance.hwres_can_mobj236,
		237: CanInstance.hwres_can_mobj237,
		238: CanInstance.hwres_can_mobj238,
		239: CanInstance.hwres_can_mobj239,
		240: CanInstance.hwres_can_mobj240,
		241: CanInstance.hwres_can_mobj241,
		242: CanInstance.hwres_can_mobj242,
		243: CanInstance.hwres_can_mobj243,
		244: CanInstance.hwres_can_mobj244,
		245: CanInstance.hwres_can_mobj245,
		246: CanInstance.hwres_can_mobj246,
		247: CanInstance.hwres_can_mobj247,
		248: CanInstance.hwres_can_mobj248,
		249: CanInstance.hwres_can_mobj249,
		250: CanInstance.hwres_can_mobj250,
		251: CanInstance.hwres_can_mobj251,
		252: CanInstance.hwres_can_mobj252,
		253: CanInstance.hwres_can_mobj253,
		254: CanInstance.hwres_can_mobj254,
		255: CanInstance.hwres_can_mobj255
	]
	String family = daveEnv.project.selectedDevice.deviceId.family
	String series = daveEnv.project.selectedDevice.deviceId.series
	
	if(family+series == "XMC14")
	{
	  mobjects = 32
	  total_nodes = 2
	}
	else if((family+series == "XMC45") || (family+series == "XMC44") || (family+series == "XMC43") || (family+series == "XMC42"))
	{
	  mobjects = 64
	  if(family+series == "XMC45")
	  {
		  total_nodes = 3
	  }
	  else
	  {
		  total_nodes = 2
	  }
	}
	else
	{
	  mobjects = 256
	  total_nodes = 6
	}
	
	for(int loop_index_mo = 0; loop_index_mo < mobjects; loop_index_mo++)
	{
		int mo_obj_instance_num  = loop_index_mo;
		Consumed_can_mo_num = msg_objarr[mo_obj_instance_num].getSolverUri()
		if (Consumed_can_mo_num != null)
		{
			map_arr[loop_index_mo] = Consumed_can_mo_num[6];
		}
	}
	
	float Calculate_freq = (CanInstance.gactualclock.value * 1000000)
	
if(CanInstance.rArraygindexgroup_nodesettings[0].gcheck_enablenode.value == true)
{
if(CanInstance.rArraygindexgroup_nodesettings[0].gcombo_frame_counter_mode.value=="Frame Count Mode")
{
count_mode0 = 0
}
else if(CanInstance.rArraygindexgroup_nodesettings[0].gcombo_frame_counter_mode.value=="Time Stamp Mode")
{
count_mode0 = 1
}
else
{
count_mode0 = 2
}
}

if(CanInstance.rArraygindexgroup_nodesettings[1].gcheck_enablenode.value == true)
{
if(CanInstance.rArraygindexgroup_nodesettings[1].gcombo_frame_counter_mode.value=="Frame Count Mode")
{
count_mode1 = 0
}
else if(CanInstance.rArraygindexgroup_nodesettings[1].gcombo_frame_counter_mode.value=="Time Stamp Mode")
{
count_mode1 = 1
}
else
{
count_mode1 = 2
}
}

if((family+series == "XMC48") || (family+series == "XMC47") || (family+series == "XMC45"))
{
if(CanInstance.rArraygindexgroup_nodesettings[2].gcheck_enablenode.value == true)
{
if(CanInstance.rArraygindexgroup_nodesettings[2].gcombo_frame_counter_mode.value=="Frame Count Mode")
{
count_mode2 = 0
}
else if(CanInstance.rArraygindexgroup_nodesettings[2].gcombo_frame_counter_mode.value=="Time Stamp Mode")
{
count_mode2 = 1
}
else
{
count_mode2 = 2
}
}
}

if((family+series == "XMC48") || (family+series == "XMC47"))
{
if(CanInstance.rArraygindexgroup_nodesettings[3].gcheck_enablenode.value == true)
{
if(CanInstance.rArraygindexgroup_nodesettings[3].gcombo_frame_counter_mode.value=="Frame Count Mode")
{
count_mode3 = 0
}
else if(CanInstance.rArraygindexgroup_nodesettings[3].gcombo_frame_counter_mode.value=="Time Stamp Mode")
{
count_mode3 = 1
}
else
{
count_mode3 = 2
}
}

if(CanInstance.rArraygindexgroup_nodesettings[4].gcheck_enablenode.value == true)
{
if(CanInstance.rArraygindexgroup_nodesettings[4].gcombo_frame_counter_mode.value=="Frame Count Mode")
{
count_mode4 = 0
}
else if(CanInstance.rArraygindexgroup_nodesettings[4].gcombo_frame_counter_mode.value=="Time Stamp Mode")
{
count_mode4 = 1
}
else
{
count_mode4 = 2
}
}

if(CanInstance.rArraygindexgroup_nodesettings[5].gcheck_enablenode.value == true)
{
if(CanInstance.rArraygindexgroup_nodesettings[5].gcombo_frame_counter_mode.value=="Frame Count Mode")
{
count_mode5 = 0
}
else if(CanInstance.rArraygindexgroup_nodesettings[5].gcombo_frame_counter_mode.value=="Time Stamp Mode")
{
count_mode5 = 1
}
else
{
count_mode5 = 2
}
}
}

out.print("""MULTICAN_CONFIG_STATUS_t ${appInst}_lInit();""");

if(CanInstance.rArraygindexgroup_nodesettings[0].gcheck_enablenode.value == true)
{
out.print("""
/* NODE 0  Bit Time Configuration */
const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t  ${appInst}_BitTimeConfig_node0 =
{
  .can_frequency = (uint32_t)${Calculate_freq},
  .baudrate      = (uint32_t)(${CanInstance.rArraygindexgroup_nodesettings[0].ginteger_baudrate.value} * 1000),
  .sample_point  = (uint16_t)(${CanInstance.rArraygindexgroup_nodesettings[0].ginteger_next_bit_time_percent.value} * 100),
  .sjw           = (uint16_t)${CanInstance.rArraygindexgroup_nodesettings[0].ginteger_sync_jump_width.value}U
};

/* Node0 Frame counter */
const XMC_CAN_NODE_FRAME_COUNTER_t ${appInst}_fc_node0 =
{
  {
	{
	  .can_frame_count_selection = ${CanInstance.rArraygindexgroup_nodesettings[0].ginteger_frame_count_selection.value}U,
	  .can_frame_count_mode 	 = ${count_mode0}U,
	}
  }
};

/* CAN_NODE init Structure configuration */
const MULTICAN_CONFIG_NODE_t  ${appInst}_Node0 =
{
  .global_ptr        		= (GLOBAL_CAN_t *)&${CanInstance.app_global_can.getInstanceLabel()},""");
   if(NodeUri0 != null)
   {
  out.print("""
  .node_ptr          		= (CAN_NODE_TypeDef*)CAN_NODE${NodeUri0[6]},""");
   }
   out.print("""
  .baudrate_config   		= (XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t*)&${appInst}_BitTimeConfig_node0,
  .node_fc_ptr		 		= (XMC_CAN_NODE_FRAME_COUNTER_t*)&${appInst}_fc_node0,
  .rx_signal                = ${[
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCA",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCB",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCC",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCD",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCE",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCF",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCG",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCH"
								][CanInstance.hwres_can_node0.getRegValue("npcr","npcr_rxsel").toInteger()]},
  .node_num          		= 0U,
  .alert_event_sr           = ${(CanInstance.hwres_can_node0.getRegValue("nipr${NodeUri0[6].value}","nipr_alinp").value)}U,
  .lec_event_sr             = ${(CanInstance.hwres_can_node0.getRegValue("nipr${NodeUri0[6].value}","nipr_lecinp").value)}U,
  .txok_event_sr            = ${(CanInstance.hwres_can_node0.getRegValue("nipr${NodeUri0[6].value}","nipr_trinp").value)}U,
  .framecount_event_sr      = ${(CanInstance.hwres_can_node0.getRegValue("nipr${NodeUri0[6].value}","nipr_cfcinp").value)}U,				   
  .analyzer_mode 		   	= ${CanInstance.rArraygindexgroup_nodesettings[0].gcheck_enable_analyzer_mode.value},
  .loopback_enable         	= ${CanInstance.rArraygindexgroup_nodesettings[0].gcheck_loopback_mode.value},
  .alert_event_enable      	= ${CanInstance.rArraygindexgroup_nodesettings[0].gcheck_node_alert_event.value},
  .lec_event_enable        	= ${CanInstance.rArraygindexgroup_nodesettings[0].gcheck_last_err_code_event.value},
  .txok_event_enable       	= ${CanInstance.rArraygindexgroup_nodesettings[0].gcheck_transfer_ok_event.value},
  .framecount_event_enable 	= ${CanInstance.rArraygindexgroup_nodesettings[0].gcheck_frame_counter_event.value}
};
""");
}

if(CanInstance.rArraygindexgroup_nodesettings[1].gcheck_enablenode.value == true)
{
out.print("""
/* NODE 1  Bit Time Configuration */
const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t  ${appInst}_BitTimeConfig_node1 =
{
  .can_frequency = (uint32_t)${Calculate_freq},
  .baudrate      = (uint32_t)(${CanInstance.rArraygindexgroup_nodesettings[1].ginteger_baudrate.value} * 1000),
  .sample_point  = (uint16_t)(${CanInstance.rArraygindexgroup_nodesettings[1].ginteger_next_bit_time_percent.value} * 100),
  .sjw           = (uint16_t)${CanInstance.rArraygindexgroup_nodesettings[1].ginteger_sync_jump_width.value}U
};

/* Node1 Frame counter */
const XMC_CAN_NODE_FRAME_COUNTER_t ${appInst}_fc_node1 =
{
  {
	{
	  .can_frame_count_selection = ${CanInstance.rArraygindexgroup_nodesettings[1].ginteger_frame_count_selection.value}U,
	  .can_frame_count_mode 	 = ${count_mode1}U,
	}
  }
};

/* CAN_NODE init Structure configuration */
const MULTICAN_CONFIG_NODE_t  ${appInst}_Node1 =
{
  .global_ptr        		= (GLOBAL_CAN_t *)&${CanInstance.app_global_can.getInstanceLabel()},""");
   if(NodeUri1 != null)
   {
  out.print("""
  .node_ptr          		= (CAN_NODE_TypeDef*)CAN_NODE${NodeUri1[6]},""");
   }
   out.print("""
  .baudrate_config   		= (XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t*)&${appInst}_BitTimeConfig_node1,
  .node_fc_ptr		 		= (XMC_CAN_NODE_FRAME_COUNTER_t*)&${appInst}_fc_node1,
  .rx_signal                = ${[
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCA",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCB",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCC",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCD",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCE",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCF",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCG",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCH"
								][CanInstance.hwres_can_node1.getRegValue("npcr","npcr_rxsel").toInteger()]},
  .node_num          		= 1U,
  .alert_event_sr           = ${(CanInstance.hwres_can_node1.getRegValue("nipr${NodeUri1[6].value}","nipr_alinp").value)}U,
  .lec_event_sr             = ${(CanInstance.hwres_can_node1.getRegValue("nipr${NodeUri1[6].value}","nipr_lecinp").value)}U,
  .txok_event_sr            = ${(CanInstance.hwres_can_node1.getRegValue("nipr${NodeUri1[6].value}","nipr_trinp").value)}U,
  .framecount_event_sr      = ${(CanInstance.hwres_can_node1.getRegValue("nipr${NodeUri1[6].value}","nipr_cfcinp").value)}U,					   
  .analyzer_mode 		   	= ${CanInstance.rArraygindexgroup_nodesettings[1].gcheck_enable_analyzer_mode.value},
  .loopback_enable         	= ${CanInstance.rArraygindexgroup_nodesettings[1].gcheck_loopback_mode.value},
  .alert_event_enable      	= ${CanInstance.rArraygindexgroup_nodesettings[1].gcheck_node_alert_event.value},
  .lec_event_enable        	= ${CanInstance.rArraygindexgroup_nodesettings[1].gcheck_last_err_code_event.value},
  .txok_event_enable       	= ${CanInstance.rArraygindexgroup_nodesettings[1].gcheck_transfer_ok_event.value},
  .framecount_event_enable 	= ${CanInstance.rArraygindexgroup_nodesettings[1].gcheck_frame_counter_event.value}
};
""");
}

if((family+series == "XMC48") || (family+series == "XMC47") || (family+series == "XMC45"))
{
if(CanInstance.rArraygindexgroup_nodesettings[2].gcheck_enablenode.value == true)
{
out.print("""
/* NODE 2  Bit Time Configuration */
const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t  ${appInst}_BitTimeConfig_node2 =
{
  .can_frequency = (uint32_t)${Calculate_freq},
  .baudrate      = (uint32_t)(${CanInstance.rArraygindexgroup_nodesettings[2].ginteger_baudrate.value} * 1000),
  .sample_point  = (uint16_t)(${CanInstance.rArraygindexgroup_nodesettings[2].ginteger_next_bit_time_percent.value} * 100),
  .sjw           = (uint16_t)${CanInstance.rArraygindexgroup_nodesettings[2].ginteger_sync_jump_width.value}U
};

/* Node2 Frame counter */
const XMC_CAN_NODE_FRAME_COUNTER_t ${appInst}_fc_node2 =
{
  {
	{
	  .can_frame_count_selection = ${CanInstance.rArraygindexgroup_nodesettings[2].ginteger_frame_count_selection.value}U,
	  .can_frame_count_mode 	 = ${count_mode2}U,
	}
  }
};

/* CAN_NODE init Structure configuration */
const MULTICAN_CONFIG_NODE_t  ${appInst}_Node2 =
{
  .global_ptr        		= (GLOBAL_CAN_t *)&${CanInstance.app_global_can.getInstanceLabel()},""");
   if(NodeUri2 != null)
   {
  out.print("""
  .node_ptr          		= (CAN_NODE_TypeDef*)CAN_NODE${NodeUri2[6]},""");
   }
   out.print("""
  .baudrate_config   		= (XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t*)&${appInst}_BitTimeConfig_node2,
  .node_fc_ptr		 		= (XMC_CAN_NODE_FRAME_COUNTER_t*)&${appInst}_fc_node2,
  .rx_signal                = ${[
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCA",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCB",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCC",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCD",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCE",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCF",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCG",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCH"
								][CanInstance.hwres_can_node2.getRegValue("npcr","npcr_rxsel").toInteger()]},
  .node_num          		= 2U,
  .alert_event_sr           = ${(CanInstance.hwres_can_node2.getRegValue("nipr${NodeUri2[6].value}","nipr_alinp").value)}U,
  .lec_event_sr             = ${(CanInstance.hwres_can_node2.getRegValue("nipr${NodeUri2[6].value}","nipr_lecinp").value)}U,
  .txok_event_sr            = ${(CanInstance.hwres_can_node2.getRegValue("nipr${NodeUri2[6].value}","nipr_trinp").value)}U,
  .framecount_event_sr      = ${(CanInstance.hwres_can_node2.getRegValue("nipr${NodeUri2[6].value}","nipr_cfcinp").value)}U,						   
  .analyzer_mode 		   	= ${CanInstance.rArraygindexgroup_nodesettings[2].gcheck_enable_analyzer_mode.value},
  .loopback_enable         	= ${CanInstance.rArraygindexgroup_nodesettings[2].gcheck_loopback_mode.value},
  .alert_event_enable      	= ${CanInstance.rArraygindexgroup_nodesettings[2].gcheck_node_alert_event.value},
  .lec_event_enable        	= ${CanInstance.rArraygindexgroup_nodesettings[2].gcheck_last_err_code_event.value},
  .txok_event_enable       	= ${CanInstance.rArraygindexgroup_nodesettings[2].gcheck_transfer_ok_event.value},
  .framecount_event_enable 	= ${CanInstance.rArraygindexgroup_nodesettings[2].gcheck_frame_counter_event.value}
};
""");
}
}
if((family+series == "XMC48") || (family+series == "XMC47"))
{
if(CanInstance.rArraygindexgroup_nodesettings[3].gcheck_enablenode.value == true)
{
out.print("""
/* NODE 3  Bit Time Configuration */
const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t  ${appInst}_BitTimeConfig_node3 =
{
  .can_frequency = (uint32_t)${Calculate_freq},
  .baudrate      = (uint32_t)(${CanInstance.rArraygindexgroup_nodesettings[3].ginteger_baudrate.value} * 1000),
  .sample_point  = (uint16_t)(${CanInstance.rArraygindexgroup_nodesettings[3].ginteger_next_bit_time_percent.value} * 100),
  .sjw           = (uint16_t)${CanInstance.rArraygindexgroup_nodesettings[3].ginteger_sync_jump_width.value}U
};

/* Node3 Frame counter */
const XMC_CAN_NODE_FRAME_COUNTER_t ${appInst}_fc_node3 =
{
  {
	{
	  .can_frame_count_selection     = ${CanInstance.rArraygindexgroup_nodesettings[3].ginteger_frame_count_selection.value}U,
	  .can_frame_count_mode 		 = ${count_mode3}U,
	}
  }
};

/* CAN_NODE init Structure configuration */
const MULTICAN_CONFIG_NODE_t  ${appInst}_Node3 =
{
  .global_ptr        		= (GLOBAL_CAN_t *)&${CanInstance.app_global_can.getInstanceLabel()},""");
   if(NodeUri3 != null)
   {
  out.print("""
  .node_ptr          		= (CAN_NODE_TypeDef*)CAN_NODE${NodeUri3[6]},""");
   }
   out.print("""
  .baudrate_config   		= (XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t*)&${appInst}_BitTimeConfig_node3,
  .node_fc_ptr		 		= (XMC_CAN_NODE_FRAME_COUNTER_t*)&${appInst}_fc_node3,
  .rx_signal                = ${[
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCA",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCB",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCC",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCD",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCE",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCF",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCG",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCH"
								][CanInstance.hwres_can_node3.getRegValue("npcr","npcr_rxsel").toInteger()]},
  .node_num          		= 3U,
  .alert_event_sr           = ${(CanInstance.hwres_can_node3.getRegValue("nipr${NodeUri3[6].value}","nipr_alinp").value)}U,
  .lec_event_sr             = ${(CanInstance.hwres_can_node3.getRegValue("nipr${NodeUri3[6].value}","nipr_lecinp").value)}U,
  .txok_event_sr            = ${(CanInstance.hwres_can_node3.getRegValue("nipr${NodeUri3[6].value}","nipr_trinp").value)}U,
  .framecount_event_sr      = ${(CanInstance.hwres_can_node3.getRegValue("nipr${NodeUri3[6].value}","nipr_cfcinp").value)}U,
  .analyzer_mode 		   	= ${CanInstance.rArraygindexgroup_nodesettings[3].gcheck_enable_analyzer_mode.value},
  .loopback_enable         	= ${CanInstance.rArraygindexgroup_nodesettings[3].gcheck_loopback_mode.value},
  .alert_event_enable      	= ${CanInstance.rArraygindexgroup_nodesettings[3].gcheck_node_alert_event.value},
  .lec_event_enable        	= ${CanInstance.rArraygindexgroup_nodesettings[3].gcheck_last_err_code_event.value},
  .txok_event_enable       	= ${CanInstance.rArraygindexgroup_nodesettings[3].gcheck_transfer_ok_event.value},
  .framecount_event_enable 	= ${CanInstance.rArraygindexgroup_nodesettings[3].gcheck_frame_counter_event.value}
};
""");
}

if(CanInstance.rArraygindexgroup_nodesettings[4].gcheck_enablenode.value == true)
{
out.print("""
/* NODE 4  Bit Time Configuration */
const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t  ${appInst}_BitTimeConfig_node4 =
{
  .can_frequency = (uint32_t)${Calculate_freq},
  .baudrate      = (uint32_t)(${CanInstance.rArraygindexgroup_nodesettings[4].ginteger_baudrate.value} * 1000),
  .sample_point  = (uint16_t)(${CanInstance.rArraygindexgroup_nodesettings[4].ginteger_next_bit_time_percent.value} * 100),
  .sjw           = (uint16_t)${CanInstance.rArraygindexgroup_nodesettings[4].ginteger_sync_jump_width.value}U
};

/* Node4 Frame counter */
const XMC_CAN_NODE_FRAME_COUNTER_t ${appInst}_fc_node4 =
{
  {
	{
	  .can_frame_count_selection     = ${CanInstance.rArraygindexgroup_nodesettings[4].ginteger_frame_count_selection.value}U,
	  .can_frame_count_mode 		 = ${count_mode4}U,
	}
  }
};

/* CAN_NODE init Structure configuration */
const MULTICAN_CONFIG_NODE_t  ${appInst}_Node4 =
{
  .global_ptr        		= (GLOBAL_CAN_t *)&${CanInstance.app_global_can.getInstanceLabel()},""");
   if(NodeUri4 != null)
   {
  out.print("""
  .node_ptr          		= (CAN_NODE_TypeDef*)CAN_NODE${NodeUri4[6]},""");
   }
   out.print("""
  .baudrate_config   		= (XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t*)&${appInst}_BitTimeConfig_node4,
  .node_fc_ptr		 		= (XMC_CAN_NODE_FRAME_COUNTER_t*)&${appInst}_fc_node4,
  .rx_signal                = ${[
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCA",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCB",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCC",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCD",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCE",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCF",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCG",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCH"
								][CanInstance.hwres_can_node4.getRegValue("npcr","npcr_rxsel").toInteger()]},
  .node_num          		= 4U,
  .alert_event_sr           = ${(CanInstance.hwres_can_node4.getRegValue("nipr${NodeUri4[6].value}","nipr_alinp").value)}U,
  .lec_event_sr             = ${(CanInstance.hwres_can_node4.getRegValue("nipr${NodeUri4[6].value}","nipr_lecinp").value)}U,
  .txok_event_sr            = ${(CanInstance.hwres_can_node4.getRegValue("nipr${NodeUri4[6].value}","nipr_trinp").value)}U,
  .framecount_event_sr      = ${(CanInstance.hwres_can_node4.getRegValue("nipr${NodeUri4[6].value}","nipr_cfcinp").value)}U,
  .analyzer_mode 		   	= ${CanInstance.rArraygindexgroup_nodesettings[4].gcheck_enable_analyzer_mode.value},
  .loopback_enable         	= ${CanInstance.rArraygindexgroup_nodesettings[4].gcheck_loopback_mode.value},
  .alert_event_enable      	= ${CanInstance.rArraygindexgroup_nodesettings[4].gcheck_node_alert_event.value},
  .lec_event_enable        	= ${CanInstance.rArraygindexgroup_nodesettings[4].gcheck_last_err_code_event.value},
  .txok_event_enable       	= ${CanInstance.rArraygindexgroup_nodesettings[4].gcheck_transfer_ok_event.value},
  .framecount_event_enable 	= ${CanInstance.rArraygindexgroup_nodesettings[4].gcheck_frame_counter_event.value}
};
""");
}

if(CanInstance.rArraygindexgroup_nodesettings[5].gcheck_enablenode.value == true)
{
out.print("""
/* NODE 5  Bit Time Configuration */
const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t  ${appInst}_BitTimeConfig_node5 =
{
  .can_frequency = (uint32_t)${Calculate_freq},
  .baudrate      = (uint32_t)(${CanInstance.rArraygindexgroup_nodesettings[5].ginteger_baudrate.value} * 1000),
  .sample_point  = (uint16_t)(${CanInstance.rArraygindexgroup_nodesettings[5].ginteger_next_bit_time_percent.value} * 100),
  .sjw           = (uint16_t)${CanInstance.rArraygindexgroup_nodesettings[5].ginteger_sync_jump_width.value}U
};

/* Node5 Frame counter */
const XMC_CAN_NODE_FRAME_COUNTER_t ${appInst}_fc_node5 =
{
  {
	{
	  .can_frame_count_selection     = ${CanInstance.rArraygindexgroup_nodesettings[5].ginteger_frame_count_selection.value}U,
	  .can_frame_count_mode 		 = ${count_mode5}U,
	}
  }
};

/* CAN_NODE init Structure configuration */
const MULTICAN_CONFIG_NODE_t  ${appInst}_Node5 =
{
  .global_ptr        		= (GLOBAL_CAN_t *)&${CanInstance.app_global_can.getInstanceLabel()},""");
   if(NodeUri5 != null)
   {
  out.print("""
  .node_ptr          		= (CAN_NODE_TypeDef*)CAN_NODE${NodeUri5[6]},""");
   }
   out.print("""
  .baudrate_config   		= (XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t*)&${appInst}_BitTimeConfig_node5,
  .node_fc_ptr		 		= (XMC_CAN_NODE_FRAME_COUNTER_t*)&${appInst}_fc_node5,
  .rx_signal                = ${[
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCA",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCB",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCC",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCD",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCE",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCF",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCG",
								 "XMC_CAN_NODE_RECEIVE_INPUT_RXDCH"
								][CanInstance.hwres_can_node5.getRegValue("npcr","npcr_rxsel").toInteger()]},
  .node_num          		= 5U,
  .alert_event_sr           = ${(CanInstance.hwres_can_node5.getRegValue("nipr${NodeUri5[6].value}","nipr_alinp").value)}U,
  .lec_event_sr             = ${(CanInstance.hwres_can_node5.getRegValue("nipr${NodeUri5[6].value}","nipr_lecinp").value)}U,
  .txok_event_sr            = ${(CanInstance.hwres_can_node5.getRegValue("nipr${NodeUri5[6].value}","nipr_trinp").value)}U,
  .framecount_event_sr      = ${(CanInstance.hwres_can_node5.getRegValue("nipr${NodeUri5[6].value}","nipr_cfcinp").value)}U,
  .analyzer_mode 		= ${CanInstance.rArraygindexgroup_nodesettings[5].gcheck_enable_analyzer_mode.value},
  .loopback_enable         	= ${CanInstance.rArraygindexgroup_nodesettings[5].gcheck_loopback_mode.value},
  .alert_event_enable      	= ${CanInstance.rArraygindexgroup_nodesettings[5].gcheck_node_alert_event.value},
  .lec_event_enable        	= ${CanInstance.rArraygindexgroup_nodesettings[5].gcheck_last_err_code_event.value},
  .txok_event_enable       	= ${CanInstance.rArraygindexgroup_nodesettings[5].gcheck_transfer_ok_event.value},
  .framecount_event_enable 	= ${CanInstance.rArraygindexgroup_nodesettings[5].gcheck_frame_counter_event.value}
};
""");
}
}

String hold_str_val = null;
Integer temp_val_in_dec = 0
Integer loop_count = 0;

for(int loop_count_var = 0; loop_count_var < (CanInstance.ginteger_number_message_objects.value);loop_count_var++)
{
  message_mode_control = (Integer)CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_message_object_mode_control.options.
                          indexOf(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_message_object_mode_control.value)
if((message_mode_control == 1) || (message_mode_control == 3))
{
	bottom = (Integer)CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_bot.options.
	          indexOf(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_bot.value)
	top = (Integer)CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_top.options.
	          indexOf(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_top.value)
}
// if rxfifo base object is selected
if(message_mode_control == 1)
{	
	out.print("""
XMC_CAN_FIFO_CONFIG_t ${appInst}_LMO_${loop_count_var}_rxfifo =
{""");
	out.print("""
  .fifo_bottom =	${bottom - 1},
  .fifo_top    =	${top - 1},
  .fifo_base   =	${bottom - 1}
};
""");
}
// if txfifo base/slave object is selected
else if((message_mode_control == 3) || (message_mode_control == 4))
{
	out.print("""
XMC_CAN_FIFO_CONFIG_t ${appInst}_LMO_${loop_count_var}_txfifo =
{""");
	out.print("""
  .fifo_bottom =	${bottom - 1},
  .fifo_top    =	${top - 1},
  .fifo_base   =	${bottom - 1}
};
""");
num_fifo = bottom-1;
num_elements_fifo = top-bottom;
}
if(message_mode_control == 5)
{
		out.print("""
XMC_CAN_GATEWAY_CONFIG_t ${appInst}_gateway_${loop_count_var} =
{""");
		bottom = (Integer)CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_bot.options.indexOf(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_bot.value)
		top = (Integer)CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_top.options.indexOf(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_top.value)
		out.print("""
  .gateway_bottom                =	${bottom - 1},
  .gateway_top                   =  ${top - 1},
  .gateway_base                  =	${bottom - 1},
  .gateway_data_frame_send       =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_gateway_data_frame_send.value},
  .gateway_identifier_copy       =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_identifier_copy.value},
  .gateway_data_length_code_copy =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_data_length_code_copy.value},
  .gateway_data_copy             =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_data_copy.value}
};
""");
}
if(loop_count_var < 10)
{
		out.print("""
XMC_CAN_MO_t  ${appInst}_LMO_0${loop_count_var} =
{""");
}
else
{
		out.print("""
XMC_CAN_MO_t  ${appInst}_LMO_${loop_count_var} =
{""");
}
	out.print("""
  .can_mo_type      =  """);
    if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_msgtype.value == "Tx")
	{
		out.print("XMC_CAN_MO_TYPE_TRANSMSGOBJ");
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_msgtype.value == "Rx")
	{
		out.print("XMC_CAN_MO_TYPE_RECMSGOBJ");
	}
	out.print(""",
  .can_id_mode      = """);
    if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_identifier_type.value == "Std_11bit")
	{
		out.print("XMC_CAN_FRAME_TYPE_STANDARD_11BITS");
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_identifier_type.value == "Ext_29bit")
	{
		out.print("XMC_CAN_FRAME_TYPE_EXTENDED_29BITS");
	}
	priority = (Integer)CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_priority.value
	out.print(""",
  .can_priority     = ${priority}U,""");
	temp_val_in_dec = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_identifier_value.value
	hold_str_val = Integer.toHexString(temp_val_in_dec)
	out.print("""
  .can_identifier   = 0x${hold_str_val}U, """);
	temp_val_in_dec = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_mask_value.value
	hold_str_val = Integer.toHexString(temp_val_in_dec)
	out.print("""
  .can_id_mask      = 0x${hold_str_val}U,
  .can_ide_mask     = """);
    if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_acceptance_mask.value == "Matching_IDE")
	{
		out.print("""1U""");
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_acceptance_mask.value == "Std_Ext")
	{
		out.print("""0U""");
	}
	out.print(""",
  .can_mo_ptr       = CAN_MO${map_arr[loop_count_var]},
  .can_data_length  = ${CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_data_length.value}U,""");
	data0 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db0.value
	data1 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db1.value
	data2 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db2.value
	data3 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db3.value
	data = data3 << 24 | data2 << 16 | data1 << 8 | data0
	hold_str_val = Integer.toHexString(data)
	out.print("""
  .can_data[0]      = 0x${hold_str_val}U,""");
	data4 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db4.value
	data5 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db5.value
	data6 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db6.value
	data7 = CanInstance.rArraygindexgroup_mo[loop_count_var].ginteger_db7.value
	data = data7 << 24 | data6 << 16 | data5 << 8 | data4
	hold_str_val = Integer.toHexString(data)
	out.print("""
  .can_data[1]      = 0x${hold_str_val}U
};
""");
	if(loop_count_var < 10)
	{
		out.print("""
MULTICAN_CONFIG_NODE_LMO_t ${appInst}_LMO_0${loop_count_var}_Config =
{""");
	}
	else
	{
		out.print("""
MULTICAN_CONFIG_NODE_LMO_t ${appInst}_LMO_${loop_count_var}_Config =
{""");
	}
	if(loop_count_var < 10)
	{
		out.print("""
  .mo_ptr     = (XMC_CAN_MO_t*)&${appInst}_LMO_0${loop_count_var},    """);
	}
	else
	{
		out.print("""
  .mo_ptr     = (XMC_CAN_MO_t*)&${appInst}_LMO_${loop_count_var},    """);
	}
	if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_list.value == "List 1(Node 0)")
	{
	  list = 1;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_list.value == "List 2(Node 1)")
	{
	  list = 2;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_list.value == "List 3(Node 2)")
	{
	  list = 3;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_list.value == "List 4(Node 3)")
	{
	  list = 4;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_list.value == "List 5(Node 4)")
	{
	  list = 5;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_list.value == "List 6(Node 5)")
	{
	  list = 6;
	}
	out.print("""
  .list       = ${list}U,
  .number     = ${map_arr[loop_count_var]}U,
  .tx_sr      = ${(msg_objarr[loop_count_var].getRegValue("MOIPR${map_arr[loop_count_var]}","moipr_txinp").value)}U,
  .rx_sr      = ${(msg_objarr[loop_count_var].getRegValue("MOIPR${map_arr[loop_count_var]}","moipr_rxinp").value)}U,
  .single_data_transfer  = 	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_single_data_transfer.value},
  .single_transmit_trial =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_single_transmit_trial.value},
  .tx_event_enable       =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_transmit_interrupt.value},
  .rx_event_enable       =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_receive_interrupt.value},
  .ov_event_enable       =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_overflow_interrupt.value},
  .foreign_remote        =	${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_foreign_remote_request.value},
  .init_as_gateway_destination = ${CanInstance.rArraygindexgroup_mo[loop_count_var].gcheck_enable_as_gateway_dest_mo.value},""");
message_mode_control = (Integer)CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_message_object_mode_control.options.indexOf(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_message_object_mode_control.value)
out.print("""
  .message_mode_control  = 	${[
								"MULTICAN_CONFIG_MMC_STDMSG",
								"MULTICAN_CONFIG_MMC_RXFIFO_BASE",
								"MULTICAN_CONFIG_MMC_RXFIFO_SLAVE",
								"MULTICAN_CONFIG_MMC_TXFIFO_BASE",
								"MULTICAN_CONFIG_MMC_TXFIFO_SLAVE",
								"MULTICAN_CONFIG_MMC_GATEWAYSRC"
							  ][CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_message_object_mode_control.options.indexOf(CanInstance.rArraygindexgroup_mo[loop_count_var].gcombo_message_object_mode_control.value)]},
""");
if(message_mode_control == 1)
{
out.print("""  .fifo = (XMC_CAN_FIFO_CONFIG_t*)&${appInst}_LMO_${loop_count_var}_rxfifo,""");
}
else if((message_mode_control == 3) || (message_mode_control == 4))
{
out.print("""  .fifo = (XMC_CAN_FIFO_CONFIG_t*)&${appInst}_LMO_${loop_count_var}_txfifo,""");
} 
else
{
out.print("""  .fifo = NULL,""");
}
if(message_mode_control == 5)
{
out.print("""
  .gateway = (XMC_CAN_GATEWAY_CONFIG_t*)&${appInst}_gateway_${loop_count_var}""");
}
else
{
out.print("""
  .gateway = NULL""");
}
out.print("""
};
""");
}//for num message objects
mo_count = CanInstance.ginteger_number_message_objects.value
out.print("""
MULTICAN_CONFIG_t  ${appInst} = 
{
  .global_ptr = (GLOBAL_CAN_t *)&${CanInstance.app_global_can.getInstanceLabel()},
	""");
out.print("""
  .lmobj_ptr =
   { 
	""");
for(int ltemp_count = 0; ltemp_count < CanInstance.ginteger_number_message_objects.value; ltemp_count++)
{
  if(map_arr[ltemp_count]!= null && (ltemp_count < CanInstance.ginteger_number_message_objects.value))
  {
	if((ltemp_count ) < 10)
	{
	  out.print("""
      (MULTICAN_CONFIG_NODE_LMO_t*)&${appInst}_LMO_0${ltemp_count}_Config""");
	}
	else
	{
	  out.print("""
      (MULTICAN_CONFIG_NODE_LMO_t*)&${appInst}_LMO_${ltemp_count}_Config""");
	}
  }
  else
  {
	out.print("""
	   NULL""");
  }
  if(ltemp_count != CanInstance.ginteger_number_message_objects.value - 1)
  {
	out.print(""", """);
  }
}
out.print("""\n
   },
  .multican_config_init_func  = &${appInst}_lInit,""");
if(CanInstance.rArraygindexgroup_nodesettings[0].gcheck_enablenode.value == true)
{
out.print("""
  .node0 = 	(MULTICAN_CONFIG_NODE_t*)&${appInst}_Node0,""");
}
if(CanInstance.rArraygindexgroup_nodesettings[1].gcheck_enablenode.value == true)
{
out.print("""
  .node1 = 	(MULTICAN_CONFIG_NODE_t*)&${appInst}_Node1,""");
}
if(CanInstance.rArraygindexgroup_nodesettings[2].gcheck_enablenode.value == true)
{
out.print("""
  .node2 = 	(MULTICAN_CONFIG_NODE_t*)&${appInst}_Node2, """);
}
if(CanInstance.rArraygindexgroup_nodesettings[3].gcheck_enablenode.value == true)
{
out.print("""
  .node3 = 	(MULTICAN_CONFIG_NODE_t*)&${appInst}_Node3, """);
}
if(CanInstance.rArraygindexgroup_nodesettings[4].gcheck_enablenode.value == true)
{
out.print("""
  .node4 = 	(MULTICAN_CONFIG_NODE_t*)&${appInst}_Node4, """);
}
if(CanInstance.rArraygindexgroup_nodesettings[5].gcheck_enablenode.value == true)
{
out.print("""
  .node5 = 	(MULTICAN_CONFIG_NODE_t*)&${appInst}_Node5 """);
}
out.print("""
};""");

out.print("""
/*********************************************************************************************************************************
	 *  API IMPLEMENTATION
	*********************************************************************************************************************************/
MULTICAN_CONFIG_STATUS_t ${appInst}_lInit()
{
  MULTICAN_CONFIG_STATUS_t status;
  uint32_t temp_mo;

  status  = (MULTICAN_CONFIG_STATUS_t)GLOBAL_CAN_Init(${appInst}.global_ptr);

  if (status == MULTICAN_CONFIG_STATUS_SUCCESS)
  {""");
Integer node = 0;
Integer temp_mo = 0; 
for(node = 0; node < total_nodes; node++)
{
if(CanInstance.rArraygindexgroup_nodesettings[node].gcheck_enablenode.value == true)
{
out.print("""\n    /**** NODE$node CONFIGURATION  ****
	---------------------------------------------------------------------------------------------------------------------*/\n""");
out.print("""   
	/* Initialize the GUI configured values for baud rate to NBTR Reg */
	XMC_CAN_NODE_NominalBitTimeConfigure(${appInst}.node${node}->node_ptr, ${appInst}.node${node}->baudrate_config);

	/* set CCE and INIT bit NCR for node configuration */
	XMC_CAN_NODE_EnableConfigurationChange(${appInst}.node${node}->node_ptr);

	XMC_CAN_NODE_SetInitBit(${appInst}.node${node}->node_ptr);

	XMC_CAN_NODE_FrameCounterConfigure(${appInst}.node${node}->node_ptr, ${appInst}.node${node}->node_fc_ptr);""");

  if (CanInstance.rArraygindexgroup_nodesettings[node].gcheck_loopback_mode.value == true)
  {
out.print("""\n	
	XMC_CAN_NODE_EnableLoopBack(${appInst}.node${node}->node_ptr);""");
  }
  else
  {
out.print("""\n	
	XMC_CAN_NODE_SetReceiveInput(${appInst}.node${node}->node_ptr, ${appInst}.node${node}->rx_signal);""");
  }
  /* Set the CAN node to analyzer mode */
if (CanInstance.rArraygindexgroup_nodesettings[node].gcheck_enable_analyzer_mode.value == true)
  {
out.print("""\n
	XMC_CAN_NODE_SetAnalyzerMode(${appInst}.node${node}->node_ptr);""");
  }
  
out.print("""\n
    /* Configure the node event pointer for the alert event with the service request number */""")
out.print("""\n 
    XMC_CAN_NODE_SetEventNodePointer(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
	                                 (uint32_t)${appInst}.node${node}->alert_event_sr); """)
out.print("""\n
    XMC_CAN_NODE_SetEventNodePointer(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
									 (uint32_t)${appInst}.node${node}->lec_event_sr);""")
out.print("""\n
	XMC_CAN_NODE_SetEventNodePointer(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
									 (uint32_t)${appInst}.node${node}->txok_event_sr);""")
out.print("""\n
	XMC_CAN_NODE_SetEventNodePointer(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
									 (uint32_t)${appInst}.node${node}->framecount_event_sr);""")

out.print("""\n
    /* Enable node events */""")
if (CanInstance.rArraygindexgroup_nodesettings[node].gcheck_node_alert_event.value == true)
{
out.print("""\n
	XMC_CAN_NODE_EnableEvent(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_EVENT_ALERT);""");
}

if (CanInstance.rArraygindexgroup_nodesettings[node].gcheck_last_err_code_event.value == true)
{
out.print("""\n
	XMC_CAN_NODE_EnableEvent(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_EVENT_LEC);""");
}

if (CanInstance.rArraygindexgroup_nodesettings[node].gcheck_transfer_ok_event.value == true)
{
out.print("""\n
	XMC_CAN_NODE_EnableEvent(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_EVENT_TX_INT);""");
}

if (CanInstance.rArraygindexgroup_nodesettings[node].gcheck_frame_counter_event.value == true)
{
out.print("""\n
	/* Enable frame count event */
	XMC_CAN_NODE_EnableEvent(${appInst}.node${node}->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);""");
}
out.print("""\n
	/* reset CCE and INIT bit NCR for node configuration */
	XMC_CAN_NODE_DisableConfigurationChange(${appInst}.node${node}->node_ptr);

	XMC_CAN_NODE_ResetInitBit(${appInst}.node${node}->node_ptr);""");
out.print("""\n    /*------------------------------------------------------------------------------------------------------------*/""");
}
}

for (loop_count = 0; loop_count < (CanInstance.ginteger_number_message_objects.value); loop_count++)
{
	if(CanInstance.rArraygindexgroup_mo[loop_count].gcombo_list.value == "List 0(unallocated objects)")
	{
	  list = 0;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count].gcombo_list.value == "List 1(Node 0)")
	{
	  list = 1;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count].gcombo_list.value == "List 2(Node 1)")
	{
	  list = 2;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count].gcombo_list.value == "List 3(Node 2)")
	{
	  list = 3;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count].gcombo_list.value == "List 4(Node 3)")
	{
	  list = 4;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count].gcombo_list.value == "List 5(Node 4)")
	{
	  list = 5;
	}
	else if(CanInstance.rArraygindexgroup_mo[loop_count].gcombo_list.value == "List 6(Node 5)")
	{
	  list = 6;
	}
if((CanInstance.rArraygindexgroup_nodesettings[0].gcheck_enablenode.value == true) ||
   (CanInstance.rArraygindexgroup_nodesettings[1].gcheck_enablenode.value == true) ||
   (CanInstance.rArraygindexgroup_nodesettings[2].gcheck_enablenode.value == true) ||
   (CanInstance.rArraygindexgroup_nodesettings[3].gcheck_enablenode.value == true) ||
   (CanInstance.rArraygindexgroup_nodesettings[4].gcheck_enablenode.value == true) ||
   (CanInstance.rArraygindexgroup_nodesettings[5].gcheck_enablenode.value == true))
{
	if(list != 0)
	{
  out.print("""\n
    XMC_CAN_AllocateMOtoNodeList(${appInst}.global_ptr->canglobal_ptr, ${appInst}.node${list-1}->node_num,
                                 ${appInst}.lmobj_ptr[${loop_count}]->number);""");
	}
}
}

out.print("""\n
	for(temp_mo = 0; temp_mo < NUM_MSGOBJECTS; temp_mo++)
	{
      XMC_CAN_MO_Config(${appInst}.lmobj_ptr[temp_mo]->mo_ptr);

      XMC_CAN_MO_SetEventNodePointer(${appInst}.lmobj_ptr[temp_mo]->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE,
                                     (uint32_t)${appInst}.lmobj_ptr[temp_mo]->rx_sr);

      XMC_CAN_MO_SetEventNodePointer(${appInst}.lmobj_ptr[temp_mo]->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT,
								     (uint32_t)${appInst}.lmobj_ptr[temp_mo]->tx_sr);
	}
""")

for(temp_mo = 0; temp_mo < CanInstance.ginteger_number_message_objects.value; temp_mo++)
{
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_receive_interrupt.value == true)
{
out.print("""
    XMC_CAN_MO_EnableEvent(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, (uint32_t)XMC_CAN_MO_EVENT_RECEIVE);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_transmit_interrupt.value == true)
{
out.print("""
    XMC_CAN_MO_EnableEvent(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, (uint32_t)XMC_CAN_MO_EVENT_TRANSMIT);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_overflow_interrupt.value == true &&
	CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_overflow_interrupt.enabled == true)
{
out.print("""
    XMC_CAN_MO_EnableEvent(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, (uint32_t)XMC_CAN_MO_EVENT_OVERFLOW);\n""");
}
   /* Enable single transmit trial */
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_single_transmit_trial.value == true)
{
out.print("""
    XMC_CAN_MO_EnableSingleTransmitTrial(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_single_data_transfer.value == true)
{
out.print("""
    XMC_CAN_FIFO_EnableSingleDataTransfer(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcombo_message_object_mode_control.value == "Receive FIFO base object")
{
out.print("""
    XMC_CAN_RXFIFO_ConfigMOBaseObject(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, *${appInst}.lmobj_ptr[${temp_mo}]->fifo);

    XMC_CAN_FIFO_SetSELMO(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, ${appInst}.lmobj_ptr[${temp_mo}]->fifo->fifo_bottom);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcombo_message_object_mode_control.value == "Receive FIFO slave object")
{
out.print("""
    XMC_CAN_RXFIFO_ConfigMOSlaveObject(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcombo_message_object_mode_control.value == "Transmit FIFO base object")
{
out.print("""
    XMC_CAN_TXFIFO_ConfigMOBaseObject(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, *${appInst}.lmobj_ptr[${temp_mo}]->fifo);

    XMC_CAN_FIFO_SetSELMO(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, ${appInst}.lmobj_ptr[${temp_mo}]->fifo->fifo_bottom);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcombo_message_object_mode_control.value == "Transmit FIFO slave object")
{
out.print("""
    XMC_CAN_TXFIFO_ConfigMOSlaveObject(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, *${appInst}.lmobj_ptr[${temp_mo}]->fifo);""");
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_as_gateway_dest_mo.value == false)
{
out.print("""
    XMC_CAN_MO_SetStatus(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, (uint32_t)XMC_CAN_MO_SET_STATUS_TX_REQUEST);\n""");
}
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcombo_message_object_mode_control.value == "Gateway source object")
{
out.print("""
    XMC_CAN_GATEWAY_InitSourceObject(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr, *${appInst}.lmobj_ptr[${temp_mo}]->gateway);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_as_gateway_dest_mo.value == true)
{
out.print("""
    XMC_CAN_GATEWAY_InitDesObject(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr);\n""");
}
if (CanInstance.rArraygindexgroup_mo[temp_mo].gcheck_enable_foreign_remote_request.value == true)
{
out.print("""
    XMC_CAN_FIFO_EnableForeignRemoteRequest(${appInst}.lmobj_ptr[${temp_mo}]->mo_ptr);\n""");
}
}
out.print("""
  }
  else
  {
    status = MULTICAN_CONFIG_STATUS_FAILURE;
  }
  return (status);
}
""");
}
