/**
 * @file spi_config.h
 * @date 2021-01-08
 *
 * NOTE:
 * This file is generated by DAVE-4. Any manual modification done to this file will be lost when the code is
 * regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * SPI_CONFIG v4.0.14 - Configures a USIC channel to perform transmit & receive operations using SPI protocol.
 *
 * Copyright (c) 2015-2020, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *   disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-08-06:
 *     - Initial version for DAVEv4
 *
 * 2021-01-08:
 *     - Modified check for minimum XMCLib version
 *
 * @endcond
 *
 */
/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/
#ifndef SPI_CONFIG_H
#define SPI_CONFIG_H

#include "xmc_spi.h"

#include "DAVE_Common.h"
#include "spi_config_conf.h"

/***********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/
#define SPI_CONFIG_XMC_LIB_MAJOR_VERSION 2
#define SPI_CONFIG_XMC_LIB_MINOR_VERSION 0
#define SPI_CONFIG_XMC_LIB_PATCH_VERSION 0

#if !((XMC_LIB_MAJOR_VERSION > SPI_CONFIG_XMC_LIB_MAJOR_VERSION) ||\
      ((XMC_LIB_MAJOR_VERSION == SPI_CONFIG_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > SPI_CONFIG_XMC_LIB_MINOR_VERSION)) ||\
      ((XMC_LIB_MAJOR_VERSION == SPI_CONFIG_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == SPI_CONFIG_XMC_LIB_MINOR_VERSION) && (XMC_LIB_PATCH_VERSION >= SPI_CONFIG_XMC_LIB_PATCH_VERSION)))
#error "SPI_CONFIG requires XMC Peripheral Library v2.0.0 or higher"
#endif

/***********************************************************************************************************************
 * ENUMS
 **********************************************************************************************************************/

/**
 * @ingroup SPI_CONFIG_enumerations
 * @{
 */

/**
 * @brief Enum to describe the possible status values, returned
 *  by SPI_CONFIG APIs.
 */
typedef enum SPI_CONFIG_STATUS
{
  SPI_CONFIG_STATUS_SUCCESS = 0U,        /**< APP initialization is success */
  SPI_CONFIG_STATUS_FAILURE = 1U         /**<APP initialization is failure */

} SPI_CONFIG_STATUS_t;

/**
 * @}
 */

/***********************************************************************************************************************
 * DATA STRUCTURES
 **********************************************************************************************************************/

typedef void (*SPI_CONFIG_func_ptr) (void);

/**
 * @ingroup SPI_CONFIG_datastructures
 * @{
 */

/**
 * @brief Structure for holding the configuration parameters of the SPI channel.
 */
typedef struct SPI_CONFIG_CONF
{
  const XMC_SPI_CH_CONFIG_t *const channel_config;   /**< Reference to SPI configuration structure */
  SPI_CONFIG_func_ptr spi_config_init_func; /**< Function pointer to configure a USIC channel for SPI */
  const XMC_SPI_CH_MODE_t op_mode;                    /**< Operation mode of the channel */
  XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;               /**< Transmit FIFO size configuration */
  XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;               /**< Receive FIFO size configuration */
  const XMC_SPI_CH_SLAVE_SELECT_t *const slave_select_list;  /**< Reference to slave select pin */
  const uint8_t tx_fifo_limit;                        /**< Transmit FIFO limit for interrupt generation */
  const uint8_t rx_fifo_limit;                        /**< Receive FIFO limit for interrupt generation */
  uint8_t num_slave_sel_lines;                         /**< Number of slave select lines being used */
} SPI_CONFIG_CONF_t;

/**
 * @brief Handler structure with pointers to static parameters.
 */
typedef struct SPI_CONFIG
{
  XMC_USIC_CH_t *const channel;                  /**< USIC channel */
  const SPI_CONFIG_CONF_t *const config;    /**< SPI_CONFIG configuration structure pointer */
} SPI_CONFIG_t;

/**
 * @}
 */

#ifdef __cplusplus
extern "C" {
#endif
/***********************************************************************************************************************
 * API Prototypes
 **********************************************************************************************************************/
/**
 * @ingroup SPI_CONFIG_apidoc
 * @{
 */

/**
 * @brief Get the SPI_CONFIG APP version.
 * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 *
 * Example Usage:
 * @code
 *   #include <DAVE.h>
 *
 *   int main(void)
 *   {
 *     SPI_CONFIG_STATUS_t init_status;
 *     DAVE_APP_VERSION_t spi_config_version;
 *     uint8_t valid_str[] = "SPI_CONFIG APP supported!";
 *
 *     init_status = (SPI_CONFIG_STATUS_t)SPI_CONFIG_Init(&SPI_CONFIG_0);
 *     if(init_status == SPI_CONFIG_STATUS_SUCCESS)
 *     {
 *       spi_config_version = SPI_CONFIG_GetAppVersion();
 *       if (spi_config_version.major != 4U) {
 *       // Probably, not the right version.
 *       }
 *
 *       // More code here
 *       while(1) {
 *
 *       }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1U);
 *  }
 *  @endcode
 */
DAVE_APP_VERSION_t SPI_CONFIG_GetAppVersion(void);

/**
 * @brief Function to initialize the SPI module as per the configuration made
 * in GUI.
 * @param handle Pointer to static content of APP configuration.
 * @return SPI_CONFIG_STATUS_t: Status of the SPI driver initialization.\n
 *   @ref SPI_CONFIG_STATUS_SUCCESS - on successful initialization.\n
 *   @ref SPI_CONFIG_STATUS_FAILURE - if initialization fails.\n
 *
 * \par<b>Description:</b><br>
 * This function configures USIC registers based on the settings provided in the GUI.
 * <BR>
 *
 * Example Usage:
 * @code
 *   #include <DAVE.h>   // Declarations from DAVE Code Generation (includes SFR declaration)
 *
 *   int main(void)
 *   {
 *     SPI_CONFIG_STATUS_t init_status;
 *
 *     init_status = (SPI_CONFIG_STATUS_t)SPI_CONFIG_Init(&SPI_CONFIG_0);
 *     if(init_status == SPI_CONFIG_STATUS_SUCCESS)
 *     {
 *         while(1U)
 *         {
 *         }
 *     }
 *     else
 *     {
 *      XMC_DEBUG("main: Application initialization failed");
 *      while(1U)
 *      {
 *      }
 *     }
 *      return (1U);
 *  }
 *  @endcode
 */
SPI_CONFIG_STATUS_t SPI_CONFIG_Init(const SPI_CONFIG_t *const handle);

/**
 * @}
 */

/* Include APP extern declaration file */
#include "spi_config_extern.h"

#ifdef __cplusplus
}
#endif

#endif /* SPI_CONFIG_H */
