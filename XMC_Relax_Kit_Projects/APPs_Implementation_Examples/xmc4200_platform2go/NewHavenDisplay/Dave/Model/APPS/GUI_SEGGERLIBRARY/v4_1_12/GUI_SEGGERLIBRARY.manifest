package Model.APPS.GUI_SEGGERLIBRARY.v4_1_12;

/*
 Copyright (c) 2015-2020, Infineon Technologies AG
 All rights reserved.
											
 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 following conditions are met:
																			 
 Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 disclaimer.
  
 Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 disclaimer in the documentation and/or other materials provided with the distribution.
  
 Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 products derived from this software without specific prior written permission.
																			 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
																			 
 To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with
 Infineon Technologies AG: dave@infineon.com. */
 
/*************** Revision History ******************************************************
 Version       Date        Description
 
  4.0.0       16-Feb-2015   Initial version for DAVE v4
  4.0.1       20-Feb-2015   Documentation updated
  4.0.2       25-May-2015   Merged GUI_LCD APP UI and files into GUI_SEGGERLIBRARY APP 
  4.1.2       16-Jun-2015   version updated for public release
  4.1.4       08-Jul-2015   Documentation updated
  4.1.6       09-Oct-2015   Added support for XMC1400, XMC4800 and XMC4700 devices <br>
                            Added OS support (FreeRTOS, CMSIS_RTOS_RTX)
  4.1.8       15-Dec-2015   Added support for XMC4300.                            
  4.1.10      21-Apr-2016   License info updated in help documentation
  4.1.12      09-Jan-2021   Modified check for minimum XMCLib version. <BR>
***************************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

class  GUI_SEGGERLIBRARY extends GUI_SEGGERLIBRARY_GUI {

	// Note  : Following App properties are mandatory and important
	// Begin : App property section
	
	/**
	 * App version
	 * Format: a string with three digit separated by a dot.
	 */
	def version            = '4.1.12'
	
	/**
	 * App categories declaration. 
	 * It is list of strings. Subcategories are separated by slash.
	 * No limits on number of categories and subcategories depth.
	 */
	def categoriesDescription = ["Human Machine Interface"] 

	/** 
	 * Minimum DAVE version required for this app.
	 * 
	 * It is string with three digit separated by a dot.
	 */
	def minDaveVersion           = '4.0.0'
	
	/** 
	 * Keywords used by search feature in Apps selection view
	 * 
	 * It is a list of string.
	 */
	def keywords      = ['emWin library',
						 'Segger',
						 'LCD', 
						 'Driver', 
						 'Keyboard', 
						 'Mouse',
						 'TouchPad', 
						 'Graphic',
						 'all'
						]
	
	/** 
	 * softwareIDs is used to declare which devices are compatible with this app.
	 * It is a map with key a string containing a pattern that shall match the SW id of
	 * the device and as value the minimal version of the app.
	 * 
	 * 
	 */
	
    //Any step of XMC4500F144 and XMC4400F144
	//Any step of XMC4400F100 and XMC4400F54
	//Any step, any variant and any packages of XMC1300
	def softwareIDs       = [
		"XMC4.8.*.*.*":"1.0.0",
		"XMC4.7.*.*.*":"1.0.0",
		"XMC4.5.00.(E144|F144|F100).*":"1.0.0",
		"XMC4.[4-5].02.F100.*":"1.0.0",
		"XMC4.5.04.(F144|F100).*":"1.0.0",
		
		"XMC4.4.00.(F100|F64).*":"1.0.0",
		"XMC4.4.02.(F64).*":"1.0.0",

		"XMC4.3.*.*.*":"1.0.0",
		
		"XMC4.2.00.(F64|Q48).*":"1.0.0",
		
		"XMC4.1.00.(F64|Q48).*":"1.0.0",
		"XMC4.1.04.(F64|Q48).*":"1.0.0",
		"XMC4.1.08.(F64|Q48).*":"1.0.0",
		
		"XMC1.1.00.*.*":"1.0.0",
		
		"XMC1.2.00.T038.*":"1.0.0",
		"XMC1.2.01.(T038|Q040).*":"1.0.0",
		"XMC1.2.02.(Q024|Q040).*":"1.0.0",
		
		"XMC1.3.01.(Q024|Q040).*":"1.0.0",
		"XMC1.3.02.*.*":"1.0.0",
		"XMC1.4.*.*.*":"1.0.0"
		
		]
	
	/**
	 * Singleton property:
	 * When it is true the app can be instantiated only once. 
	 */
	def singleton     = true


	/**
	 * initProvider property
	 * It shall be true to add a call to <AppName>_Init() 
	 */
	def initProvider  = true
	
	/**
	 * Deprecated app
	 * Set it to true to indicate that the app shall be not used for new projects.
	 */
	def deprecated    = false
	
	/**
	 * Sharable property.
	 * It shall be true to allows multiple apps to require the same instance of this app.
	 */
	def sharable      = false

	/**
	 *  App function description.
	 */
	def description = "Provides an interface to create GUI applications which can run in RTOS/Non-RTOS environment."
	
	// End   : App property section
	
	// Begin : User app property section 
	MVirtualResourceGroup hwres_iopin
	
	MVirtualSignal vs_iopin

	MRequiredApp appres_systimer
	MRequiredApp appres_spi_master
	MRequiredApp appres_freertos
	MRequiredApp appres_cmsisrtos
	
	// End   : User app property section

	// App Constructor
	public GUI_SEGGERLIBRARY(DaveEnv daveEnv) {
		
		String family = daveEnv.project.selectedDevice.deviceId.family
		String series = daveEnv.project.selectedDevice.deviceId.series
		
		hwres_iopin = MVirtualResourceGroup("GPIO pin",["port","p","*","pad","*"],
													MF({
														if((gcombo_disp_selection.value == "Syncoam(SEPS525F) Display") 
															&& (gcheck_spi_interface.value == true))
														{
															true
														}
														else
														{
															false
														}
													  },Boolean))
		
		@AddPin
		vs_iopin = MVirtualSignal(hwres_iopin,"GPIO pin","pad",
													MF({
														if((gcombo_disp_selection.value == "Syncoam(SEPS525F) Display") 
															&& (gcheck_spi_interface.value == true))
														{
															true
														}
														else
														{
															false
														}
													  },Boolean),false)
		
		glabel_library_info.visible = MF({false},Boolean)
		
		/* Show SEPS525F Display settings tab */
		gtab_syncoam_display_config.visible = MF({ (gcombo_disp_selection.value == "Syncoam(SEPS525F) Display")},Boolean)
		
		/* Show Other Display settings tab */
		gtab_other_disp_config.visible = MF({(gcombo_disp_selection.value == "Other Display")},Boolean)
		
		/* Consume SYSTIMER APP */
		appres_systimer = MRequiredApp("SYSTIMER","SYSTIMER",RSHARABLE,"4.0.2",MF({gcombo_os.value == "None"},Boolean))
		
		appres_freertos = MRequiredApp("FREERTOS","FREERTOS",RSHARABLE,"4.0.2",MF({gcombo_os.value == "FreeRTOS"},Boolean))
		
		appres_cmsisrtos = MRequiredApp("CMSIS_RTOS_RTX","CMSIS_RTOS_RTX",RSHARABLE,"4.0.2",MF({gcombo_os.value == "CMSIS_RTOS_RTX"},Boolean))
		
		/* Consume SPI_MASTER APP based on UI selection for SPI Interface check box */ 
		appres_spi_master = MRequiredApp("SPI_MASTER","SPI_MASTER",RSHARABLE,"4.0.2",
										MF({
											if(((gcombo_disp_selection.value == "Syncoam(SEPS525F) Display") && (gcheck_spi_interface.value == true)))
											{
												true
											}
											else if(((gcombo_disp_selection.value == "Other Display") && (gcheck_other_spi_interface.value == true)))
											{
												true
											}
											else
											{
												false
											}
										  },Boolean))
		
		/* Enable read support only for XMC4 devices */
		gcheck_non_read_support.enabled  = MF({
											  if((family+series == 'XMC48') || (family+series == 'XMC47') || 
												 (family+series == 'XMC45') || (family+series == 'XMC44') ||
												 (family+series == 'XMC43'))
											  {
												  true
											  }
											  else
											  {
												  false
											  }
											},Boolean)
		
		MF Is_NonReadable_Enabled = MF({
										if((gcheck_non_read_support.value == true) && 
										   ((family+series == 'XMC45') || (family+series == 'XMC48') || 
											(family+series == 'XMC47')))
										{
											true
										}
										else
										{
											false
										}}, Boolean)
		
		/* Enable cache size when read support is enabled */
		gint_cachesize.enabled   = MF({if(gcheck_non_read_support.value == true)true else false}, Boolean)
		gcheck_user_defined_section.enabled = Is_NonReadable_Enabled
		
		/* For XMC4800/4700/4300 devices, maximum cache size allowed is 180KB.
		 * For XMC4500 devices, maximum cache size allowed is 60KB. 
		 * For XMC4400 devices, maximum cache size allowed is 76KB.
		 * If user-defined section is enabled, maximum cache size of 16MB is allowed and it is applicable for
		 * XMC48/47/4500 devices only as EBU support is available only for these devices.*/
		gint_cachesize.maxValue =  MF({
									      if((family+series == 'XMC47') || (family+series == 'XMC48') || 
											 (family+series == 'XMC43'))
										  { 
											if(gcheck_user_defined_section.value == false)
											{
												180000
											}
											else
											{
												0xF42400 // 16MB
											}
										  }
										  else if(family+series == 'XMC45')
										  {
											  if(gcheck_user_defined_section.value == false)
											  {
												  60000
											  }
											  else
											  {
												  0xF42400 // 16MB
											  }
										  }
										  else if(family+series == 'XMC44')
										  {
											  76000
										  }
										  else
										  {
											  4096
										  }
										}, Integer)
			
		MF Is_Other_Display_Selected = MF({if(gcombo_disp_selection.value == "Other Display")true else false},Boolean)
		
		glabel_syncoam_rgb.visible = MF({if(gcombo_disp_selection.value == "Other Display")false else true},Boolean)
		gcombo_resolution.visible = MF({if(gcombo_disp_selection.value == "Other Display")true else false},Boolean)
		
		MF Is_SyncoamDisplay_Spi_Selected = MF({
													if((gcombo_disp_selection.value == "Syncoam(SEPS525F) Display") &&
													   (gcheck_spi_interface.value == true))
													{
														false
													}
													else if((gcombo_disp_selection.value == "Syncoam(SEPS525F) Display") &&
															(gcheck_spi_interface.value == false))
													{
														true
													}
													else
													{
														false
													}
											   },Boolean)

		gstring_library_info.value = MF(
										{
											if(gcombo_mode.value == "Basic")
											{
												"Basic library: It provides the access only to text based graphics."
											}
											else if(gcombo_mode.value == "Advanced" && family == 'XMC4')
											{
												"Advanced library: It provides the access to window manager, touch screen and USB devices(keyboard/mouse) support."
											}
											else if(gcombo_mode.value == "Advanced" && family == 'XMC1')
											{
												"Advanced library: It provides the access to window manager, touch screen support."
											}
											else
											{
												"Basic library: It provides the access only to text based graphics."
											}
										}, String)
		

		/* Load the library name based on mode */
				gstring_libraryname.value = MF(
											{   
												if(gcombo_mode.value == "Basic")
												{
													if(family == 'XMC4')
													{
														"GUI_basic_xmc4"
													}
													else if(family == 'XMC1')
													{
														"GUI_basic_xmc1"
													}
											   }
											   else if((gcombo_mode.value == "Advanced"))
											   {
													if(family == 'XMC4')
													{
														"GUI_advance_xmc4"
													}
													else if(family == 'XMC1')
													{
														"GUI_advance_xmc1"
													}
											   }
 											   else
											   {
													""
											   }
											},String)
				
				/* Enable the x-axis parameter if "Other Display" is selected */
				gint_xaxis_val.enabled = Is_Other_Display_Selected
				
				/* Enable the y-axis parameter if "Other Display" is selected */
				gint_yaxis_val.enabled =  Is_Other_Display_Selected
			
				/* Enable initialization text box if "SEPS525F Display" and SPI is selected */
				gstring_display_init.enabled =  Is_SyncoamDisplay_Spi_Selected
				
				/* Enable read text box if "SEPS525F Display" and SPI is selected */
				gstring_lcd_read.enabled = Is_SyncoamDisplay_Spi_Selected
				
				/* Enable write command text box if "SEPS525F Display" and SPI is selected */
				gstring_lcd_wr_cmd.enabled = Is_SyncoamDisplay_Spi_Selected
				
				/* Enable write data text box if "SEPS525F Display" and SPI is selected */
				gstring_lcd_wr_data.enabled = Is_SyncoamDisplay_Spi_Selected
				
				/* Enable write multiple text box if "SEPS525F Display" and SPI is selected */
				gstring_lcd_wr_multiple.enabled = Is_SyncoamDisplay_Spi_Selected
		
				/* Enable other display x-axis if "Other Display" is selected */
				gint_other_xaxis_val.enabled = Is_Other_Display_Selected
				
				/* Enable other display y-axis if "Other Display" is selected */
				gint_other_yaxis_val.enabled =  Is_Other_Display_Selected
				
				/* Enable other display initialization text box if "Other Display" is selected */
				gstring_other_display_init.enabled =  Is_Other_Display_Selected
				
				/* Enable other display read text box if "Other Display" and 16-bit is selected */
				gstring_other_lcd_read.enabled = Is_Other_Display_Selected
				
				/* Enable other display write command text box if "Other Display" and 16-bit is selected */
				gstring_other_lcd_wr_cmd.enabled = Is_Other_Display_Selected
				
				/* Enable other display write data text box if "Other Display" and 16-bit is selected */
				gstring_other_lcd_wr_data.enabled = Is_Other_Display_Selected
				
				/* Enable other display write multiple text box if "Other Display" and 16-bit is selected */
				gstring_other_lcd_wr_multiple.enabled = Is_Other_Display_Selected
				
				

	}
	
	// File Generation
	def generateFiles(){
		copy("Config", "Config")
		copy("gui_seggerlibrary.c","gui_seggerlibrary.c")
		copy("gui_seggerlibrary.h","gui_seggerlibrary.h")
		copy("LCDConf.h","LCDConf.h")
		copy("LCDConf.c","LCDConf.c")

		generate("gui_seggerlibrary_confc.tmpl", "gui_seggerlibrary_conf.c")
		generate("gui_seggerlibrary_confh.tmpl", "gui_seggerlibrary_conf.h")
		generate("gui_seggerlibrary_externh.tmpl", "gui_seggerlibrary_extern.h")
		
	}
	
}
