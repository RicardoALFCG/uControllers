
NewHavenDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e50c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1fffc000  1fffc000  00024000  2**0
                  ALLOC
  2 .data         000000bc  1fffc800  0c00e50c  0001c800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001304  1fffc8bc  0c00e5c8  0001c8bc  2**2
                  ALLOC
  4 .no_init      00000020  20005fc0  20005fc0  00024000  2**2
                  ALLOC
  5 .debug_aranges 00000e48  00000000  00000000  0001c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000143b4  00000000  00000000  0001d708  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030a5  00000000  00000000  00031abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008b6b  00000000  00000000  00034b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003afc  00000000  00000000  0003d6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000092e1  00000000  00000000  000411c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078f8  00000000  00000000  0004a4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c50  00000000  00000000  00051da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00001116  00000000  00000000  000529f1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	35 1d 00 08 91 02 00 08 91 02 00 08 91 02 00 08     5...............
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 39 35 00 08     ............95..
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 0d 2c 00 08 fd 2b 00 08     .........,...+..
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00e50c 	.word	0x0c00e50c
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	000000bc 	.word	0x000000bc
 8000254:	0c00e50c 	.word	0x0c00e50c
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffc8bc 	.word	0x1fffc8bc
 8000264:	00001304 	.word	0x00001304
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000270:	1fffc800 	.word	0x1fffc800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000274:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	0800b69d 	.word	0x0800b69d
    blx  r0
#endif

    ldr  r0, =main
 800028c:	080034d9 	.word	0x080034d9

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SystemInit+0x28>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x2c>)
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <SystemInit+0x30>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b0:	f003 f850 	bl	8003354 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b4:	f003 f8b8 	bl	8003428 <SystemCoreClockSetup>
}
 80002b8:	bd98      	pop	{r3, r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20005fc4 	.word	0x20005fc4
 80002c0:	20005fd4 	.word	0x20005fd4
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <SystemCoreClockUpdate+0xc4>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d03e      	beq.n	8000358 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ec:	f003 f892 	bl	8003414 <OSCHP_GetFrequency>
 80002f0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d020      	beq.n	8000340 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000306:	0e1b      	lsrs	r3, r3, #24
 8000308:	3301      	adds	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	fbb2 f3f3 	udiv	r3, r2, r3
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00d      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000348:	3301      	adds	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e001      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 800035a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	3301      	adds	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	3301      	adds	r3, #1
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	fbb2 f3f3 	udiv	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800037e:	4a06      	ldr	r2, [pc, #24]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	50004600 	.word	0x50004600
 8000390:	50004710 	.word	0x50004710
 8000394:	016e3600 	.word	0x016e3600
 8000398:	20005fc0 	.word	0x20005fc0

0800039c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	460b      	mov	r3, r1
 80003a6:	607a      	str	r2, [r7, #4]
 80003a8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	089b      	lsrs	r3, r3, #2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	7afb      	ldrb	r3, [r7, #11]
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3204      	adds	r2, #4
 80003be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003c2:	7afb      	ldrb	r3, [r7, #11]
 80003c4:	f003 0303 	and.w	r3, r3, #3
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	4619      	mov	r1, r3
 80003cc:	23f8      	movs	r3, #248	; 0xf8
 80003ce:	408b      	lsls	r3, r1
 80003d0:	43db      	mvns	r3, r3
 80003d2:	ea02 0103 	and.w	r1, r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	1d02      	adds	r2, r0, #4
 80003da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	2303      	movs	r3, #3
 80003ea:	408b      	lsls	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	401a      	ands	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4a38      	ldr	r2, [pc, #224]	; (80004d8 <XMC_GPIO_Init+0x13c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d10a      	bne.n	8000412 <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000400:	7afb      	ldrb	r3, [r7, #11]
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	661a      	str	r2, [r3, #96]	; 0x60
 8000410:	e042      	b.n	8000498 <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	b25b      	sxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	da3c      	bge.n	8000498 <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	409a      	lsls	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4618      	mov	r0, r3
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3210      	adds	r2, #16
 800043e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	f003 0307 	and.w	r3, r3, #7
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4619      	mov	r1, r3
 800044c:	2307      	movs	r3, #7
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	ea02 0103 	and.w	r1, r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f100 0210 	add.w	r2, r0, #16
 800045c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000460:	7afb      	ldrb	r3, [r7, #11]
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4618      	mov	r0, r3
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3210      	adds	r2, #16
 8000474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7a1b      	ldrb	r3, [r3, #8]
 800047c:	4619      	mov	r1, r3
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	f003 0307 	and.w	r3, r3, #7
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	ea42 0103 	orr.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3204      	adds	r2, #4
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0303 	and.w	r3, r3, #3
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	1d02      	adds	r2, r0, #4
 80004ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	48028e00 	.word	0x48028e00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20005fc0 	.word	0x20005fc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed8 	bl	80002c8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20005fc0 	.word	0x20005fc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8c5 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fab3 	bl	8000afc <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 faeb 	bl	8000b78 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fad6 	bl	8000b54 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f929 	bl	8000810 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa6e 	bl	8000ab0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f937 	bl	800084c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f95a 	bl	800089c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f941 	bl	8000874 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f964 	bl	80008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 faf0 	bl	8000be8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fb15 	bl	8000c38 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fb26 	bl	8000c80 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fb13 	bl	8000c60 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fb20 	bl	8000ca0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f855 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe29 	bl	80002c8 <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0f1b      	lsrs	r3, r3, #28
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	5000440c 	.word	0x5000440c

080006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000700:	f7ff feec 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000704:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000708:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50004600 	.word	0x50004600

0800071c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e007      	b.n	80007c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
  }
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004710 	.word	0x50004710

080007d4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081a:	bf00      	nop
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800081e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000834:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000
 8000848:	50004300 	.word	0x50004300

0800084c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	6053      	str	r3, [r2, #4]
}
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	50004600 	.word	0x50004600

0800095c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	0f1b      	lsrs	r3, r3, #28
 8000968:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000970:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	461a      	mov	r2, r3
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000980:	4413      	add	r3, r2
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	50004648 	.word	0x50004648

08000994 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	0f1b      	lsrs	r3, r3, #28
 80009a0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009a8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009b8:	4413      	add	r3, r2
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4013      	ands	r3, r2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf14      	ite	ne
 80009c4:	2301      	movne	r3, #1
 80009c6:	2300      	moveq	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	50004640 	.word	0x50004640

080009dc <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80009e0:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ea:	f023 0302 	bic.w	r3, r3, #2
 80009ee:	6153      	str	r3, [r2, #20]
}
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	50004710 	.word	0x50004710

080009fc <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a06:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a12:	bf00      	nop
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f9      	beq.n	8000a14 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a2c:	491e      	ldr	r1, [pc, #120]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f023 0310 	bic.w	r3, r3, #16
 8000a54:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a60:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a62:	bf00      	nop
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f9      	beq.n	8000a64 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000a7c:	bf00      	nop
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1f9      	bne.n	8000a7e <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a94:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000a98:	2208      	movs	r2, #8
 8000a9a:	60da      	str	r2, [r3, #12]
}
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	50004710 	.word	0x50004710
 8000aac:	50004160 	.word	0x50004160

08000ab0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ac4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10e      	bne.n	8000aea <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ad6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000ad8:	2064      	movs	r0, #100	; 0x64
 8000ada:	f7ff fd17 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae8:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f7ff fd0e 	bl	800050c <XMC_SCU_lDelay>
}
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	50004710 	.word	0x50004710

08000afc <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d109      	bne.n	8000b20 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b12:	bf00      	nop
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f9      	beq.n	8000b14 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00a      	beq.n	8000b42 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b32:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b34:	bf00      	nop
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1f9      	bne.n	8000b36 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	50004200 	.word	0x50004200
 8000b50:	50004400 	.word	0x50004400

08000b54 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf0c      	ite	eq
 8000b64:	2301      	moveq	r3, #1
 8000b66:	2300      	movne	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	50004300 	.word	0x50004300

08000b78 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b7c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b80:	f7ff fcf2 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b84:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b86:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b8e:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b90:	bf00      	nop
 8000b92:	f7ff fcdd 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f8      	beq.n	8000b92 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000ba0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ba4:	f7ff fce0 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000baa:	2208      	movs	r2, #8
 8000bac:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bae:	bf00      	nop
 8000bb0:	f7ff fcce 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f8      	beq.n	8000bb0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bbe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bc2:	f7ff fcd1 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bd2:	bf00      	nop
 8000bd4:	f7ff fcbc 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f8      	beq.n	8000bd4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	50004300 	.word	0x50004300

08000be8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000be8:	b5b0      	push	{r4, r5, r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000bf8:	4d0d      	ldr	r5, [pc, #52]	; (8000c30 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c02:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c06:	f002 fc05 	bl	8003414 <OSCHP_GetFrequency>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8000c12:	0d1b      	lsrs	r3, r3, #20
 8000c14:	3b01      	subs	r3, #1
 8000c16:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c18:	4323      	orrs	r3, r4
 8000c1a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c1e:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c26:	6053      	str	r3, [r2, #4]
}
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	50004710 	.word	0x50004710
 8000c30:	50004700 	.word	0x50004700
 8000c34:	6b5fca6b 	.word	0x6b5fca6b

08000c38 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c44:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	50004710 	.word	0x50004710

08000c60 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6e:	f023 0302 	bic.w	r3, r3, #2
 8000c72:	6053      	str	r3, [r2, #4]
}
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	50004710 	.word	0x50004710

08000c80 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c84:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	6053      	str	r3, [r2, #4]
}
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	50004710 	.word	0x50004710

08000ca0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60ba      	str	r2, [r7, #8]
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4603      	mov	r3, r0
 8000cac:	81fb      	strh	r3, [r7, #14]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd6d 	bl	8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000cba:	7b7b      	ldrb	r3, [r7, #13]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	f040 808b 	bne.w	8000dd8 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cc2:	89fb      	ldrh	r3, [r7, #14]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cc8:	f002 fba4 	bl	8003414 <OSCHP_GetFrequency>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b54      	ldr	r3, [pc, #336]	; (8000e20 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8000cd4:	0c9b      	lsrs	r3, r3, #18
 8000cd6:	059b      	lsls	r3, r3, #22
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e002      	b.n	8000ce2 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000cdc:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ce0:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb02 f203 	mul.w	r2, r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf0:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	4a4b      	ldr	r2, [pc, #300]	; (8000e24 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	0d9b      	lsrs	r3, r3, #22
 8000cfe:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d00:	4a49      	ldr	r2, [pc, #292]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d0c:	bf00      	nop
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f9      	beq.n	8000d0e <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d1a:	4a43      	ldr	r2, [pc, #268]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d1c:	4b42      	ldr	r3, [pc, #264]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d26:	4940      	ldr	r1, [pc, #256]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d28:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d2e:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	0212      	lsls	r2, r2, #8
 8000d36:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d3e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d46:	4313      	orrs	r3, r2
 8000d48:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d4a:	4a37      	ldr	r2, [pc, #220]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d56:	4a34      	ldr	r2, [pc, #208]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f023 0310 	bic.w	r3, r3, #16
 8000d60:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d62:	4a31      	ldr	r2, [pc, #196]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d64:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d6e:	bf00      	nop
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f9      	beq.n	8000d70 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d88:	bf00      	nop
 8000d8a:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f9      	bne.n	8000d8a <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	0d9b      	lsrs	r3, r3, #22
 8000da2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000da4:	6a3a      	ldr	r2, [r7, #32]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d202      	bcs.n	8000db2 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dac:	6938      	ldr	r0, [r7, #16]
 8000dae:	f000 f845 	bl	8000e3c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	095b      	lsrs	r3, r3, #5
 8000dbe:	0d9b      	lsrs	r3, r3, #22
 8000dc0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dc2:	6a3a      	ldr	r2, [r7, #32]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d202      	bcs.n	8000dd0 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dca:	6938      	ldr	r0, [r7, #16]
 8000dcc:	f000 f836 	bl	8000e3c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000dd0:	6a38      	ldr	r0, [r7, #32]
 8000dd2:	f000 f833 	bl	8000e3c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000dd6:	e01c      	b.n	8000e12 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000dd8:	4913      	ldr	r1, [pc, #76]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000de6:	4313      	orrs	r3, r2
 8000de8:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000dea:	bf00      	nop
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f9      	beq.n	8000dec <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e04:	bf00      	nop
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f9      	beq.n	8000e06 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e14:	2205      	movs	r2, #5
 8000e16:	60da      	str	r2, [r3, #12]
}
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	431bde83 	.word	0x431bde83
 8000e24:	aaaaaaab 	.word	0xaaaaaaab
 8000e28:	50004710 	.word	0x50004710
 8000e2c:	f08080ff 	.word	0xf08080ff
 8000e30:	88888889 	.word	0x88888889
 8000e34:	b60b60b7 	.word	0xb60b60b7
 8000e38:	50004160 	.word	0x50004160

08000e3c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e44:	490b      	ldr	r1, [pc, #44]	; (8000e74 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e54:	4313      	orrs	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e58:	bf00      	nop
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0320 	and.w	r3, r3, #32
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f9      	beq.n	8000e5a <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e66:	2032      	movs	r0, #50	; 0x32
 8000e68:	f7ff fb50 	bl	800050c <XMC_SCU_lDelay>
}
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	50004710 	.word	0x50004710

08000e78 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e86:	60da      	str	r2, [r3, #12]
}
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <XMC_CCU4_lDeassertReset+0x2c>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d103      	bne.n	8000eac <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000ea4:	2004      	movs	r0, #4
 8000ea6:	f7ff fbe9 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000eaa:	e006      	b.n	8000eba <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <XMC_CCU4_lDeassertReset+0x30>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d102      	bne.n	8000eba <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000eb4:	2008      	movs	r0, #8
 8000eb6:	f7ff fbe1 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	4000c000 	.word	0x4000c000
 8000ec4:	40010000 	.word	0x40010000

08000ec8 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <XMC_CCU4_lUngateClock+0x2c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d103      	bne.n	8000ee0 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000ed8:	2004      	movs	r0, #4
 8000eda:	f7ff fd3f 	bl	800095c <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000ede:	e006      	b.n	8000eee <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <XMC_CCU4_lUngateClock+0x30>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d102      	bne.n	8000eee <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000ee8:	2008      	movs	r0, #8
 8000eea:	f7ff fd37 	bl	800095c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	4000c000 	.word	0x4000c000
 8000ef8:	40010000 	.word	0x40010000

08000efc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000f04:	2010      	movs	r0, #16
 8000f06:	f7ff fd19 	bl	800093c <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffdc 	bl	8000ec8 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffbf 	bl	8000e94 <XMC_CCU4_lDeassertReset>
#endif
}
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ffe7 	bl	8000efc <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f40:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	039b      	lsls	r3, r3, #14
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]
}
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	795b      	ldrb	r3, [r3, #5]
 8000f6e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	051a      	lsls	r2, r3, #20
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	461a      	mov	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	795b      	ldrb	r3, [r3, #5]
 8000f8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	795b      	ldrb	r3, [r3, #5]
 8000f9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	791b      	ldrb	r3, [r3, #4]
 8000fae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b0b      	cmp	r3, #11
 8000fd8:	d836      	bhi.n	8001048 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08001011 	.word	0x08001011
 8000fe4:	08001011 	.word	0x08001011
 8000fe8:	0800101b 	.word	0x0800101b
 8000fec:	0800101b 	.word	0x0800101b
 8000ff0:	08001049 	.word	0x08001049
 8000ff4:	08001049 	.word	0x08001049
 8000ff8:	08001049 	.word	0x08001049
 8000ffc:	08001049 	.word	0x08001049
 8001000:	08001025 	.word	0x08001025
 8001004:	08001031 	.word	0x08001031
 8001008:	0800103d 	.word	0x0800103d
 800100c:	0800103d 	.word	0x0800103d
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001010:	2303      	movs	r3, #3
 8001012:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
      break;
 8001018:	e01b      	b.n	8001052 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800101a:	230c      	movs	r3, #12
 800101c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800101e:	2302      	movs	r3, #2
 8001020:	617b      	str	r3, [r7, #20]
      break;
 8001022:	e016      	b.n	8001052 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8001024:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001028:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800102a:	2308      	movs	r3, #8
 800102c:	617b      	str	r3, [r7, #20]
      break;
 800102e:	e010      	b.n	8001052 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001030:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001034:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8001036:	230a      	movs	r3, #10
 8001038:	617b      	str	r3, [r7, #20]
      break;
 800103a:	e00a      	b.n	8001052 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 800103c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001040:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8001042:	230c      	movs	r3, #12
 8001044:	617b      	str	r3, [r7, #20]
      break;
 8001046:	e004      	b.n	8001052 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
	  pos = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
	  break;
 8001050:	bf00      	nop
  }

  if (mask != 0)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800105e:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 800106a:	78ba      	ldrb	r2, [r7, #2]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f8d0 	bl	8001280 <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	795b      	ldrb	r3, [r3, #5]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d115      	bne.n	8001114 <XMC_SPI_CH_InitEx+0x48>
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d012      	beq.n	8001114 <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	791b      	ldrb	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	4619      	mov	r1, r3
 80010fe:	2202      	movs	r2, #2
 8001100:	f000 f96a 	bl	80013d8 <XMC_USIC_CH_SetBaudrateEx>
 8001104:	e006      	b.n	8001114 <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	4619      	mov	r1, r3
 800110e:	2202      	movs	r2, #2
 8001110:	f000 f8f0 	bl	80012f4 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <XMC_SPI_CH_InitEx+0x88>)
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	795b      	ldrb	r3, [r3, #5]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d107      	bne.n	800113a <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 800112e:	f043 030b 	orr.w	r3, r3, #11
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	891b      	ldrh	r3, [r3, #8]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	073f0102 	.word	0x073f0102

08001158 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001166:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <XMC_SPI_CH_DisableSlaveSelect>:

/* Disable the slave signals by clearing (SELO) bits in PCR register. */
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	2101      	movs	r1, #1
 8001190:	f7ff ff8c 	bl	80010ac <XMC_SPI_CH_ClearStatusFlag>

  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001198:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop

080011a8 <XMC_SPI_CH_Transmit>:

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	019b      	lsls	r3, r3, #6
 80011c4:	b2db      	uxtb	r3, r3

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d112      	bne.n	8001200 <XMC_SPI_CH_Transmit+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80011da:	bf00      	nop
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff55 	bl	800108c <XMC_USIC_CH_GetTransmitBufferStatus>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b80      	cmp	r3, #128	; 0x80
 80011e6:	d0f9      	beq.n	80011dc <XMC_SPI_CH_Transmit+0x34>
    {
    }

    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ee:	f7ff ff5d 	bl	80010ac <XMC_SPI_CH_ClearStatusFlag>

    channel->TBUF[mode] = data;
 80011f2:	787a      	ldrb	r2, [r7, #1]
 80011f4:	8879      	ldrh	r1, [r7, #2]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3220      	adds	r2, #32
 80011fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011fe:	e005      	b.n	800120c <XMC_SPI_CH_Transmit+0x64>
  }
  else
  {
    channel->IN[mode] = data;
 8001200:	787a      	ldrb	r2, [r7, #1]
 8001202:	8879      	ldrh	r1, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3260      	adds	r2, #96	; 0x60
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop

08001214 <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001222:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	81fb      	strh	r3, [r7, #14]
 8001230:	e003      	b.n	800123a <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001238:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800123a:	89fb      	ldrh	r3, [r7, #14]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <XMC_SPI_CH_DisableEvent>:
  channel->CCR |= (event & 0x1fc00U);
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	035b      	lsls	r3, r3, #13
 800126c:	b29b      	uxth	r3, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	401a      	ands	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <XMC_USIC_CH_Enable+0x5c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d003      	beq.n	8001298 <XMC_USIC_CH_Enable+0x18>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <XMC_USIC_CH_Enable+0x60>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d103      	bne.n	80012a0 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001298:	4812      	ldr	r0, [pc, #72]	; (80012e4 <XMC_USIC_CH_Enable+0x64>)
 800129a:	f000 f9df 	bl	800165c <XMC_USIC_Enable>
 800129e:	e00a      	b.n	80012b6 <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <XMC_USIC_CH_Enable+0x68>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d003      	beq.n	80012b0 <XMC_USIC_CH_Enable+0x30>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <XMC_USIC_CH_Enable+0x6c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d102      	bne.n	80012b6 <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <XMC_USIC_CH_Enable+0x70>)
 80012b2:	f000 f9d3 	bl	800165c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80012bc:	bf00      	nop
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f023 020f 	bic.w	r2, r3, #15
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40030000 	.word	0x40030000
 80012e0:	40030200 	.word	0x40030200
 80012e4:	40030008 	.word	0x40030008
 80012e8:	48020000 	.word	0x48020000
 80012ec:	48020200 	.word	0x48020200
 80012f0:	48020008 	.word	0x48020008

080012f4 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b63      	cmp	r3, #99	; 0x63
 8001304:	d95a      	bls.n	80013bc <XMC_USIC_CH_SetBaudrate+0xc8>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d057      	beq.n	80013bc <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 800130c:	f7ff f9f6 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001310:	4602      	mov	r2, r0
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001314:	fba3 2302 	umull	r2, r3, r3, r2
 8001318:	095b      	lsrs	r3, r3, #5
 800131a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	095b      	lsrs	r3, r3, #5
 8001326:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 800132e:	2301      	movs	r3, #1
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001332:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001336:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
 800133e:	e022      	b.n	8001386 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001344:	fb02 f203 	mul.w	r2, r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	0a9b      	lsrs	r3, r3, #10
 800135a:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001362:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136a:	d809      	bhi.n	8001380 <XMC_USIC_CH_SetBaudrate+0x8c>
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	429a      	cmp	r2, r3
 8001372:	d205      	bcs.n	8001380 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001382:	3b01      	subs	r3, #1
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
 8001386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1d9      	bne.n	8001340 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001390:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	695a      	ldr	r2, [r3, #20]
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <XMC_USIC_CH_SetBaudrate+0xe0>)
 800139e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	3a01      	subs	r2, #1
 80013a4:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80013a6:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	3b01      	subs	r3, #1
 80013ac:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80013ae:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80013ba:	e002      	b.n	80013c2 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 80013c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3738      	adds	r7, #56	; 0x38
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	51eb851f 	.word	0x51eb851f
 80013d4:	fc0080ef 	.word	0xfc0080ef

080013d8 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80013e4:	f7ff f98a 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80013e8:	4603      	mov	r3, r0
 80013ea:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 80013fa:	6a3a      	ldr	r2, [r7, #32]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dd5f      	ble.n	80014c2 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001402:	6a3a      	ldr	r2, [r7, #32]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	fb92 f3f3 	sdiv	r3, r2, r3
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 800140c:	e010      	b.n	8001430 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	3301      	adds	r3, #1
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	461a      	mov	r2, r3
 800141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001420:	fb03 f302 	mul.w	r3, r3, r2
 8001424:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	fb92 f3f3 	sdiv	r3, r2, r3
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001436:	4293      	cmp	r3, r2
 8001438:	d8e9      	bhi.n	800140e <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 800143a:	6a3a      	ldr	r2, [r7, #32]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001446:	fb01 f303 	mul.w	r3, r1, r3
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001450:	6a3a      	ldr	r2, [r7, #32]
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	3301      	adds	r3, #1
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001472:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	1acb      	subs	r3, r1, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	bfb8      	it	lt
 8001480:	425b      	neglt	r3, r3
 8001482:	429a      	cmp	r2, r3
 8001484:	da02      	bge.n	800148c <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	3301      	adds	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 80014a4:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	3a01      	subs	r2, #1
 80014aa:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 80014ac:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	3b01      	subs	r3, #1
 80014b2:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80014b4:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014c0:	e002      	b.n	80014c8 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 80014c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3730      	adds	r7, #48	; 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	fc0080ef 	.word	0xfc0080ef

080014d8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001500:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	0211      	lsls	r1, r2, #8
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800150e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8001510:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	f8ffc0c0 	.word	0xf8ffc0c0

08001528 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800153e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001550:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	0211      	lsls	r1, r2, #8
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 800155e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001560:	4313      	orrs	r3, r2
 8001562:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	efffc0c0 	.word	0xefffc0c0

0800157c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	460b      	mov	r3, r1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001590:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	460b      	mov	r3, r1
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	699a      	ldr	r2, [r3, #24]
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	2107      	movs	r1, #7
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	460b      	mov	r3, r1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	2107      	movs	r1, #7
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001604:	7afb      	ldrb	r3, [r7, #11]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800160c:	431a      	orrs	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	460b      	mov	r3, r1
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001634:	7afb      	ldrb	r3, [r7, #11]
 8001636:	2107      	movs	r1, #7
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001648:	431a      	orrs	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (service_request << (uint32_t)interrupt_node));
}
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <XMC_USIC_Enable+0x78>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d118      	bne.n	800169e <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 800166c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001670:	f7ff f974 	bl	800095c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001674:	bf00      	nop
 8001676:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800167a:	f7ff f98b 	bl	8000994 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f8      	bne.n	8001676 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001684:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001688:	f7fe fff8 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 800168c:	bf00      	nop
 800168e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001692:	f7ff f80f 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f8      	bne.n	800168e <XMC_USIC_Enable+0x32>
 800169c:	e017      	b.n	80016ce <XMC_USIC_Enable+0x72>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <XMC_USIC_Enable+0x7c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d113      	bne.n	80016ce <XMC_USIC_Enable+0x72>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <XMC_USIC_Enable+0x80>)
 80016a8:	f7ff f958 	bl	800095c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 80016ac:	bf00      	nop
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <XMC_USIC_Enable+0x80>)
 80016b0:	f7ff f970 	bl	8000994 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80016ba:	4808      	ldr	r0, [pc, #32]	; (80016dc <XMC_USIC_Enable+0x80>)
 80016bc:	f7fe ffde 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 80016c0:	bf00      	nop
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <XMC_USIC_Enable+0x80>)
 80016c4:	f7fe fff6 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <XMC_USIC_Enable+0x66>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40030008 	.word	0x40030008
 80016d8:	48020008 	.word	0x48020008
 80016dc:	10000080 	.word	0x10000080

080016e0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	2201      	movs	r2, #1
 80016fc:	409a      	lsls	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60da      	str	r2, [r3, #12]
}
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	60da      	str	r2, [r3, #12]
}
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	611a      	str	r2, [r3, #16]
}
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8001748:	887a      	ldrh	r2, [r7, #2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	611a      	str	r2, [r3, #16]
}
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d104      	bne.n	80017ec <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f808 	bl	80017f8 <TIMER_CCU4_lInit>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop

080017f8 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fd61 	bl	80032cc <GLOBAL_CCU4_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7e1b      	ldrb	r3, [r3, #24]
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff ff66 	bl	80016ec <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff fb94 	bl	8000f58 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f82d 	bl	8001890 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00f      	beq.n	8001860 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800184a:	4610      	mov	r0, r2
 800184c:	2100      	movs	r1, #0
 800184e:	461a      	mov	r2, r3
 8001850:	f7ff fbb8 	bl	8000fc4 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4618      	mov	r0, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f7ff ff98 	bl	8001790 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff5d 	bl	8001724 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff43 	bl	800170c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff ff4a 	bl	800173c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	4618      	mov	r0, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	f7ff ff52 	bl	8001758 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff ff57 	bl	8001774 <XMC_CCU4_EnableShadowTransfer>
}
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018d8:	0a1b      	lsrs	r3, r3, #8
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	490d      	ldr	r1, [pc, #52]	; (8001934 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	4909      	ldr	r1, [pc, #36]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
  }
}
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b06      	cmp	r3, #6
 8001958:	bf28      	it	cs
 800195a:	2306      	movcs	r3, #6
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3306      	adds	r3, #6
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b01      	subs	r3, #1
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2201      	movs	r2, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	401a      	ands	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	1e59      	subs	r1, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001990:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	f04f 30ff 	mov.w	r0, #4294967295
 80019c2:	213f      	movs	r1, #63	; 0x3f
 80019c4:	f7ff ff90 	bl	80018e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 80019e4:	b490      	push	{r4, r7}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 80019f0:	496b      	ldr	r1, [pc, #428]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	3318      	adds	r3, #24
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8001a04:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4a62      	ldr	r2, [pc, #392]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a62      	ldr	r2, [pc, #392]	; (8001ba4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e0bb      	b.n	8001b98 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8001a20:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8001a2a:	e0ab      	b.n	8001b84 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	461a      	mov	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dc7a      	bgt.n	8001b34 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d026      	beq.n	8001a94 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a56:	4413      	add	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	4850      	ldr	r0, [pc, #320]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4403      	add	r3, r0
 8001a6c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8001a6e:	494c      	ldr	r1, [pc, #304]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4a45      	ldr	r2, [pc, #276]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a8c:	441a      	add	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	e01c      	b.n	8001ace <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8001a94:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	4841      	ldr	r0, [pc, #260]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4403      	add	r3, r0
 8001aa6:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4a3a      	ldr	r2, [pc, #232]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4a36      	ldr	r2, [pc, #216]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <SYSTIMER_lInsertTimerList+0x1c0>)
 8001acc:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8001ace:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	18d1      	adds	r1, r2, r3
 8001ae4:	482e      	ldr	r0, [pc, #184]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4403      	add	r3, r0
 8001af2:	3318      	adds	r3, #24
 8001af4:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8001af6:	492a      	ldr	r1, [pc, #168]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	6819      	ldr	r1, [r3, #0]
 8001b06:	4826      	ldr	r0, [pc, #152]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4403      	add	r3, r0
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6998      	ldr	r0, [r3, #24]
 8001b18:	4c21      	ldr	r4, [pc, #132]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4423      	add	r3, r4
 8001b26:	3318      	adds	r3, #24
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1ac3      	subs	r3, r0, r3
 8001b2c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e024      	b.n	8001b7e <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dd21      	ble.n	8001b7e <SYSTIMER_lInsertTimerList+0x19a>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d11d      	bne.n	8001b7e <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8001b42:	4917      	ldr	r1, [pc, #92]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001b60:	441a      	add	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8001b66:	6939      	ldr	r1, [r7, #16]
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4403      	add	r3, r0
 8001b76:	3318      	adds	r3, #24
 8001b78:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <SYSTIMER_lInsertTimerList+0x1b4>
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	f083 0301 	eor.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f af4a 	bne.w	8001a2c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc90      	pop	{r4, r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	1fffd9a4 	.word	0x1fffd9a4
 8001ba4:	1fffc974 	.word	0x1fffc974

08001ba8 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <SYSTIMER_lRemoveTimerList+0xb8>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <SYSTIMER_lRemoveTimerList+0x30>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d103      	bne.n	8001bd8 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e03d      	b.n	8001c54 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d114      	bne.n	8001c0a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001be6:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <SYSTIMER_lRemoveTimerList+0xbc>)
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	6991      	ldr	r1, [r2, #24]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	6992      	ldr	r2, [r2, #24]
 8001bfe:	440a      	add	r2, r1
 8001c00:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e024      	b.n	8001c54 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d107      	bne.n	8001c22 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	e018      	b.n	8001c54 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	6852      	ldr	r2, [r2, #4]
 8001c34:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	6991      	ldr	r1, [r2, #24]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	6992      	ldr	r2, [r2, #24]
 8001c44:	440a      	add	r2, r1
 8001c46:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  }
}
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	1fffd9a4 	.word	0x1fffd9a4
 8001c64:	1fffc974 	.word	0x1fffc974

08001c68 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <SYSTIMER_lTimerHandler+0xc4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001c74:	e050      	b.n	8001d18 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff8f 	bl	8001ba8 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	461a      	mov	r2, r3
 8001c96:	2301      	movs	r3, #1
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <SYSTIMER_lTimerHandler+0xc8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <SYSTIMER_lTimerHandler+0xc8>)
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e034      	b.n	8001d12 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7b1b      	ldrb	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d112      	bne.n	8001cd6 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b5b      	ldrb	r3, [r3, #13]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d12c      	bne.n	8001d12 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff73 	bl	8001ba8 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6912      	ldr	r2, [r2, #16]
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4798      	blx	r3
 8001cd4:	e01d      	b.n	8001d12 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7b1b      	ldrb	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d118      	bne.n	8001d10 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7b5b      	ldrb	r3, [r3, #13]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d115      	bne.n	8001d12 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff5c 	bl	8001ba8 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fe71 	bl	80019e4 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6912      	ldr	r2, [r2, #16]
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4798      	blx	r3
 8001d0e:	e000      	b.n	8001d12 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8001d10:	e009      	b.n	8001d26 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SYSTIMER_lTimerHandler+0xc4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <SYSTIMER_lTimerHandler+0xbe>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0a7      	beq.n	8001c76 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	1fffc974 	.word	0x1fffc974
 8001d30:	1fffc978 	.word	0x1fffc978

08001d34 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <SysTick_Handler+0x40>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <SysTick_Handler+0x44>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <SysTick_Handler+0x44>)
 8001d48:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00e      	beq.n	8001d6e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d905      	bls.n	8001d64 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	1e5a      	subs	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
 8001d62:	e004      	b.n	8001d6e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8001d6a:	f7ff ff7d 	bl	8001c68 <SYSTIMER_lTimerHandler>
    }
  }
}
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	1fffc974 	.word	0x1fffc974
 8001d78:	1fffc97c 	.word	0x1fffc97c

08001d7c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	f083 0301 	eor.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d020      	beq.n	8001dd8 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <SYSTIMER_Init+0x68>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <SYSTIMER_Init+0x6c>)
 8001d9e:	f7ff fdff 	bl	80019a0 <SysTick_Config>
 8001da2:	4603      	mov	r3, r0
 8001da4:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d015      	beq.n	8001dd8 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8001dac:	f7ff fd8e 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	213f      	movs	r1, #63	; 0x3f
 8001db6:	2200      	movs	r2, #0
 8001db8:	f7ff fdc0 	bl	800193c <NVIC_EncodePriority>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7ff fd90 	bl	80018e8 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <SYSTIMER_Init+0x70>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	1fffc974 	.word	0x1fffc974
 8001de8:	00013880 	.word	0x00013880
 8001dec:	1fffc978 	.word	0x1fffc978

08001df0 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t transmit_control_information)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 8001dfe:	8979      	ldrh	r1, [r7, #10]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	3220      	adds	r2, #32
 8001e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop

08001e58 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e6a:	b2db      	uxtb	r3, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e84:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop

08001f00 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
    const uint16_t data,
    const uint32_t frame_length)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 8001f0e:	8979      	ldrh	r1, [r7, #10]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	3260      	adds	r2, #96	; 0x60
 8001f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f32:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop

08001fdc <XMC_USIC_CH_RXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	019b      	lsls	r3, r3, #6
 8002038:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop

0800204c <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4798      	blx	r3
 800205c:	4603      	mov	r3, r0
 800205e:	73fb      	strb	r3, [r7, #15]

  return status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8002078:	2301      	movs	r3, #1
 800207a:	75fb      	strb	r3, [r7, #23]

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	f000 f821 	bl	80020d4 <SPI_MASTER_StartTransmitIRQ>
 8002092:	4603      	mov	r3, r0
 8002094:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 80020ac:	2301      	movs	r3, #1
 80020ae:	75fb      	strb	r3, [r7, #23]

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	f000 f87d 	bl	80021c0 <SPI_MASTER_StartReceiveIRQ>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <SPI_MASTER_StartTransmitIRQ>:
#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 80020e0:	2301      	movs	r3, #1
 80020e2:	61bb      	str	r3, [r7, #24]
                                                           Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 80020e4:	2304      	movs	r3, #4
 80020e6:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d15c      	bne.n	80021b4 <SPI_MASTER_StartTransmitIRQ+0xe0>
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d057      	beq.n	80021b0 <SPI_MASTER_StartTransmitIRQ+0xdc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d054      	beq.n	80021b0 <SPI_MASTER_StartTransmitIRQ+0xdc>
    {
      status = SPI_MASTER_STATUS_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	77fb      	strb	r3, [r7, #31]
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f083 0301 	eor.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d048      	beq.n	80021ae <SPI_MASTER_StartTransmitIRQ+0xda>
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d901      	bls.n	800212a <SPI_MASTER_StartTransmitIRQ+0x56>
        {
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	3b01      	subs	r3, #1
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	fa03 f202 	lsl.w	r2, r3, r2
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2020 	strb.w	r2, [r3, #32]

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <SPI_MASTER_StartTransmitIRQ+0xa0>
        {
          /* Flush the Transmit FIFO */
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fee0 	bl	8001f24 <XMC_USIC_CH_TXFIFO_Flush>
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800216e:	f7ff fea1 	bl	8001eb4 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8002172:	e006      	b.n	8002182 <SPI_MASTER_StartTransmitIRQ+0xae>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800217e:	f7ff fe49 	bl	8001e14 <XMC_USIC_CH_EnableEvent>
        }
        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	7f1b      	ldrb	r3, [r3, #28]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7ff ff46 	bl	8002020 <XMC_SPI_CH_SetTransmitMode>
        status = SPI_MASTER_STATUS_SUCCESS;
 8002194:	2300      	movs	r3, #0
 8002196:	77fb      	strb	r3, [r7, #31]

        /* Trigger the transmit buffer interrupt */
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7ff fe74 	bl	8001e94 <XMC_USIC_CH_TriggerServiceRequest>
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 80021ac:	e002      	b.n	80021b4 <SPI_MASTER_StartTransmitIRQ+0xe0>
 80021ae:	e001      	b.n	80021b4 <SPI_MASTER_StartTransmitIRQ+0xe0>
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80021b0:	2303      	movs	r3, #3
 80021b2:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 80021b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop

080021c0 <SPI_MASTER_StartReceiveIRQ>:
#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
/*
 * Receive the specified the number of data words.
 */
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 80021cc:	2304      	movs	r3, #4
 80021ce:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d136      	bne.n	8002250 <SPI_MASTER_StartReceiveIRQ+0x90>
  {
    status = SPI_MASTER_STATUS_BUSY;
 80021e2:	2302      	movs	r3, #2
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02f      	beq.n	800224c <SPI_MASTER_StartReceiveIRQ+0x8c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02c      	beq.n	800224c <SPI_MASTER_StartReceiveIRQ+0x8c>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	7fdb      	ldrb	r3, [r3, #31]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d023      	beq.n	800224a <SPI_MASTER_StartReceiveIRQ+0x8a>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f083 0301 	eor.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01a      	beq.n	800224a <SPI_MASTER_StartReceiveIRQ+0x8a>
      {
        runtime_handle->rx_busy = true;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2201      	movs	r2, #1
 8002218:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <SPI_MASTER_StartReceiveIRQ+0x9c>)
 8002224:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveIRQ(handle, count);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f000 f8f2 	bl	8002428 <SPI_MASTER_lReceiveIRQ>
 8002244:	4603      	mov	r3, r0
 8002246:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8002248:	e002      	b.n	8002250 <SPI_MASTER_StartReceiveIRQ+0x90>
 800224a:	e001      	b.n	8002250 <SPI_MASTER_StartReceiveIRQ+0x90>

      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800224c:	2303      	movs	r3, #3
 800224e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8002250:	7dfb      	ldrb	r3, [r7, #23]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	1fffc848 	.word	0x1fffc848

08002260 <SPI_MASTER_lTransmitHandler>:
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
 8002268:	2301      	movs	r3, #1
 800226a:	613b      	str	r3, [r7, #16]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60fb      	str	r3, [r7, #12]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b08      	cmp	r3, #8
 800227a:	d901      	bls.n	8002280 <SPI_MASTER_lTransmitHandler+0x20>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800227c:	2302      	movs	r3, #2
 800227e:	613b      	str	r3, [r7, #16]
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	f080 808b 	bcs.w	80023a4 <SPI_MASTER_lTransmitHandler+0x144>
  {
    data = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	82fb      	strh	r3, [r7, #22]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d04b      	beq.n	8002336 <SPI_MASTER_lTransmitHandler+0xd6>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 800229e:	e03e      	b.n	800231e <SPI_MASTER_lTransmitHandler+0xbe>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d236      	bcs.n	800231a <SPI_MASTER_lTransmitHandler+0xba>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <SPI_MASTER_lTransmitHandler+0x70>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	7f1b      	ldrb	r3, [r3, #28]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7ff fe19 	bl	8001f00 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 80022ce:	e01d      	b.n	800230c <SPI_MASTER_lTransmitHandler+0xac>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d107      	bne.n	80022e6 <SPI_MASTER_lTransmitHandler+0x86>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4413      	add	r3, r2
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	82fb      	strh	r3, [r7, #22]
 80022e4:	e006      	b.n	80022f4 <SPI_MASTER_lTransmitHandler+0x94>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	82fb      	strh	r3, [r7, #22]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	7f1b      	ldrb	r3, [r3, #28]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461c      	mov	r4, r3
 8002300:	8afb      	ldrh	r3, [r7, #22]
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	4622      	mov	r2, r4
 8002308:	f7ff fdfa 	bl	8001f00 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	e001      	b.n	800231e <SPI_MASTER_lTransmitHandler+0xbe>
        }
        else
        {
          break;
 800231a:	bf00      	nop
 800231c:	e080      	b.n	8002420 <SPI_MASTER_lTransmitHandler+0x1c0>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe0c 	bl	8001f40 <XMC_USIC_CH_TXFIFO_IsFull>
 8002328:	4603      	mov	r3, r0
 800232a:	f083 0301 	eor.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1b5      	bne.n	80022a0 <SPI_MASTER_lTransmitHandler+0x40>
 8002334:	e074      	b.n	8002420 <SPI_MASTER_lTransmitHandler+0x1c0>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <SPI_MASTER_lTransmitHandler+0xfa>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	7f1b      	ldrb	r3, [r3, #28]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002352:	461a      	mov	r2, r3
 8002354:	f7ff fd4c 	bl	8001df0 <XMC_USIC_CH_WriteToTBUFTCI>
 8002358:	e01d      	b.n	8002396 <SPI_MASTER_lTransmitHandler+0x136>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <SPI_MASTER_lTransmitHandler+0x110>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4413      	add	r3, r2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	82fb      	strh	r3, [r7, #22]
 800236e:	e006      	b.n	800237e <SPI_MASTER_lTransmitHandler+0x11e>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4413      	add	r3, r2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	82fb      	strh	r3, [r7, #22]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	7f1b      	ldrb	r3, [r3, #28]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461c      	mov	r4, r3
 800238a:	8afb      	ldrh	r3, [r7, #22]
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	4622      	mov	r2, r4
 8002392:	f7ff fd2d 	bl	8001df0 <XMC_USIC_CH_WriteToTBUFTCI>
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	441a      	add	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	e03d      	b.n	8002420 <SPI_MASTER_lTransmitHandler+0x1c0>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fddd 	bl	8001f68 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d035      	beq.n	8002420 <SPI_MASTER_lTransmitHandler+0x1c0>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <SPI_MASTER_lTransmitHandler+0x170>
      {
        /* Clear the transmit FIFO event */
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023ca:	f7ff fd85 	bl	8001ed8 <XMC_USIC_CH_TXFIFO_DisableEvent>
 80023ce:	e006      	b.n	80023de <SPI_MASTER_lTransmitHandler+0x17e>
      }
      else
      {
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023da:	f7ff fd2b 	bl	8001e34 <XMC_USIC_CH_DisableEvent>
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80023de:	bf00      	nop
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fd37 	bl	8001e58 <XMC_USIC_CH_GetTransmitBufferStatus>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b80      	cmp	r3, #128	; 0x80
 80023ee:	d0f7      	beq.n	80023e0 <SPI_MASTER_lTransmitHandler+0x180>
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data = NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <SPI_MASTER_lTransmitHandler+0x1c0>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	7fdb      	ldrb	r3, [r3, #31]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f083 0301 	eor.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <SPI_MASTER_lTransmitHandler+0x1c0>
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4798      	blx	r3
      }
    }
  }
}
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop

08002428 <SPI_MASTER_lReceiveIRQ>:
#endif

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]

  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 8002432:	2301      	movs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	613b      	str	r3, [r7, #16]
  runtime_handle->rx_data_index = 0U;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d901      	bls.n	8002450 <SPI_MASTER_lReceiveIRQ+0x28>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800244c:	2302      	movs	r3, #2
 800244e:	617b      	str	r3, [r7, #20]
  }

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3b01      	subs	r3, #1
 8002454:	461a      	mov	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	fa03 f202 	lsl.w	r2, r3, r2
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	60da      	str	r2, [r3, #12]

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002468:	2b00      	cmp	r3, #0
 800246a:	d017      	beq.n	800249c <SPI_MASTER_lReceiveIRQ+0x74>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fdb3 	bl	8001fdc <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f996 	bl	80027ac <SPI_MASTER_lStdRBUFFlush>

    /* Configure the FIFO trigger limit based on the required data size */
    SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4619      	mov	r1, r3
 8002488:	f000 f958 	bl	800273c <SPI_MASTER_lReconfigureRxFIFO>

    /* Enable the receive FIFO events */
    XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002496:	f7ff fd7b 	bl	8001f90 <XMC_USIC_CH_RXFIFO_EnableEvent>
 800249a:	e00b      	b.n	80024b4 <SPI_MASTER_lReceiveIRQ+0x8c>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f983 	bl	80027ac <SPI_MASTER_lStdRBUFFlush>

    /* Enable the standard receive events */
    XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80024b0:	f7ff fcb0 	bl	8001e14 <XMC_USIC_CH_EnableEvent>
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	f7ff fdd3 	bl	800206c <SPI_MASTER_Transmit>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
 80024dc:	2301      	movs	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	613b      	str	r3, [r7, #16]

  data = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	81fb      	strh	r3, [r7, #14]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d901      	bls.n	80024f8 <SPI_MASTER_lReceiveHandler+0x24>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80024f4:	2302      	movs	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01d      	beq.n	8002540 <SPI_MASTER_lReceiveHandler+0x6c>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	6979      	ldr	r1, [r7, #20]
 8002508:	f000 f8b6 	bl	8002678 <SPI_MASTER_lFIFORead>
    /* Reconfigure the RXFIFO trigger limit based on pending receive bytes */
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= (1UL << (handle->config->rx_fifo_size - 1)))
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800251e:	3b01      	subs	r3, #1
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	429a      	cmp	r2, r3
 8002528:	f200 80a2 	bhi.w	8002670 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4619      	mov	r1, r3
 800253a:	f000 f8ff 	bl	800273c <SPI_MASTER_lReconfigureRxFIFO>
 800253e:	e097      	b.n	8002670 <SPI_MASTER_lReceiveHandler+0x19c>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fc97 	bl	8001e78 <XMC_USIC_CH_GetReceiveBufferStatus>
 800254a:	4603      	mov	r3, r0
 800254c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d028      	beq.n	80025a6 <SPI_MASTER_lReceiveHandler+0xd2>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d222      	bcs.n	80025a6 <SPI_MASTER_lReceiveHandler+0xd2>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fe55 	bl	8001214 <XMC_SPI_CH_GetReceivedData>
 800256a:	4603      	mov	r3, r0
 800256c:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	4413      	add	r3, r2
 8002578:	89fa      	ldrh	r2, [r7, #14]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d10a      	bne.n	800259a <SPI_MASTER_lReceiveHandler+0xc6>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	3301      	adds	r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	89fa      	ldrh	r2, [r7, #14]
 8002592:	0a12      	lsrs	r2, r2, #8
 8002594:	b292      	uxth	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	441a      	add	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	611a      	str	r2, [r3, #16]
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fc64 	bl	8001e78 <XMC_USIC_CH_GetReceiveBufferStatus>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d028      	beq.n	800260c <SPI_MASTER_lReceiveHandler+0x138>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d222      	bcs.n	800260c <SPI_MASTER_lReceiveHandler+0x138>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fe22 	bl	8001214 <XMC_SPI_CH_GetReceivedData>
 80025d0:	4603      	mov	r3, r0
 80025d2:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	89fa      	ldrh	r2, [r7, #14]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d10a      	bne.n	8002600 <SPI_MASTER_lReceiveHandler+0x12c>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	3301      	adds	r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	89fa      	ldrh	r2, [r7, #14]
 80025f8:	0a12      	lsrs	r2, r2, #8
 80025fa:	b292      	uxth	r2, r2
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	441a      	add	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d12b      	bne.n	8002670 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <SPI_MASTER_lReceiveHandler+0x160>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800262e:	f7ff fcc1 	bl	8001fb4 <XMC_USIC_CH_RXFIFO_DisableEvent>
 8002632:	e006      	b.n	8002642 <SPI_MASTER_lReceiveHandler+0x16e>
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800263e:	f7fe fe03 	bl	8001248 <XMC_SPI_CH_DisableEvent>
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2200      	movs	r2, #0
 8002646:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = true;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      runtime_handle->rx_data = NULL;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]

      if (handle->config->rx_cbhandler != NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <SPI_MASTER_lReceiveHandler+0x19c>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266e:	4798      	blx	r3
      }
    }
  }
}
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop

08002678 <SPI_MASTER_lFIFORead>:

/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	817b      	strh	r3, [r7, #10]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 800268c:	e047      	b.n	800271e <SPI_MASTER_lFIFORead+0xa6>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	429a      	cmp	r2, r3
 8002698:	d222      	bcs.n	80026e0 <SPI_MASTER_lFIFORead+0x68>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fdb8 	bl	8001214 <XMC_SPI_CH_GetReceivedData>
 80026a4:	4603      	mov	r3, r0
 80026a6:	817b      	strh	r3, [r7, #10]
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4413      	add	r3, r2
 80026b2:	897a      	ldrh	r2, [r7, #10]
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d10a      	bne.n	80026d4 <SPI_MASTER_lFIFORead+0x5c>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	3301      	adds	r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	897a      	ldrh	r2, [r7, #10]
 80026cc:	0a12      	lsrs	r2, r2, #8
 80026ce:	b292      	uxth	r2, r2
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	441a      	add	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d118      	bne.n	800271e <SPI_MASTER_lFIFORead+0xa6>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002704:	f7ff fc56 	bl	8001fb4 <XMC_USIC_CH_RXFIFO_DisableEvent>
      if (handle->config->rx_cbhandler != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <SPI_MASTER_lFIFORead+0xa4>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	4798      	blx	r3
      }
      break;
 800271a:	e00b      	b.n	8002734 <SPI_MASTER_lFIFORead+0xbc>
 800271c:	e00a      	b.n	8002734 <SPI_MASTER_lFIFORead+0xbc>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fc68 	bl	8001ff8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002728:	4603      	mov	r3, r0
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ac      	bne.n	800268e <SPI_MASTER_lFIFORead+0x16>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop

0800273c <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800274e:	2b00      	cmp	r3, #0
 8002750:	d028      	beq.n	80027a4 <SPI_MASTER_lReconfigureRxFIFO+0x68>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d025      	beq.n	80027a4 <SPI_MASTER_lReconfigureRxFIFO+0x68>
  {
	fifo_size = 1UL << (handle->config->rx_fifo_size - 1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002760:	3b01      	subs	r3, #1
 8002762:	2201      	movs	r2, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d902      	bls.n	800277a <SPI_MASTER_lReconfigureRxFIFO+0x3e>
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	603b      	str	r3, [r7, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size <= fifo_size)
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	d803      	bhi.n	800278a <SPI_MASTER_lReconfigureRxFIFO+0x4e>
	{
	  ret_limit_val = data_size - 1U;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3b01      	subs	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e001      	b.n	800278e <SPI_MASTER_lReconfigureRxFIFO+0x52>
	}
	else
	{
	  ret_limit_val = fifo_size;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	60fb      	str	r3, [r7, #12]
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f7fe feec 	bl	800157c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop

080027ac <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7fe fd2d 	bl	8001214 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fd2a 	bl	8001214 <XMC_SPI_CH_GetReceivedData>
}
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop

080027c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027d4:	0a1b      	lsrs	r3, r3, #8
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	db0b      	blt.n	800280e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_EnableIRQ+0x34>)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2001      	movs	r0, #1
 8002806:	fa00 f202 	lsl.w	r2, r0, r2
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	490d      	ldr	r1, [pc, #52]	; (8002868 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	4909      	ldr	r1, [pc, #36]	; (800286c <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
  }
}
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b06      	cmp	r3, #6
 800288c:	bf28      	it	cs
 800288e:	2306      	movcs	r3, #6
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3306      	adds	r3, #6
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b01      	subs	r3, #1
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2201      	movs	r2, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	401a      	ands	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	1e59      	subs	r1, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80028c4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
 80028e0:	4613      	mov	r3, r2
 80028e2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80028e4:	78f8      	ldrb	r0, [r7, #3]
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	3306      	adds	r3, #6
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80028f6:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80028f8:	431a      	orrs	r2, r3
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	1d83      	adds	r3, r0, #6
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	3b01      	subs	r3, #1
 8002928:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 800297c:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 800297e:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop

08002994 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f023 020f 	bic.w	r2, r3, #15
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop

080029bc <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	6839      	ldr	r1, [r7, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f7fe fb7e 	bl	80010cc <XMC_SPI_CH_InitEx>
}
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop

080029d8 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	2101      	movs	r1, #1
 80029e4:	f7ff ffd6 	bl	8002994 <XMC_USIC_CH_SetMode>
}
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop

080029f0 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop

08002a10 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	f7ff ff8b 	bl	8002968 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7ff ff51 	bl	8002910 <XMC_USIC_CH_SetWordLength>
}
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7ff ff59 	bl	800293c <XMC_USIC_CH_SetFrameLength>
}
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8002aa0:	78f8      	ldrb	r0, [r7, #3]
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	3306      	adds	r3, #6
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8002ab2:	f043 0210 	orr.w	r2, r3, #16
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	1d83      	adds	r3, r0, #6
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8002ac0:	78fa      	ldrb	r2, [r7, #3]
 8002ac2:	78bb      	ldrb	r3, [r7, #2]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f7ff ff03 	bl	80028d4 <XMC_USIC_CH_SetInputSource>
}
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8002ada:	2300      	movs	r3, #0
 8002adc:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH1, &SPI_MASTER_0_Channel_Config);
 8002ade:	483f      	ldr	r0, [pc, #252]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002ae0:	493f      	ldr	r1, [pc, #252]	; (8002be0 <SPI_MASTER_0_lInit+0x10c>)
 8002ae2:	f7ff ff6b 	bl	80029bc <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH1);
 8002ae6:	483d      	ldr	r0, [pc, #244]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002ae8:	f7ff ff82 	bl	80029f0 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH1, (uint8_t)8);
 8002aec:	483b      	ldr	r0, [pc, #236]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002aee:	2108      	movs	r1, #8
 8002af0:	f7ff ffb2 	bl	8002a58 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH1, (uint8_t)64);
 8002af4:	4839      	ldr	r0, [pc, #228]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002af6:	2140      	movs	r1, #64	; 0x40
 8002af8:	f7ff ffbc 	bl	8002a74 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH1,
 8002afc:	4837      	ldr	r0, [pc, #220]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002afe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b02:	2200      	movs	r2, #0
 8002b04:	f7ff ff9a 	bl	8002a3c <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH1, 2U);
 8002b08:	4834      	ldr	r0, [pc, #208]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	f7ff ff80 	bl	8002a10 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)0, &SPI_MASTER_0_MISO_Config.port_config);
 8002b10:	4834      	ldr	r0, [pc, #208]	; (8002be4 <SPI_MASTER_0_lInit+0x110>)
 8002b12:	2100      	movs	r1, #0
 8002b14:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <SPI_MASTER_0_lInit+0x114>)
 8002b16:	f7fd fc41 	bl	800039c <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_D);
 8002b1a:	4830      	ldr	r0, [pc, #192]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2203      	movs	r2, #3
 8002b20:	f7ff ffb6 	bl	8002a90 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH1);
 8002b24:	482d      	ldr	r0, [pc, #180]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b26:	f7ff ff57 	bl	80029d8 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)9, &SPI_MASTER_0_MOSI_Config.port_config);
 8002b2a:	4830      	ldr	r0, [pc, #192]	; (8002bec <SPI_MASTER_0_lInit+0x118>)
 8002b2c:	2109      	movs	r1, #9
 8002b2e:	4a30      	ldr	r2, [pc, #192]	; (8002bf0 <SPI_MASTER_0_lInit+0x11c>)
 8002b30:	f7fd fc34 	bl	800039c <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)8, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 8002b34:	482d      	ldr	r0, [pc, #180]	; (8002bec <SPI_MASTER_0_lInit+0x118>)
 8002b36:	2108      	movs	r1, #8
 8002b38:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <SPI_MASTER_0_lInit+0x120>)
 8002b3a:	f7fd fc2f 	bl	800039c <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)7, &SPI_MASTER_0_SS_0_Config.port_config);
 8002b3e:	482b      	ldr	r0, [pc, #172]	; (8002bec <SPI_MASTER_0_lInit+0x118>)
 8002b40:	2107      	movs	r1, #7
 8002b42:	4a2d      	ldr	r2, [pc, #180]	; (8002bf8 <SPI_MASTER_0_lInit+0x124>)
 8002b44:	f7fd fc2a 	bl	800039c <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH1, XMC_SPI_CH_SLAVE_SELECT_2);
 8002b48:	4824      	ldr	r0, [pc, #144]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b4a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002b4e:	f7fe fb03 	bl	8001158 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH1,
 8002b52:	4822      	ldr	r0, [pc, #136]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b54:	2110      	movs	r1, #16
 8002b56:	2202      	movs	r2, #2
 8002b58:	f7fe fd28 	bl	80015ac <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI1_CH1,
 8002b5c:	481f      	ldr	r0, [pc, #124]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b5e:	2110      	movs	r1, #16
 8002b60:	2204      	movs	r2, #4
 8002b62:	2301      	movs	r3, #1
 8002b64:	f7fe fcb8 	bl	80014d8 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
 8002b68:	481c      	ldr	r0, [pc, #112]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b6a:	2110      	movs	r1, #16
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f7fe fd39 	bl	80015e4 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_1);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI1_CH1,
 8002b72:	481a      	ldr	r0, [pc, #104]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b74:	2100      	movs	r1, #0
 8002b76:	2204      	movs	r2, #4
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f7fe fcd5 	bl	8001528 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
 8002b7e:	4817      	ldr	r0, [pc, #92]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b80:	2110      	movs	r1, #16
 8002b82:	2200      	movs	r2, #0
 8002b84:	f7fe fd4c 	bl	8001620 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI1_CH1,
 8002b88:	4814      	ldr	r0, [pc, #80]	; (8002bdc <SPI_MASTER_0_lInit+0x108>)
 8002b8a:	2113      	movs	r1, #19
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f7fe fd47 	bl	8001620 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_0);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)91, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 8002b92:	f7ff fe19 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	213f      	movs	r1, #63	; 0x3f
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f7ff fe67 	bl	8002870 <NVIC_EncodePriority>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	205b      	movs	r0, #91	; 0x5b
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7ff fe38 	bl	800281c <__NVIC_SetPriority>
     
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)91);
 8002bac:	205b      	movs	r0, #91	; 0x5b
 8002bae:	f7ff fe19 	bl	80027e4 <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)90, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 8002bb2:	f7ff fe09 	bl	80027c8 <__NVIC_GetPriorityGrouping>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	213e      	movs	r1, #62	; 0x3e
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f7ff fe57 	bl	8002870 <NVIC_EncodePriority>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	205a      	movs	r0, #90	; 0x5a
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7ff fe28 	bl	800281c <__NVIC_SetPriority>
    
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)90);
 8002bcc:	205a      	movs	r0, #90	; 0x5a
 8002bce:	f7ff fe09 	bl	80027e4 <__NVIC_EnableIRQ>
    
  return status;
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	48020200 	.word	0x48020200
 8002be0:	1fffc860 	.word	0x1fffc860
 8002be4:	48028000 	.word	0x48028000
 8002be8:	1fffc984 	.word	0x1fffc984
 8002bec:	48028100 	.word	0x48028100
 8002bf0:	1fffc84c 	.word	0x1fffc84c
 8002bf4:	0800b75c 	.word	0x0800b75c
 8002bf8:	0800b778 	.word	0x0800b778

08002bfc <USIC1_1_IRQHandler>:
/*Transmit ISR*/
void SPI_MASTER_0_tx_handler()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_0);
 8002c00:	4801      	ldr	r0, [pc, #4]	; (8002c08 <USIC1_1_IRQHandler+0xc>)
 8002c02:	f7ff fb2d 	bl	8002260 <SPI_MASTER_lTransmitHandler>
}
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	1fffc890 	.word	0x1fffc890

08002c0c <USIC1_0_IRQHandler>:

/*Receive ISR*/
void SPI_MASTER_0_rx_handler()
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_0);
 8002c10:	4801      	ldr	r0, [pc, #4]	; (8002c18 <USIC1_0_IRQHandler+0xc>)
 8002c12:	f7ff fc5f 	bl	80024d4 <SPI_MASTER_lReceiveHandler>
}
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	1fffc890 	.word	0x1fffc890

08002c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c28:	0a1b      	lsrs	r3, r3, #8
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_EnableIRQ+0x34>)
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	79fa      	ldrb	r2, [r7, #7]
 8002c54:	f002 021f 	and.w	r2, r2, #31
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100

08002c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db0a      	blt.n	8002c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	490d      	ldr	r1, [pc, #52]	; (8002cbc <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	440b      	add	r3, r1
 8002c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002c98:	e00a      	b.n	8002cb0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9a:	4909      	ldr	r1, [pc, #36]	; (8002cc0 <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	761a      	strb	r2, [r3, #24]
  }
}
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	; 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f1c3 0307 	rsb	r3, r3, #7
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	bf28      	it	cs
 8002ce2:	2306      	movcs	r3, #6
 8002ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3306      	adds	r3, #6
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d902      	bls.n	8002cf4 <NVIC_EncodePriority+0x30>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <NVIC_EncodePriority+0x32>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	401a      	ands	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	1e59      	subs	r1, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002d18:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop

08002d28 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff7e 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	781c      	ldrb	r4, [r3, #0]
 8002d50:	f7ff ff64 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002d54:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002d5a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7ff ffad 	bl	8002cc4 <NVIC_EncodePriority>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	b263      	sxtb	r3, r4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	4611      	mov	r1, r2
 8002d72:	f7ff ff7d 	bl	8002c70 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	78db      	ldrb	r3, [r3, #3]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ffd2 	bl	8002d28 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	bf00      	nop

08002d90 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
   static U32 aMemory[GUI_NUMBYTES / 4] __attribute__((section(".user_defined_section")));
#endif
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8002d94:	4805      	ldr	r0, [pc, #20]	; (8002dac <GUI_X_Config+0x1c>)
 8002d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9a:	f004 f9e9 	bl	8007170 <GUI_ALLOC_AssignMemory>
  GUI_ALLOC_SetAvBlockSize(GUI_BLOCKSIZE);
 8002d9e:	2080      	movs	r0, #128	; 0x80
 8002da0:	f004 f9f0 	bl	8007184 <GUI_ALLOC_SetAvBlockSize>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <GUI_X_Config+0x20>)
 8002da6:	f002 fe5f 	bl	8005a68 <GUI_SetDefaultFont>
}
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	1fffc998 	.word	0x1fffc998
 8002db0:	0800b87c 	.word	0x0800b87c

08002db4 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <OLED_SPI_WriteCommand>:
*       OLED_SPI_WriteCommand
*/
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
#ifndef WIN32
#if (DISPLAY_8BPP == 1)
static void OLED_SPI_WriteCommand(U8 Reg, U8 Para) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	71fb      	strb	r3, [r7, #7]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71bb      	strb	r3, [r7, #6]
	GUI_SEGGERLIBRARY_WriteCmdByte(Reg);
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f9ce 	bl	8003174 <GUI_SEGGERLIBRARY_WriteCmdByte>
	GUI_SEGGERLIBRARY_WriteDataByte(Para);
 8002dd8:	79bb      	ldrb	r3, [r7, #6]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f9f2 	bl	80031c4 <GUI_SEGGERLIBRARY_WriteDataByte>
}
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop

08002de8 <OLED_SPI_InitController>:
*       OLED_InitController
*
* Purpose:
*   Initializes the display controller
*/
static void OLED_SPI_InitController(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  #ifndef WIN32
//  GUI_X_Delay(10);

  OLED_SPI_WriteCommand(REG_DISP_ON_OFF, 0x00);
 8002dec:	2006      	movs	r0, #6
 8002dee:	2100      	movs	r1, #0
 8002df0:	f7ff ffe6 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(5, 0x00);
 8002df4:	2005      	movs	r0, #5
 8002df6:	2100      	movs	r1, #0
 8002df8:	f7ff ffe2 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_REDUCE_CURRENT, 0x03);
 8002dfc:	2004      	movs	r0, #4
 8002dfe:	2103      	movs	r1, #3
 8002e00:	f7ff ffde 	bl	8002dc0 <OLED_SPI_WriteCommand>
  //DelayMS(10);
  OLED_SPI_WriteCommand(REG_REDUCE_CURRENT, 0x00);          // Reg:04h Action: Normal current and PS OFF
 8002e04:	2004      	movs	r0, #4
 8002e06:	2100      	movs	r1, #0
 8002e08:	f7ff ffda 	bl	8002dc0 <OLED_SPI_WriteCommand>
  //DelayMS(10);
  OLED_SPI_WriteCommand(REG_SCREEN_SAVER_CONTEROL, 0x00);   // Reg:3Bh Action: Screen Saver OFF
 8002e0c:	203b      	movs	r0, #59	; 0x3b
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f7ff ffd6 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_OSC_CTL, 0x01);                 // Reg:02h Action: Export1 internal clock/OSC with external resister/Internal OSC ON
 8002e14:	2002      	movs	r0, #2
 8002e16:	2101      	movs	r1, #1
 8002e18:	f7ff ffd2 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_CLOCK_DIV, 0x90);               // Reg:03h Action: FR=120Hz DIV=1
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	2190      	movs	r1, #144	; 0x90
 8002e20:	f7ff ffce 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_IREF, 0x00);                    // Reg:80h Action: PDAC OFF, DDAC OFF/Reference Volt.control with external resister
 8002e24:	2080      	movs	r0, #128	; 0x80
 8002e26:	2100      	movs	r1, #0
 8002e28:	f7ff ffca 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_PRECHARGE_TIME_R, 0x01);        // Reg:08h Action: set color R precharge time
 8002e2c:	2008      	movs	r0, #8
 8002e2e:	2101      	movs	r1, #1
 8002e30:	f7ff ffc6 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_PRECHARGE_TIME_G, 0x01);        // Reg:09h Action: set color G precharge time
 8002e34:	2009      	movs	r0, #9
 8002e36:	2101      	movs	r1, #1
 8002e38:	f7ff ffc2 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_PRECHARGE_TIME_B, 0x01);        // Reg:0Ah Action: set color B precharge tiem
 8002e3c:	200a      	movs	r0, #10
 8002e3e:	2101      	movs	r1, #1
 8002e40:	f7ff ffbe 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_PRECHARGE_Current_R, 0x0a);     // Reg:0Bh Action: set color R precharge current
 8002e44:	200b      	movs	r0, #11
 8002e46:	210a      	movs	r1, #10
 8002e48:	f7ff ffba 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_PRECHARGE_Current_G, 0x0a);     // Reg:0Ch Action: set color G precharge current
 8002e4c:	200c      	movs	r0, #12
 8002e4e:	210a      	movs	r1, #10
 8002e50:	f7ff ffb6 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_PRECHARGE_Current_B, 0x0a);     // Reg:0Dh Action: set color B precharge current
 8002e54:	200d      	movs	r0, #13
 8002e56:	210a      	movs	r1, #10
 8002e58:	f7ff ffb2 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_DRIVING_CURRENT_R, 0x46);       // Reg:10h Action: set color R dot driving current
 8002e5c:	2010      	movs	r0, #16
 8002e5e:	2146      	movs	r1, #70	; 0x46
 8002e60:	f7ff ffae 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_DRIVING_CURRENT_G, 0x38);       // Reg:11h Action: set color G dot driving current
 8002e64:	2011      	movs	r0, #17
 8002e66:	2138      	movs	r1, #56	; 0x38
 8002e68:	f7ff ffaa 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_DRIVING_CURRENT_B, 0x3A);       // Reg:12h Action: set color B dot driving current
 8002e6c:	2012      	movs	r0, #18
 8002e6e:	213a      	movs	r1, #58	; 0x3a
 8002e70:	f7ff ffa6 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_DISPLAY_MODE_SET, 0x00);        // Reg:13h Action: Col D0 to D159/col normal display
 8002e74:	2013      	movs	r0, #19
 8002e76:	2100      	movs	r1, #0
 8002e78:	f7ff ffa2 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_RGB_IF, 0x31);                  // Reg:14h Action: MPU mode
 8002e7c:	2014      	movs	r0, #20
 8002e7e:	2131      	movs	r1, #49	; 0x31
 8002e80:	f7ff ff9e 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(15, 0x00);
 8002e84:	200f      	movs	r0, #15
 8002e86:	2100      	movs	r1, #0
 8002e88:	f7ff ff9a 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_MEMORY_WRITE_MODE, 0x66);       // Reg:16h Action: 8bits dual transfer, 65K support, TRI=0: 16 Bit Data Write
 8002e8c:	2016      	movs	r0, #22
 8002e8e:	2166      	movs	r1, #102	; 0x66
 8002e90:	f7ff ff96 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_MX1_ADDR, 0x00);                // Reg:17h Action: Memory addr.X start
 8002e94:	2017      	movs	r0, #23
 8002e96:	2100      	movs	r1, #0
 8002e98:	f7ff ff92 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_MX2_ADDR, 0x9f);                // Reg:18h Action: Memory addr.X end
 8002e9c:	2018      	movs	r0, #24
 8002e9e:	219f      	movs	r1, #159	; 0x9f
 8002ea0:	f7ff ff8e 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_MY1_ADDR, 0x00);                // Reg:18h Action: Memory addr.Y start
 8002ea4:	2019      	movs	r0, #25
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f7ff ff8a 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_MY2_ADDR, 0x7f);                // Reg:1Ah Action: Memory addr.Y end
 8002eac:	201a      	movs	r0, #26
 8002eae:	217f      	movs	r1, #127	; 0x7f
 8002eb0:	f7ff ff86 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_MEMORY_ACCESS_POINTER_X, 0x00); // Reg:20h Action: Memory X start addr.
 8002eb4:	2020      	movs	r0, #32
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f7ff ff82 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_MEMORY_ACCESS_POINTER_Y, 0x00); // Reg:21h Action: Memory Y start addr.
 8002ebc:	2021      	movs	r0, #33	; 0x21
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	f7ff ff7e 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_DUTY, 0x7f);                    // Reg:28h Action: Display duty ratio
 8002ec4:	2028      	movs	r0, #40	; 0x28
 8002ec6:	217f      	movs	r1, #127	; 0x7f
 8002ec8:	f7ff ff7a 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_DSL, 0x00);                     // Reg:29h Action: Display start line
 8002ecc:	2029      	movs	r0, #41	; 0x29
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f7ff ff76 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_D1_DDRAM_FAC, 0x00);            // Reg:2Eh Action: Display First screen X start point
 8002ed4:	202e      	movs	r0, #46	; 0x2e
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f7ff ff72 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_D1_DDRAM_FAR, 0x00);            // Reg:2Fh Action: Display First screen Y start point
 8002edc:	202f      	movs	r0, #47	; 0x2f
 8002ede:	2100      	movs	r1, #0
 8002ee0:	f7ff ff6e 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_D2_DDRAM_SAC, 0x00);            // Reg:31h Action: Display Second screen X start point
 8002ee4:	2031      	movs	r0, #49	; 0x31
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f7ff ff6a 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_D2_DDRAM_SAR, 0x00);            // Reg:32h Action: Display Second screen Y start point
 8002eec:	2032      	movs	r0, #50	; 0x32
 8002eee:	2100      	movs	r1, #0
 8002ef0:	f7ff ff66 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_SCR1_FX1, 0x00);                // Reg:33h Action: Display size X start
 8002ef4:	2033      	movs	r0, #51	; 0x33
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f7ff ff62 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_SCR1_FX2, 0x9f);                // Reg:34h Action: Display size X end
 8002efc:	2034      	movs	r0, #52	; 0x34
 8002efe:	219f      	movs	r1, #159	; 0x9f
 8002f00:	f7ff ff5e 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_SCR1_FY1, 0x00);                // Reg:35h Action: Display size Y start
 8002f04:	2035      	movs	r0, #53	; 0x35
 8002f06:	2100      	movs	r1, #0
 8002f08:	f7ff ff5a 	bl	8002dc0 <OLED_SPI_WriteCommand>
  OLED_SPI_WriteCommand(REG_SCR1_FY2, 0x7f);                // Reg:36h Action: Display size Y end
 8002f0c:	2036      	movs	r0, #54	; 0x36
 8002f0e:	217f      	movs	r1, #127	; 0x7f
 8002f10:	f7ff ff56 	bl	8002dc0 <OLED_SPI_WriteCommand>
  //DelayMS(100);
  OLED_SPI_WriteCommand(REG_DISP_ON_OFF, 0x01);             // Reg:06h Action: Scan signal is high level at precharge period/Dispaly ON
 8002f14:	2006      	movs	r0, #6
 8002f16:	2101      	movs	r1, #1
 8002f18:	f7ff ff52 	bl	8002dc0 <OLED_SPI_WriteCommand>
  #endif
}
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop

08002f20 <LCD_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*   
*/
void LCD_X_Config(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b0a0      	sub	sp, #128	; 0x80
 8002f24:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  GUI_PORT_API PortAPI = {0};
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	2268      	movs	r2, #104	; 0x68
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f008 fc00 	bl	800b734 <memset>
  CONFIG_FLEXCOLOR Config = {0};
 8002f34:	463b      	mov	r3, r7
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	3304      	adds	r3, #4

  //
  // Set display driver and color conversion for 1st layer
  //
  pDevice = GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER, COLOR_CONVERSION, 0, 0);
 8002f54:	4816      	ldr	r0, [pc, #88]	; (8002fb0 <LCD_X_Config+0x90>)
 8002f56:	4917      	ldr	r1, [pc, #92]	; (8002fb4 <LCD_X_Config+0x94>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f002 fd36 	bl	80059cc <GUI_DEVICE_CreateAndLink>
 8002f60:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display size configuration
  //
  LCD_SetSizeEx (0, XSIZE_PHYS,  YSIZE_PHYS);
 8002f62:	2000      	movs	r0, #0
 8002f64:	21a0      	movs	r1, #160	; 0xa0
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	f002 fada 	bl	8005520 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	21a0      	movs	r1, #160	; 0xa0
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	f002 fabd 	bl	80054f0 <LCD_SetVSizeEx>
  // Function selection, hardware routines (PortAPI) and operation mode (bus, bpp and cache)
  //
  #ifndef WIN32
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
	#if (DISPLAY_8BPP == 1)
		PortAPI.pfWrite8_A0  = GUI_SEGGERLIBRARY_WriteCmdByte;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <LCD_X_Config+0x98>)
 8002f78:	617b      	str	r3, [r7, #20]
		PortAPI.pfWrite8_A1  = GUI_SEGGERLIBRARY_WriteDataByte;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <LCD_X_Config+0x9c>)
 8002f7c:	61bb      	str	r3, [r7, #24]
		PortAPI.pfWriteM8_A1 = GUI_SEGGERLIBRARY_WriteMultipleBytes;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <LCD_X_Config+0xa0>)
 8002f80:	623b      	str	r3, [r7, #32]
		PortAPI.pfReadM8_A1  = GUI_SEGGERLIBRARY_ReadMultipleBytes;
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <LCD_X_Config+0xa4>)
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
		PortAPI.pfWriteM16_A1 = User_LCD_16_WriteMultiple;
		PortAPI.pfReadM16_A1  = User_LCD_16_Read;
#endif
#endif

		GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, pfFUNC, pfMODE);
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <LCD_X_Config+0xa8>)
 8002f90:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <LCD_X_Config+0xac>)
 8002f92:	f002 fa7d 	bl	8005490 <GUIDRV_FlexColor_SetFunc>

	//
    // Orientation
    //
    Config.Orientation  = DISPLAY_ORIENTATION;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
    Config.RegEntryMode = 0x60;
 8002f9a:	2360      	movs	r3, #96	; 0x60
 8002f9c:	81bb      	strh	r3, [r7, #12]
    GUIDRV_FlexColor_Config(pDevice, &Config);
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f002 fa40 	bl	8005428 <GUIDRV_FlexColor_Config>
  #endif
}
 8002fa8:	3780      	adds	r7, #128	; 0x80
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	0800d068 	.word	0x0800d068
 8002fb4:	0800d0a4 	.word	0x0800d0a4
 8002fb8:	08003175 	.word	0x08003175
 8002fbc:	080031c5 	.word	0x080031c5
 8002fc0:	08003215 	.word	0x08003215
 8002fc4:	0800327d 	.word	0x0800327d
 8002fc8:	08003925 	.word	0x08003925
 8002fcc:	08004d19 	.word	0x08004d19

08002fd0 <LCD_X_DisplayDriver>:
* Parameter:
*   LayerIndex - Index of layer to be configured
*   Cmd        - Please refer to the details in the switch statement below
*   pData      - Pointer to a LCD_X_DATA structure
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  int r;

  GUI_USE_PARA(LayerIndex);
  GUI_USE_PARA(pData);
  switch (Cmd) {
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d103      	bne.n	8002fea <LCD_X_DisplayDriver+0x1a>
    // to be adapted by the customer...
    //
#if ((USER_DEFINED_LCD == 1) || (SPI_INTERFACE == 0))
	  User_LCD_Init();
#else
    OLED_SPI_InitController();
 8002fe2:	f7ff ff01 	bl	8002de8 <OLED_SPI_InitController>
#endif
    return 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e003      	b.n	8002ff2 <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002ff0:	697b      	ldr	r3, [r7, #20]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop

08002ffc <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	2201      	movs	r2, #1
 800300c:	409a      	lsls	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	605a      	str	r2, [r3, #4]
}
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800302e:	409a      	lsls	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	605a      	str	r2, [r3, #4]
}
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop

08003040 <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <SPI_MASTER_GetFlagStatus>:
 * @endcode<BR>
 *
 */

__STATIC_INLINE uint32_t SPI_MASTER_GetFlagStatus(const SPI_MASTER_t* handle, const uint32_t flag)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("SPI_MASTER_GetFlagStatus:handle NULL" , (handle != NULL));
  return (XMC_SPI_CH_GetStatusFlag(handle->channel) & flag);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ffda 	bl	8003040 <XMC_SPI_CH_GetStatusFlag>
 800308c:	4602      	mov	r2, r0
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	4013      	ands	r3, r2
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop

0800309c <SPI_MASTER_ClearFlag>:
 *    return 1U;
 * }
 * @endcode<BR>
 */
__STATIC_INLINE void SPI_MASTER_ClearFlag(const SPI_MASTER_t* handle, const uint32_t flag_mask)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
    XMC_ASSERT("SPI_MASTER_ClearFlag:handle NULL" , (handle != NULL));
    XMC_SPI_CH_ClearStatusFlag(handle->channel, flag_mask);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	f7ff ffd3 	bl	8003058 <XMC_SPI_CH_ClearStatusFlag>
}
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <GUI_SEGGERLIBRARY_Init>:
}


/* API initializes the Segger library */
GUI_SEGGERLIBRARY_STATUS_t GUI_SEGGERLIBRARY_Init(GUI_SEGGERLIBRARY_t *handle)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GUI_SEGGERLIBRARY_STATUS_t status;

  status = GUI_SEGGERLIBRARY_STATUS_SUCCESS;
 80030c0:	2300      	movs	r3, #0
 80030c2:	73fb      	strb	r3, [r7, #15]

#if (GUI_SEGGERLIBRARY_RTOS_PRESENT == 0)
  status = (GUI_SEGGERLIBRARY_STATUS_t)SYSTIMER_Init(handle->systimer_handler);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fe57 	bl	8001d7c <SYSTIMER_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]

#if (CMSIS_RTOS_RTX_PRESENT == 1)
  status = (GUI_SEGGERLIBRARY_STATUS_t)CMSIS_RTOS_RTX_Init(&CMSIS_RTOS_RTX_0);
#endif

  if (status == GUI_SEGGERLIBRARY_STATUS_SUCCESS)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d123      	bne.n	8003120 <GUI_SEGGERLIBRARY_Init+0x68>
  {
    /* Initialize SPI as well as the port and pin for GPIO */
    #if (SPI_INTERFACE == 1)
      status = (GUI_SEGGERLIBRARY_STATUS_t)SPI_MASTER_Init(handle->spi_master_handler);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe ffb5 	bl	800204c <SPI_MASTER_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]

      #if !USER_DEFINED_LCD
		if (status == GUI_SEGGERLIBRARY_STATUS_SUCCESS)
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d110      	bne.n	800310e <GUI_SEGGERLIBRARY_Init+0x56>
		{
		  XMC_GPIO_Init(handle->config->portNo, handle->config->pinNo, handle->config->gpio);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	7a1a      	ldrb	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4608      	mov	r0, r1
 8003100:	4611      	mov	r1, r2
 8003102:	461a      	mov	r2, r3
 8003104:	f7fd f94a 	bl	800039c <XMC_GPIO_Init>

		  status = GUI_SEGGERLIBRARY_STATUS_SUCCESS;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e001      	b.n	8003112 <GUI_SEGGERLIBRARY_Init+0x5a>
		}
		else
		{
		  status = GUI_SEGGERLIBRARY_STATUS_FAILURE;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
		}
      #endif
    #endif

    if (handle->enable_at_init == true)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7b1b      	ldrb	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <GUI_SEGGERLIBRARY_Init+0x6c>
    {
      GUI_Init();
 800311a:	f002 fcc3 	bl	8005aa4 <GUI_Init>
 800311e:	e001      	b.n	8003124 <GUI_SEGGERLIBRARY_Init+0x6c>
    }
  }
  else
  {
    status = GUI_SEGGERLIBRARY_STATUS_FAILURE;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop

08003130 <GUI_SEGGERLIBRARY_SendByte>:

#if (SPI_INTERFACE == 1)

/* Sends one byte of data to the OLED through SPI */
void GUI_SEGGERLIBRARY_SendByte(uint8_t data)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  SPI_MASTER_ClearFlag(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 800313a:	480d      	ldr	r0, [pc, #52]	; (8003170 <GUI_SEGGERLIBRARY_SendByte+0x40>)
 800313c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003140:	f7ff ffac 	bl	800309c <SPI_MASTER_ClearFlag>

  XMC_SPI_CH_Transmit(SPI_INSTANCE.channel, (uint16_t)data, XMC_SPI_CH_MODE_STANDARD);
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <GUI_SEGGERLIBRARY_SendByte+0x40>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	b29b      	uxth	r3, r3
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	2200      	movs	r2, #0
 8003152:	f7fe f829 	bl	80011a8 <XMC_SPI_CH_Transmit>

  while(SPI_MASTER_GetFlagStatus(&SPI_INSTANCE, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION)!=
 8003156:	bf00      	nop
 8003158:	4805      	ldr	r0, [pc, #20]	; (8003170 <GUI_SEGGERLIBRARY_SendByte+0x40>)
 800315a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800315e:	f7ff ff8b 	bl	8003078 <SPI_MASTER_GetFlagStatus>
 8003162:	4603      	mov	r3, r0
 8003164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003168:	d1f6      	bne.n	8003158 <GUI_SEGGERLIBRARY_SendByte+0x28>
       XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
}
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	1fffc890 	.word	0x1fffc890

08003174 <GUI_SEGGERLIBRARY_WriteCmdByte>:
/*
 *  This routine writes to display controller using SPI bus, with A0 = 0
 *
 */
void GUI_SEGGERLIBRARY_WriteCmdByte(uint8_t cmd)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Clear the A0 pin */
  XMC_GPIO_SetOutputLow(IOHandle.portNo,IOHandle.pinNo);
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <GUI_SEGGERLIBRARY_WriteCmdByte+0x48>)
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <GUI_SEGGERLIBRARY_WriteCmdByte+0x48>)
 8003184:	7a1b      	ldrb	r3, [r3, #8]
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7ff ff47 	bl	800301c <XMC_GPIO_SetOutputLow>
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel,SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 800318e:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <GUI_SEGGERLIBRARY_WriteCmdByte+0x4c>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <GUI_SEGGERLIBRARY_WriteCmdByte+0x4c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd ffdb 	bl	8001158 <XMC_SPI_CH_EnableSlaveSelect>

  /* Write to the SPI Bus */
  GUI_SEGGERLIBRARY_SendByte(cmd);
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ffc3 	bl	8003130 <GUI_SEGGERLIBRARY_SendByte>

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <GUI_SEGGERLIBRARY_WriteCmdByte+0x4c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd ffe8 	bl	8001184 <XMC_SPI_CH_DisableSlaveSelect>
}
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	0800b828 	.word	0x0800b828
 80031c0:	1fffc890 	.word	0x1fffc890

080031c4 <GUI_SEGGERLIBRARY_WriteDataByte>:
/*
 *  This routine writes to display controller using SPI bus, with A0 = 1
 *
 */
void GUI_SEGGERLIBRARY_WriteDataByte(uint8_t data)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
    /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <GUI_SEGGERLIBRARY_WriteDataByte+0x48>)
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <GUI_SEGGERLIBRARY_WriteDataByte+0x48>)
 80031d4:	7a1b      	ldrb	r3, [r3, #8]
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f7ff ff0f 	bl	8002ffc <XMC_GPIO_SetOutputHigh>
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <GUI_SEGGERLIBRARY_WriteDataByte+0x4c>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <GUI_SEGGERLIBRARY_WriteDataByte+0x4c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f7fd ffb3 	bl	8001158 <XMC_SPI_CH_EnableSlaveSelect>

  GUI_SEGGERLIBRARY_SendByte(data);
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff9b 	bl	8003130 <GUI_SEGGERLIBRARY_SendByte>

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <GUI_SEGGERLIBRARY_WriteDataByte+0x4c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd ffc0 	bl	8001184 <XMC_SPI_CH_DisableSlaveSelect>
}
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	0800b828 	.word	0x0800b828
 8003210:	1fffc890 	.word	0x1fffc890

08003214 <GUI_SEGGERLIBRARY_WriteMultipleBytes>:
 *  This routine writes multiple bytes to display controller using SPI bus,
 *  with A0 = 1.
 *
 */
void GUI_SEGGERLIBRARY_WriteMultipleBytes(uint8_t *data, int numitems)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint8_t datacopy;

#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  /* Set the A0 pin*/
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x60>)
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x60>)
 8003224:	7a1b      	ldrb	r3, [r3, #8]
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7ff fee7 	bl	8002ffc <XMC_GPIO_SetOutputHigh>
#endif

  XMC_SPI_CH_EnableSlaveSelect(SPI_INSTANCE.channel, SPI_INSTANCE.config->slave_select_pin_config[0]->slave_select_ch);
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x64>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	f7fd ff8b 	bl	8001158 <XMC_SPI_CH_EnableSlaveSelect>

  do
  {
    datacopy = *data;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	73fb      	strb	r3, [r7, #15]
    GUI_SEGGERLIBRARY_SendByte(datacopy);
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff70 	bl	8003130 <GUI_SEGGERLIBRARY_SendByte>
	data++;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3301      	adds	r3, #1
 8003254:	607b      	str	r3, [r7, #4]
  }while(--numitems);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ef      	bne.n	8003242 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x2e>

  XMC_SPI_CH_DisableSlaveSelect(SPI_INSTANCE.channel);
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <GUI_SEGGERLIBRARY_WriteMultipleBytes+0x64>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd ff8c 	bl	8001184 <XMC_SPI_CH_DisableSlaveSelect>
}
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	0800b828 	.word	0x0800b828
 8003278:	1fffc890 	.word	0x1fffc890

0800327c <GUI_SEGGERLIBRARY_ReadMultipleBytes>:
 *  This routine read multiple bytes from display controller using SPI bus,
 *  with A0 = 1.
 *
 */
void GUI_SEGGERLIBRARY_ReadMultipleBytes(uint8_t *data, int numitems)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
#if (!USER_DEFINED_LCD && SPI_INTERFACE == 1)
  XMC_GPIO_SetOutputHigh(IOHandle.portNo,IOHandle.pinNo);
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <GUI_SEGGERLIBRARY_ReadMultipleBytes+0x2c>)
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <GUI_SEGGERLIBRARY_ReadMultipleBytes+0x2c>)
 800328c:	7a1b      	ldrb	r3, [r3, #8]
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	f7ff feb3 	bl	8002ffc <XMC_GPIO_SetOutputHigh>
#endif

  SPI_MASTER_Receive(&SPI_INSTANCE, data, numitems);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	4804      	ldr	r0, [pc, #16]	; (80032ac <GUI_SEGGERLIBRARY_ReadMultipleBytes+0x30>)
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	461a      	mov	r2, r3
 800329e:	f7fe feff 	bl	80020a0 <SPI_MASTER_Receive>
}
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	0800b828 	.word	0x0800b828
 80032ac:	1fffc890 	.word	0x1fffc890

080032b0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032be:	60da      	str	r2, [r3, #12]
}
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop

080032cc <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7b5b      	ldrb	r3, [r3, #13]
 80032d8:	f083 0301 	eor.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00f      	beq.n	8003302 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7b1b      	ldrb	r3, [r3, #12]
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	f7fd fe15 	bl	8000f1c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ffda 	bl	80032b0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003328:	4013      	ands	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8003334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800333e:	4a04      	ldr	r2, [pc, #16]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800335a:	2001      	movs	r0, #1
 800335c:	f7ff ffd6 	bl	800330c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8003362:	4b21      	ldr	r3, [pc, #132]	; (80033e8 <SystemCoreSetup+0x94>)
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <SystemCoreSetup+0x98>)
 8003366:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003368:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800336c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800336e:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <SystemCoreSetup+0x94>)
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <SystemCoreSetup+0x94>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800337a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <SystemCoreSetup+0x9c>)
 8003380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003384:	3314      	adds	r3, #20
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f023 030f 	bic.w	r3, r3, #15
 8003390:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <SystemCoreSetup+0x9c>)
 800339c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a0:	3314      	adds	r3, #20
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80033a6:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <SystemCoreSetup+0x94>)
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <SystemCoreSetup+0x94>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f023 0310 	bic.w	r3, r3, #16
 80033b0:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80033b2:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <SystemCoreSetup+0x94>)
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <SystemCoreSetup+0x94>)
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f023 0308 	bic.w	r3, r3, #8
 80033bc:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <SystemCoreSetup+0x94>)
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <SystemCoreSetup+0x94>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <SystemCoreSetup+0x94>)
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <SystemCoreSetup+0x94>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033d4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <SystemCoreSetup+0x94>)
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <SystemCoreSetup+0x94>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	e000ed00 	.word	0xe000ed00
 80033ec:	08000000 	.word	0x08000000
 80033f0:	58001000 	.word	0x58001000

080033f4 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]

  return (status);
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8003418:	4b02      	ldr	r3, [pc, #8]	; (8003424 <OSCHP_GetFrequency+0x10>)
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	00b71b00 	.word	0x00b71b00

08003428 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <SystemCoreClockSetup+0x4c>)
 8003430:	1d3c      	adds	r4, r7, #4
 8003432:	461d      	mov	r5, r3
 8003434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f8a0 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8003444:	2000      	movs	r0, #0
 8003446:	f7fd f9c5 	bl	80007d4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd f97a 	bl	8000744 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8003450:	2004      	movs	r0, #4
 8003452:	f7fd fa4b 	bl	80008ec <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8003456:	f7fd fac1 	bl	80009dc <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800345a:	2001      	movs	r0, #1
 800345c:	2120      	movs	r1, #32
 800345e:	f7fd facd 	bl	80009fc <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd f982 	bl	800076c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8003468:	2001      	movs	r0, #1
 800346a:	f7fd fa53 	bl	8000914 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bdb0      	pop	{r4, r5, r7, pc}
 8003474:	0800b834 	.word	0x0800b834

08003478 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800347e:	2300      	movs	r3, #0
 8003480:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8003482:	4811      	ldr	r0, [pc, #68]	; (80034c8 <DAVE_Init+0x50>)
 8003484:	f7ff ffb6 	bl	80033f4 <CLOCK_XMC4_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <DAVE_Init+0x24>
  {
	 /**  Initialization of GUI_SEGGERLIBRARY APP instance GUI_SEGGERLIBRARY_0 */
	 init_status = (DAVE_STATUS_t)GUI_SEGGERLIBRARY_Init(&GUI_SEGGERLIBRARY_0); 
 8003492:	480e      	ldr	r0, [pc, #56]	; (80034cc <DAVE_Init+0x54>)
 8003494:	f7ff fe10 	bl	80030b8 <GUI_SEGGERLIBRARY_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d104      	bne.n	80034ac <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 80034a2:	480b      	ldr	r0, [pc, #44]	; (80034d0 <DAVE_Init+0x58>)
 80034a4:	f7fe f98a 	bl	80017bc <TIMER_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 80034b2:	4808      	ldr	r0, [pc, #32]	; (80034d4 <DAVE_Init+0x5c>)
 80034b4:	f7ff fc46 	bl	8002d44 <INTERRUPT_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80034bc:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	1fffd998 	.word	0x1fffd998
 80034cc:	1fffc89c 	.word	0x1fffc89c
 80034d0:	1fffc820 	.word	0x1fffc820
 80034d4:	0800b818 	.word	0x0800b818

080034d8 <main>:
int s_tick = 0;
uint8_t s_trigger = 0;


int main(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80034de:	f7ff ffcb 	bl	8003478 <DAVE_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]

  if(status == DAVE_STATUS_FAILURE)
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d100      	bne.n	80034ee <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80034ec:	e7fe      	b.n	80034ec <main+0x14>
  }

  /* Set background colour */
  //GUI_SetBkColor(GUI_BLUE);
  /* Clear screen */
  GUI_Clear();
 80034ee:	f002 fac1 	bl	8005a74 <GUI_Clear>

  /* Display text */
  GUI_SetFont(&GUI_Font20B_1);
 80034f2:	480d      	ldr	r0, [pc, #52]	; (8003528 <main+0x50>)
 80034f4:	f002 f930 	bl	8005758 <GUI_SetFont>
  GUI_SetColor(GUI_WHITE);
 80034f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80034fc:	f002 f936 	bl	800576c <GUI_SetColor>
  GUI_DispStringHCenterAt("10s TIMER", 80, 30);
 8003500:	480a      	ldr	r0, [pc, #40]	; (800352c <main+0x54>)
 8003502:	2150      	movs	r1, #80	; 0x50
 8003504:	221e      	movs	r2, #30
 8003506:	f002 f933 	bl	8005770 <GUI_DispStringHCenterAt>
  while(1U)
  {


	  /* Display text */
	  GUI_SetColor(GUI_WHITE);
 800350a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800350e:	f002 f92d 	bl	800576c <GUI_SetColor>
	  GUI_DispStringHCenterAt(s_tick + "0", 80, 60);
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <main+0x58>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <main+0x5c>)
 800351a:	4413      	add	r3, r2
 800351c:	4618      	mov	r0, r3
 800351e:	2150      	movs	r1, #80	; 0x50
 8003520:	223c      	movs	r2, #60	; 0x3c
 8003522:	f002 f925 	bl	8005770 <GUI_DispStringHCenterAt>



  }
 8003526:	e7f0      	b.n	800350a <main+0x32>
 8003528:	0800bf94 	.word	0x0800bf94
 800352c:	0800b848 	.word	0x0800b848
 8003530:	1fffd99c 	.word	0x1fffd99c
 8003534:	0800b854 	.word	0x0800b854

08003538 <CCU41_1_IRQHandler>:
}

void tick(){
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
	s_tick = s_tick + 1;
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <CCU41_1_IRQHandler+0x2c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <CCU41_1_IRQHandler+0x2c>)
 8003544:	6013      	str	r3, [r2, #0]

	if(s_tick == 10){
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <CCU41_1_IRQHandler+0x2c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b0a      	cmp	r3, #10
 800354c:	d102      	bne.n	8003554 <CCU41_1_IRQHandler+0x1c>
		s_tick = 0;
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <CCU41_1_IRQHandler+0x2c>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
	}
	s_trigger = 1;
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <CCU41_1_IRQHandler+0x30>)
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]

}
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	1fffd99c 	.word	0x1fffd99c
 8003568:	1fffd9a0 	.word	0x1fffd9a0

0800356c <_SetPhysRAMAddr>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003570:	4604      	mov	r4, r0
 8003572:	460e      	mov	r6, r1
 8003574:	4615      	mov	r5, r2
 8003576:	b9e3      	cbnz	r3, 80035b2 <_SetPhysRAMAddr+0x46>
 8003578:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800357c:	2120      	movs	r1, #32
 800357e:	4790      	blx	r2
 8003580:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003582:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003586:	1872      	adds	r2, r6, r1
 8003588:	b291      	uxth	r1, r2
 800358a:	4620      	mov	r0, r4
 800358c:	4798      	blx	r3
 800358e:	4620      	mov	r0, r4
 8003590:	2121      	movs	r1, #33	; 0x21
 8003592:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003596:	4798      	blx	r3
 8003598:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800359a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800359e:	1829      	adds	r1, r5, r0
 80035a0:	4620      	mov	r0, r4
 80035a2:	b289      	uxth	r1, r1
 80035a4:	4798      	blx	r3
 80035a6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80035aa:	4620      	mov	r0, r4
 80035ac:	2122      	movs	r1, #34	; 0x22
 80035ae:	4798      	blx	r3
 80035b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b2:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80035b6:	47b8      	blx	r7
 80035b8:	462a      	mov	r2, r5
 80035ba:	4631      	mov	r1, r6
 80035bc:	4607      	mov	r7, r0
 80035be:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 80035c2:	4620      	mov	r0, r4
 80035c4:	47a8      	blx	r5
 80035c6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80035ca:	4606      	mov	r6, r0
 80035cc:	2120      	movs	r1, #32
 80035ce:	4620      	mov	r0, r4
 80035d0:	4790      	blx	r2
 80035d2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80035d4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80035d8:	1979      	adds	r1, r7, r5
 80035da:	4620      	mov	r0, r4
 80035dc:	b289      	uxth	r1, r1
 80035de:	4798      	blx	r3
 80035e0:	4620      	mov	r0, r4
 80035e2:	2121      	movs	r1, #33	; 0x21
 80035e4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80035e8:	4790      	blx	r2
 80035ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80035ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80035f0:	1831      	adds	r1, r6, r0
 80035f2:	e7d5      	b.n	80035a0 <_SetPhysRAMAddr+0x34>

080035f4 <_SetRect>:
 80035f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f8:	6b47      	ldr	r7, [r0, #52]	; 0x34
 80035fa:	9e08      	ldr	r6, [sp, #32]
 80035fc:	4604      	mov	r4, r0
 80035fe:	4688      	mov	r8, r1
 8003600:	4691      	mov	r9, r2
 8003602:	461d      	mov	r5, r3
 8003604:	2f00      	cmp	r7, #0
 8003606:	d075      	beq.n	80036f4 <_SetRect+0x100>
 8003608:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 800360c:	47b8      	blx	r7
 800360e:	4632      	mov	r2, r6
 8003610:	4607      	mov	r7, r0
 8003612:	4629      	mov	r1, r5
 8003614:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003618:	4620      	mov	r0, r4
 800361a:	4798      	blx	r3
 800361c:	464a      	mov	r2, r9
 800361e:	4682      	mov	sl, r0
 8003620:	4641      	mov	r1, r8
 8003622:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003626:	4620      	mov	r0, r4
 8003628:	4798      	blx	r3
 800362a:	4632      	mov	r2, r6
 800362c:	4680      	mov	r8, r0
 800362e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003632:	4629      	mov	r1, r5
 8003634:	4620      	mov	r0, r4
 8003636:	4798      	blx	r3
 8003638:	4557      	cmp	r7, sl
 800363a:	bfca      	itet	gt
 800363c:	4656      	movgt	r6, sl
 800363e:	463e      	movle	r6, r7
 8003640:	46ba      	movgt	sl, r7
 8003642:	4580      	cmp	r8, r0
 8003644:	bfcc      	ite	gt
 8003646:	4681      	movgt	r9, r0
 8003648:	46c1      	movle	r9, r8
 800364a:	4605      	mov	r5, r0
 800364c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003650:	bfc8      	it	gt
 8003652:	4645      	movgt	r5, r8
 8003654:	4620      	mov	r0, r4
 8003656:	2119      	movs	r1, #25
 8003658:	4790      	blx	r2
 800365a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800365c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003660:	eb09 0100 	add.w	r1, r9, r0
 8003664:	b289      	uxth	r1, r1
 8003666:	4620      	mov	r0, r4
 8003668:	4798      	blx	r3
 800366a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800366e:	4620      	mov	r0, r4
 8003670:	211a      	movs	r1, #26
 8003672:	4790      	blx	r2
 8003674:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003676:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800367a:	1829      	adds	r1, r5, r0
 800367c:	b289      	uxth	r1, r1
 800367e:	4620      	mov	r0, r4
 8003680:	4798      	blx	r3
 8003682:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003686:	4620      	mov	r0, r4
 8003688:	2117      	movs	r1, #23
 800368a:	4790      	blx	r2
 800368c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800368e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003692:	1831      	adds	r1, r6, r0
 8003694:	b289      	uxth	r1, r1
 8003696:	4620      	mov	r0, r4
 8003698:	4798      	blx	r3
 800369a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800369e:	4620      	mov	r0, r4
 80036a0:	2118      	movs	r1, #24
 80036a2:	4790      	blx	r2
 80036a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80036a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80036aa:	eb0a 0100 	add.w	r1, sl, r0
 80036ae:	b289      	uxth	r1, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4798      	blx	r3
 80036b4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80036b8:	4620      	mov	r0, r4
 80036ba:	2120      	movs	r1, #32
 80036bc:	4790      	blx	r2
 80036be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80036c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80036c4:	1839      	adds	r1, r7, r0
 80036c6:	b289      	uxth	r1, r1
 80036c8:	4620      	mov	r0, r4
 80036ca:	4798      	blx	r3
 80036cc:	4620      	mov	r0, r4
 80036ce:	2121      	movs	r1, #33	; 0x21
 80036d0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80036d4:	4790      	blx	r2
 80036d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80036d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80036dc:	eb08 0100 	add.w	r1, r8, r0
 80036e0:	b289      	uxth	r1, r1
 80036e2:	4620      	mov	r0, r4
 80036e4:	4798      	blx	r3
 80036e6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80036ea:	4620      	mov	r0, r4
 80036ec:	2122      	movs	r1, #34	; 0x22
 80036ee:	4790      	blx	r2
 80036f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f4:	2119      	movs	r1, #25
 80036f6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80036fa:	4798      	blx	r3
 80036fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80036fe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003702:	fa1f f989 	uxth.w	r9, r9
 8003706:	eb09 0301 	add.w	r3, r9, r1
 800370a:	b299      	uxth	r1, r3
 800370c:	4620      	mov	r0, r4
 800370e:	4790      	blx	r2
 8003710:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003714:	4620      	mov	r0, r4
 8003716:	211a      	movs	r1, #26
 8003718:	4790      	blx	r2
 800371a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800371c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003720:	1831      	adds	r1, r6, r0
 8003722:	b289      	uxth	r1, r1
 8003724:	4620      	mov	r0, r4
 8003726:	4798      	blx	r3
 8003728:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800372c:	4620      	mov	r0, r4
 800372e:	2117      	movs	r1, #23
 8003730:	4790      	blx	r2
 8003732:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003734:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003738:	fa1f f888 	uxth.w	r8, r8
 800373c:	eb08 0100 	add.w	r1, r8, r0
 8003740:	b289      	uxth	r1, r1
 8003742:	4620      	mov	r0, r4
 8003744:	4798      	blx	r3
 8003746:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800374a:	4620      	mov	r0, r4
 800374c:	2118      	movs	r1, #24
 800374e:	4790      	blx	r2
 8003750:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003752:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003756:	1829      	adds	r1, r5, r0
 8003758:	b289      	uxth	r1, r1
 800375a:	4620      	mov	r0, r4
 800375c:	4798      	blx	r3
 800375e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003762:	4620      	mov	r0, r4
 8003764:	2120      	movs	r1, #32
 8003766:	4790      	blx	r2
 8003768:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800376a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800376e:	eb08 0100 	add.w	r1, r8, r0
 8003772:	b289      	uxth	r1, r1
 8003774:	4620      	mov	r0, r4
 8003776:	4798      	blx	r3
 8003778:	4620      	mov	r0, r4
 800377a:	2121      	movs	r1, #33	; 0x21
 800377c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003780:	4790      	blx	r2
 8003782:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003784:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003788:	eb09 0100 	add.w	r1, r9, r0
 800378c:	b289      	uxth	r1, r1
 800378e:	4620      	mov	r0, r4
 8003790:	4798      	blx	r3
 8003792:	e7a8      	b.n	80036e6 <_SetRect+0xf2>

08003794 <_SetOrientation>:
 8003794:	b530      	push	{r4, r5, lr}
 8003796:	f24d 0320 	movw	r3, #53280	; 0xd020
 800379a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800379e:	4604      	mov	r4, r0
 80037a0:	b083      	sub	sp, #12
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80037aa:	466d      	mov	r5, sp
 80037ac:	c503      	stmia	r5!, {r0, r1}
 80037ae:	4620      	mov	r0, r4
 80037b0:	2116      	movs	r1, #22
 80037b2:	4790      	blx	r2
 80037b4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80037b6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80037b8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80037bc:	a902      	add	r1, sp, #8
 80037be:	180a      	adds	r2, r1, r0
 80037c0:	f023 0007 	bic.w	r0, r3, #7
 80037c4:	0403      	lsls	r3, r0, #16
 80037c6:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80037ca:	0c1a      	lsrs	r2, r3, #16
 80037cc:	4620      	mov	r0, r4
 80037ce:	4311      	orrs	r1, r2
 80037d0:	47a8      	blx	r5
 80037d2:	b003      	add	sp, #12
 80037d4:	bd30      	pop	{r4, r5, pc}
 80037d6:	bf00      	nop

080037d8 <_ReadPixel_16bpp_B8>:
 80037d8:	b510      	push	{r4, lr}
 80037da:	6a01      	ldr	r1, [r0, #32]
 80037dc:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 80037e0:	b082      	sub	sp, #8
 80037e2:	4604      	mov	r4, r0
 80037e4:	3102      	adds	r1, #2
 80037e6:	4668      	mov	r0, sp
 80037e8:	4798      	blx	r3
 80037ea:	6a23      	ldr	r3, [r4, #32]
 80037ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037ee:	f81d 0003 	ldrb.w	r0, [sp, r3]
 80037f2:	a900      	add	r1, sp, #0
 80037f4:	18cb      	adds	r3, r1, r3
 80037f6:	7859      	ldrb	r1, [r3, #1]
 80037f8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80037fc:	4010      	ands	r0, r2
 80037fe:	b002      	add	sp, #8
 8003800:	bd10      	pop	{r4, pc}
 8003802:	bf00      	nop

08003804 <_ReadPixel_18bpp_B9>:
 8003804:	b510      	push	{r4, lr}
 8003806:	6a01      	ldr	r1, [r0, #32]
 8003808:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 800380c:	b084      	sub	sp, #16
 800380e:	4604      	mov	r4, r0
 8003810:	3102      	adds	r1, #2
 8003812:	4668      	mov	r0, sp
 8003814:	4798      	blx	r3
 8003816:	6a23      	ldr	r3, [r4, #32]
 8003818:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800381a:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 800381e:	a900      	add	r1, sp, #0
 8003820:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003824:	8859      	ldrh	r1, [r3, #2]
 8003826:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
 800382a:	4010      	ands	r0, r2
 800382c:	b004      	add	sp, #16
 800382e:	bd10      	pop	{r4, pc}

08003830 <_ReadPixel_16bpp_B16>:
 8003830:	b510      	push	{r4, lr}
 8003832:	4604      	mov	r4, r0
 8003834:	b084      	sub	sp, #16
 8003836:	6a21      	ldr	r1, [r4, #32]
 8003838:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800383c:	a801      	add	r0, sp, #4
 800383e:	3101      	adds	r1, #1
 8003840:	4798      	blx	r3
 8003842:	6a20      	ldr	r0, [r4, #32]
 8003844:	aa04      	add	r2, sp, #16
 8003846:	eb02 0140 	add.w	r1, r2, r0, lsl #1
 800384a:	f831 0c0c 	ldrh.w	r0, [r1, #-12]
 800384e:	b004      	add	sp, #16
 8003850:	bd10      	pop	{r4, pc}
 8003852:	bf00      	nop

08003854 <_SetReg_B8>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	460d      	mov	r5, r1
 800385a:	0a08      	lsrs	r0, r1, #8
 800385c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003860:	4798      	blx	r3
 8003862:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8003866:	b2e8      	uxtb	r0, r5
 8003868:	4788      	blx	r1
 800386a:	bd38      	pop	{r3, r4, r5, pc}

0800386c <_SetReg_B9>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4604      	mov	r4, r0
 8003870:	0a08      	lsrs	r0, r1, #8
 8003872:	460d      	mov	r5, r1
 8003874:	0040      	lsls	r0, r0, #1
 8003876:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800387a:	4798      	blx	r3
 800387c:	b2e9      	uxtb	r1, r5
 800387e:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8003882:	0048      	lsls	r0, r1, #1
 8003884:	4790      	blx	r2
 8003886:	bd38      	pop	{r3, r4, r5, pc}

08003888 <_SetReg_B16>:
 8003888:	b508      	push	{r3, lr}
 800388a:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800388e:	4608      	mov	r0, r1
 8003890:	4798      	blx	r3
 8003892:	bd08      	pop	{r3, pc}

08003894 <_WritePara_B8>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	4604      	mov	r4, r0
 8003898:	460d      	mov	r5, r1
 800389a:	0a08      	lsrs	r0, r1, #8
 800389c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80038a0:	4798      	blx	r3
 80038a2:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80038a6:	b2e8      	uxtb	r0, r5
 80038a8:	4788      	blx	r1
 80038aa:	bd38      	pop	{r3, r4, r5, pc}

080038ac <_WritePara_B9>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
 80038b0:	0a08      	lsrs	r0, r1, #8
 80038b2:	460d      	mov	r5, r1
 80038b4:	0040      	lsls	r0, r0, #1
 80038b6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80038ba:	4798      	blx	r3
 80038bc:	b2e9      	uxtb	r1, r5
 80038be:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80038c2:	0048      	lsls	r0, r1, #1
 80038c4:	4790      	blx	r2
 80038c6:	bd38      	pop	{r3, r4, r5, pc}

080038c8 <_WritePara_B16>:
 80038c8:	b508      	push	{r3, lr}
 80038ca:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80038ce:	4608      	mov	r0, r1
 80038d0:	4798      	blx	r3
 80038d2:	bd08      	pop	{r3, pc}

080038d4 <_SetInterface>:
 80038d4:	2909      	cmp	r1, #9
 80038d6:	d012      	beq.n	80038fe <_SetInterface+0x2a>
 80038d8:	2910      	cmp	r1, #16
 80038da:	d009      	beq.n	80038f0 <_SetInterface+0x1c>
 80038dc:	2908      	cmp	r1, #8
 80038de:	d000      	beq.n	80038e2 <_SetInterface+0xe>
 80038e0:	4770      	bx	lr
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <_SetInterface+0x38>)
 80038e4:	490a      	ldr	r1, [pc, #40]	; (8003910 <_SetInterface+0x3c>)
 80038e6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80038ea:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
 80038ee:	4770      	bx	lr
 80038f0:	4a08      	ldr	r2, [pc, #32]	; (8003914 <_SetInterface+0x40>)
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <_SetInterface+0x44>)
 80038f4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 80038f8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80038fc:	4770      	bx	lr
 80038fe:	4907      	ldr	r1, [pc, #28]	; (800391c <_SetInterface+0x48>)
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <_SetInterface+0x4c>)
 8003902:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8003906:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
 800390a:	4770      	bx	lr
 800390c:	08003855 	.word	0x08003855
 8003910:	08003895 	.word	0x08003895
 8003914:	08003889 	.word	0x08003889
 8003918:	080038c9 	.word	0x080038c9
 800391c:	0800386d 	.word	0x0800386d
 8003920:	080038ad 	.word	0x080038ad

08003924 <GUIDRV_FlexColor_SetFunc66718>:
 8003924:	b510      	push	{r4, lr}
 8003926:	4604      	mov	r4, r0
 8003928:	f001 fd62 	bl	80053f0 <GUIDRV_FlexColor__InitOnce>
 800392c:	68a3      	ldr	r3, [r4, #8]
 800392e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8003930:	f243 516d 	movw	r1, #13677	; 0x356d
 8003934:	f022 0003 	bic.w	r0, r2, #3
 8003938:	f243 52f5 	movw	r2, #13813	; 0x35f5
 800393c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003940:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003944:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8003948:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800394c:	f243 7195 	movw	r1, #14229	; 0x3795
 8003950:	f243 72d9 	movw	r2, #14297	; 0x37d9
 8003954:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003958:	f6c0 0200 	movt	r2, #2048	; 0x800
 800395c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8003960:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003964:	f643 0105 	movw	r1, #14341	; 0x3805
 8003968:	f643 0231 	movw	r2, #14385	; 0x3831
 800396c:	84d8      	strh	r0, [r3, #38]	; 0x26
 800396e:	f643 00d5 	movw	r0, #14549	; 0x38d5
 8003972:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003976:	f6c0 0200 	movt	r2, #2048	; 0x800
 800397a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800397e:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8003982:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8003986:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 800398a:	bd10      	pop	{r4, pc}

0800398c <_ReadData>:
 800398c:	b508      	push	{r3, lr}
 800398e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8003992:	4798      	blx	r3
 8003994:	bd08      	pop	{r3, pc}
 8003996:	bf00      	nop

08003998 <_WriteData>:
 8003998:	b508      	push	{r3, lr}
 800399a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800399e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 80039a2:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 80039a6:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 80039aa:	2102      	movs	r1, #2
 80039ac:	3071      	adds	r0, #113	; 0x71
 80039ae:	4790      	blx	r2
 80039b0:	bd08      	pop	{r3, pc}
 80039b2:	bf00      	nop

080039b4 <_FillRect>:
 80039b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b8:	4db2      	ldr	r5, [pc, #712]	; (8003c84 <_FillRect+0x2d0>)
 80039ba:	b089      	sub	sp, #36	; 0x24
 80039bc:	682c      	ldr	r4, [r5, #0]
 80039be:	9007      	str	r0, [sp, #28]
 80039c0:	7c20      	ldrb	r0, [r4, #16]
 80039c2:	9e07      	ldr	r6, [sp, #28]
 80039c4:	9105      	str	r1, [sp, #20]
 80039c6:	07c0      	lsls	r0, r0, #31
 80039c8:	68b4      	ldr	r4, [r6, #8]
 80039ca:	4616      	mov	r6, r2
 80039cc:	f140 815c 	bpl.w	8003c88 <_FillRect+0x2d4>
 80039d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80039d2:	4282      	cmp	r2, r0
 80039d4:	f300 810b 	bgt.w	8003bee <_FillRect+0x23a>
 80039d8:	1a5f      	subs	r7, r3, r1
 80039da:	f107 0b01 	add.w	fp, r7, #1
 80039de:	465d      	mov	r5, fp
 80039e0:	4689      	mov	r9, r1
 80039e2:	4617      	mov	r7, r2
 80039e4:	469b      	mov	fp, r3
 80039e6:	f8d4 60c8 	ldr.w	r6, [r4, #200]	; 0xc8
 80039ea:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 80039ee:	2e00      	cmp	r6, #0
 80039f0:	f000 8109 	beq.w	8003c06 <_FillRect+0x252>
 80039f4:	e88d 0180 	stmia.w	sp, {r7, r8}
 80039f8:	9807      	ldr	r0, [sp, #28]
 80039fa:	9905      	ldr	r1, [sp, #20]
 80039fc:	463a      	mov	r2, r7
 80039fe:	465b      	mov	r3, fp
 8003a00:	47b0      	blx	r6
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	f000 80ad 	beq.w	8003b62 <_FillRect+0x1ae>
 8003a08:	f3c8 0140 	ubfx	r1, r8, #1, #1
 8003a0c:	42a9      	cmp	r1, r5
 8003a0e:	bf28      	it	cs
 8003a10:	4629      	movcs	r1, r5
 8003a12:	2d01      	cmp	r5, #1
 8003a14:	bf98      	it	ls
 8003a16:	4629      	movls	r1, r5
 8003a18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a1a:	2900      	cmp	r1, #0
 8003a1c:	f000 81c7 	beq.w	8003dae <_FillRect+0x3fa>
 8003a20:	4642      	mov	r2, r8
 8003a22:	f04f 0c01 	mov.w	ip, #1
 8003a26:	f832 0b02 	ldrh.w	r0, [r2], #2
 8003a2a:	4058      	eors	r0, r3
 8003a2c:	1e4e      	subs	r6, r1, #1
 8003a2e:	f822 0c02 	strh.w	r0, [r2, #-2]
 8003a32:	1e68      	subs	r0, r5, #1
 8003a34:	4561      	cmp	r1, ip
 8003a36:	ea06 060c 	and.w	r6, r6, ip
 8003a3a:	4696      	mov	lr, r2
 8003a3c:	d91f      	bls.n	8003a7e <_FillRect+0xca>
 8003a3e:	b156      	cbz	r6, 8003a56 <_FillRect+0xa2>
 8003a40:	f832 6b02 	ldrh.w	r6, [r2], #2
 8003a44:	f04f 0c02 	mov.w	ip, #2
 8003a48:	405e      	eors	r6, r3
 8003a4a:	3801      	subs	r0, #1
 8003a4c:	4561      	cmp	r1, ip
 8003a4e:	f822 6c02 	strh.w	r6, [r2, #-2]
 8003a52:	4696      	mov	lr, r2
 8003a54:	d913      	bls.n	8003a7e <_FillRect+0xca>
 8003a56:	f8b2 e000 	ldrh.w	lr, [r2]
 8003a5a:	4616      	mov	r6, r2
 8003a5c:	ea8e 0e03 	eor.w	lr, lr, r3
 8003a60:	f826 eb02 	strh.w	lr, [r6], #2
 8003a64:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8003a68:	f10c 0c02 	add.w	ip, ip, #2
 8003a6c:	1cb2      	adds	r2, r6, #2
 8003a6e:	3802      	subs	r0, #2
 8003a70:	ea8e 0603 	eor.w	r6, lr, r3
 8003a74:	4561      	cmp	r1, ip
 8003a76:	f822 6c02 	strh.w	r6, [r2, #-2]
 8003a7a:	4696      	mov	lr, r2
 8003a7c:	d8eb      	bhi.n	8003a56 <_FillRect+0xa2>
 8003a7e:	428d      	cmp	r5, r1
 8003a80:	d06f      	beq.n	8003b62 <_FillRect+0x1ae>
 8003a82:	1a6a      	subs	r2, r5, r1
 8003a84:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8003a88:	ea4f 064c 	mov.w	r6, ip, lsl #1
 8003a8c:	9206      	str	r2, [sp, #24]
 8003a8e:	9604      	str	r6, [sp, #16]
 8003a90:	f1bc 0f00 	cmp.w	ip, #0
 8003a94:	d041      	beq.n	8003b1a <_FillRect+0x166>
 8003a96:	2600      	movs	r6, #0
 8003a98:	f858 2011 	ldr.w	r2, [r8, r1, lsl #1]
 8003a9c:	f363 060f 	bfi	r6, r3, #0, #16
 8003aa0:	f10c 3aff 	add.w	sl, ip, #4294967295
 8003aa4:	f363 461f 	bfi	r6, r3, #16, #16
 8003aa8:	f8cd a00c 	str.w	sl, [sp, #12]
 8003aac:	4072      	eors	r2, r6
 8003aae:	eb08 0a41 	add.w	sl, r8, r1, lsl #1
 8003ab2:	f04f 0901 	mov.w	r9, #1
 8003ab6:	f848 2011 	str.w	r2, [r8, r1, lsl #1]
 8003aba:	9903      	ldr	r1, [sp, #12]
 8003abc:	45e1      	cmp	r9, ip
 8003abe:	ea01 0209 	and.w	r2, r1, r9
 8003ac2:	f10a 0104 	add.w	r1, sl, #4
 8003ac6:	d21f      	bcs.n	8003b08 <_FillRect+0x154>
 8003ac8:	b142      	cbz	r2, 8003adc <_FillRect+0x128>
 8003aca:	680a      	ldr	r2, [r1, #0]
 8003acc:	f04f 0902 	mov.w	r9, #2
 8003ad0:	4072      	eors	r2, r6
 8003ad2:	45e1      	cmp	r9, ip
 8003ad4:	468a      	mov	sl, r1
 8003ad6:	f841 2b04 	str.w	r2, [r1], #4
 8003ada:	d215      	bcs.n	8003b08 <_FillRect+0x154>
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	ea86 0803 	eor.w	r8, r6, r3
 8003ae8:	f842 8b04 	str.w	r8, [r2], #4
 8003aec:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003af0:	f109 0902 	add.w	r9, r9, #2
 8003af4:	ea86 0803 	eor.w	r8, r6, r3
 8003af8:	f8c1 8004 	str.w	r8, [r1, #4]
 8003afc:	1d11      	adds	r1, r2, #4
 8003afe:	45e1      	cmp	r9, ip
 8003b00:	f10a 0a08 	add.w	sl, sl, #8
 8003b04:	d3eb      	bcc.n	8003ade <_FillRect+0x12a>
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	9e04      	ldr	r6, [sp, #16]
 8003b0a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003b0e:	45b1      	cmp	r9, r6
 8003b10:	ebc6 0000 	rsb	r0, r6, r0
 8003b14:	eb0e 0e46 	add.w	lr, lr, r6, lsl #1
 8003b18:	d023      	beq.n	8003b62 <_FillRect+0x1ae>
 8003b1a:	f8be 1000 	ldrh.w	r1, [lr]
 8003b1e:	4672      	mov	r2, lr
 8003b20:	4059      	eors	r1, r3
 8003b22:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8003b26:	f822 1b02 	strh.w	r1, [r2], #2
 8003b2a:	ebce 0e00 	rsb	lr, lr, r0
 8003b2e:	f1ae 0602 	sub.w	r6, lr, #2
 8003b32:	4282      	cmp	r2, r0
 8003b34:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8003b38:	d013      	beq.n	8003b62 <_FillRect+0x1ae>
 8003b3a:	b129      	cbz	r1, 8003b48 <_FillRect+0x194>
 8003b3c:	8816      	ldrh	r6, [r2, #0]
 8003b3e:	405e      	eors	r6, r3
 8003b40:	f822 6b02 	strh.w	r6, [r2], #2
 8003b44:	4282      	cmp	r2, r0
 8003b46:	d00c      	beq.n	8003b62 <_FillRect+0x1ae>
 8003b48:	8816      	ldrh	r6, [r2, #0]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	405e      	eors	r6, r3
 8003b4e:	f821 6b02 	strh.w	r6, [r1], #2
 8003b52:	8856      	ldrh	r6, [r2, #2]
 8003b54:	460a      	mov	r2, r1
 8003b56:	ea86 0103 	eor.w	r1, r6, r3
 8003b5a:	f822 1b02 	strh.w	r1, [r2], #2
 8003b5e:	4282      	cmp	r2, r0
 8003b60:	d1f2      	bne.n	8003b48 <_FillRect+0x194>
 8003b62:	9700      	str	r7, [sp, #0]
 8003b64:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8003b68:	9905      	ldr	r1, [sp, #20]
 8003b6a:	463a      	mov	r2, r7
 8003b6c:	465b      	mov	r3, fp
 8003b6e:	4620      	mov	r0, r4
 8003b70:	47b0      	blx	r6
 8003b72:	2100      	movs	r1, #0
 8003b74:	07ea      	lsls	r2, r5, #31
 8003b76:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003b78:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003b7a:	4688      	mov	r8, r1
 8003b7c:	d513      	bpl.n	8003ba6 <_FillRect+0x1f2>
 8003b7e:	f836 2b02 	ldrh.w	r2, [r6], #2
 8003b82:	2101      	movs	r1, #1
 8003b84:	0a10      	lsrs	r0, r2, #8
 8003b86:	7018      	strb	r0, [r3, #0]
 8003b88:	705a      	strb	r2, [r3, #1]
 8003b8a:	4688      	mov	r8, r1
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	e00a      	b.n	8003ba6 <_FillRect+0x1f2>
 8003b90:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003b94:	1c41      	adds	r1, r0, #1
 8003b96:	7053      	strb	r3, [r2, #1]
 8003b98:	0a18      	lsrs	r0, r3, #8
 8003b9a:	1c93      	adds	r3, r2, #2
 8003b9c:	29fa      	cmp	r1, #250	; 0xfa
 8003b9e:	7010      	strb	r0, [r2, #0]
 8003ba0:	d028      	beq.n	8003bf4 <_FillRect+0x240>
 8003ba2:	f108 0801 	add.w	r8, r8, #1
 8003ba6:	1c48      	adds	r0, r1, #1
 8003ba8:	4545      	cmp	r5, r8
 8003baa:	f103 0202 	add.w	r2, r3, #2
 8003bae:	f108 0801 	add.w	r8, r8, #1
 8003bb2:	d011      	beq.n	8003bd8 <_FillRect+0x224>
 8003bb4:	f836 1b02 	ldrh.w	r1, [r6], #2
 8003bb8:	28fa      	cmp	r0, #250	; 0xfa
 8003bba:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8003bbe:	f883 c000 	strb.w	ip, [r3]
 8003bc2:	7059      	strb	r1, [r3, #1]
 8003bc4:	d1e4      	bne.n	8003b90 <_FillRect+0x1dc>
 8003bc6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8003bca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003bcc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003bd0:	4790      	blx	r2
 8003bd2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	e7db      	b.n	8003b90 <_FillRect+0x1dc>
 8003bd8:	b121      	cbz	r1, 8003be4 <_FillRect+0x230>
 8003bda:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8003bde:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003be0:	0049      	lsls	r1, r1, #1
 8003be2:	4798      	blx	r3
 8003be4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8003be6:	3701      	adds	r7, #1
 8003be8:	42be      	cmp	r6, r7
 8003bea:	f6bf aefc 	bge.w	80039e6 <_FillRect+0x32>
 8003bee:	b009      	add	sp, #36	; 0x24
 8003bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003bf8:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8003bfc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003bfe:	4790      	blx	r2
 8003c00:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003c02:	2100      	movs	r1, #0
 8003c04:	e7cd      	b.n	8003ba2 <_FillRect+0x1ee>
 8003c06:	9905      	ldr	r1, [sp, #20]
 8003c08:	4559      	cmp	r1, fp
 8003c0a:	f73f aefa 	bgt.w	8003a02 <_FillRect+0x4e>
 8003c0e:	463a      	mov	r2, r7
 8003c10:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8003c14:	9807      	ldr	r0, [sp, #28]
 8003c16:	ebc1 060b 	rsb	r6, r1, fp
 8003c1a:	4798      	blx	r3
 8003c1c:	9a05      	ldr	r2, [sp, #20]
 8003c1e:	f828 0b02 	strh.w	r0, [r8], #2
 8003c22:	f102 0901 	add.w	r9, r2, #1
 8003c26:	45cb      	cmp	fp, r9
 8003c28:	f006 0601 	and.w	r6, r6, #1
 8003c2c:	db26      	blt.n	8003c7c <_FillRect+0x2c8>
 8003c2e:	b15e      	cbz	r6, 8003c48 <_FillRect+0x294>
 8003c30:	4649      	mov	r1, r9
 8003c32:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8003c36:	9807      	ldr	r0, [sp, #28]
 8003c38:	463a      	mov	r2, r7
 8003c3a:	4798      	blx	r3
 8003c3c:	f109 0901 	add.w	r9, r9, #1
 8003c40:	45cb      	cmp	fp, r9
 8003c42:	f828 0b02 	strh.w	r0, [r8], #2
 8003c46:	db19      	blt.n	8003c7c <_FillRect+0x2c8>
 8003c48:	9e07      	ldr	r6, [sp, #28]
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	463a      	mov	r2, r7
 8003c4e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8003c52:	4630      	mov	r0, r6
 8003c54:	4798      	blx	r3
 8003c56:	46c2      	mov	sl, r8
 8003c58:	f109 0901 	add.w	r9, r9, #1
 8003c5c:	f82a 0b02 	strh.w	r0, [sl], #2
 8003c60:	4649      	mov	r1, r9
 8003c62:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 8003c66:	4630      	mov	r0, r6
 8003c68:	463a      	mov	r2, r7
 8003c6a:	4798      	blx	r3
 8003c6c:	f109 0901 	add.w	r9, r9, #1
 8003c70:	45cb      	cmp	fp, r9
 8003c72:	f8a8 0002 	strh.w	r0, [r8, #2]
 8003c76:	f10a 0802 	add.w	r8, sl, #2
 8003c7a:	dae6      	bge.n	8003c4a <_FillRect+0x296>
 8003c7c:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8003c80:	e6bf      	b.n	8003a02 <_FillRect+0x4e>
 8003c82:	bf00      	nop
 8003c84:	1fffc808 	.word	0x1fffc808
 8003c88:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003c8a:	1a5f      	subs	r7, r3, r1
 8003c8c:	9000      	str	r0, [sp, #0]
 8003c8e:	ebc2 0e00 	rsb	lr, r2, r0
 8003c92:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8003c96:	4620      	mov	r0, r4
 8003c98:	3701      	adds	r7, #1
 8003c9a:	4689      	mov	r9, r1
 8003c9c:	fb0e 7707 	mla	r7, lr, r7, r7
 8003ca0:	47b0      	blx	r6
 8003ca2:	682a      	ldr	r2, [r5, #0]
 8003ca4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003ca6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ca8:	6808      	ldr	r0, [r1, #0]
 8003caa:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8003cae:	b2c0      	uxtb	r0, r0
 8003cb0:	2f00      	cmp	r7, #0
 8003cb2:	d09c      	beq.n	8003bee <_FillRect+0x23a>
 8003cb4:	2ff9      	cmp	r7, #249	; 0xf9
 8003cb6:	bf34      	ite	cc
 8003cb8:	46b8      	movcc	r8, r7
 8003cba:	f04f 08f9 	movcs.w	r8, #249	; 0xf9
 8003cbe:	ea4f 0e58 	mov.w	lr, r8, lsr #1
 8003cc2:	f103 0901 	add.w	r9, r3, #1
 8003cc6:	f108 3aff 	add.w	sl, r8, #4294967295
 8003cca:	ea4f 0c4e 	mov.w	ip, lr, lsl #1
 8003cce:	f1be 0f00 	cmp.w	lr, #0
 8003cd2:	d06a      	beq.n	8003daa <_FillRect+0x3f6>
 8003cd4:	f019 0f03 	tst.w	r9, #3
 8003cd8:	bf14      	ite	ne
 8003cda:	2200      	movne	r2, #0
 8003cdc:	2201      	moveq	r2, #1
 8003cde:	f1b8 0f01 	cmp.w	r8, #1
 8003ce2:	bf94      	ite	ls
 8003ce4:	2200      	movls	r2, #0
 8003ce6:	f002 0201 	andhi.w	r2, r2, #1
 8003cea:	f082 0501 	eor.w	r5, r2, #1
 8003cee:	2a00      	cmp	r2, #0
 8003cf0:	d05b      	beq.n	8003daa <_FillRect+0x3f6>
 8003cf2:	f366 0507 	bfi	r5, r6, #0, #8
 8003cf6:	f360 250f 	bfi	r5, r0, #8, #8
 8003cfa:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f366 4517 	bfi	r5, r6, #16, #8
 8003d04:	f360 651f 	bfi	r5, r0, #24, #8
 8003d08:	ea01 0b02 	and.w	fp, r1, r2
 8003d0c:	1d59      	adds	r1, r3, #5
 8003d0e:	4572      	cmp	r2, lr
 8003d10:	f8c9 5000 	str.w	r5, [r9]
 8003d14:	d210      	bcs.n	8003d38 <_FillRect+0x384>
 8003d16:	f1bb 0f00 	cmp.w	fp, #0
 8003d1a:	d005      	beq.n	8003d28 <_FillRect+0x374>
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	4572      	cmp	r2, lr
 8003d20:	600d      	str	r5, [r1, #0]
 8003d22:	f103 0109 	add.w	r1, r3, #9
 8003d26:	d207      	bcs.n	8003d38 <_FillRect+0x384>
 8003d28:	460b      	mov	r3, r1
 8003d2a:	3202      	adds	r2, #2
 8003d2c:	f843 5b04 	str.w	r5, [r3], #4
 8003d30:	604d      	str	r5, [r1, #4]
 8003d32:	1d19      	adds	r1, r3, #4
 8003d34:	4572      	cmp	r2, lr
 8003d36:	d3f7      	bcc.n	8003d28 <_FillRect+0x374>
 8003d38:	45e0      	cmp	r8, ip
 8003d3a:	eb09 024c 	add.w	r2, r9, ip, lsl #1
 8003d3e:	ebcc 0a0a 	rsb	sl, ip, sl
 8003d42:	d028      	beq.n	8003d96 <_FillRect+0x3e2>
 8003d44:	1d15      	adds	r5, r2, #4
 8003d46:	eb05 014a 	add.w	r1, r5, sl, lsl #1
 8003d4a:	3202      	adds	r2, #2
 8003d4c:	1a8b      	subs	r3, r1, r2
 8003d4e:	1e9d      	subs	r5, r3, #2
 8003d50:	1c93      	adds	r3, r2, #2
 8003d52:	428b      	cmp	r3, r1
 8003d54:	f802 6c02 	strb.w	r6, [r2, #-2]
 8003d58:	f802 0c01 	strb.w	r0, [r2, #-1]
 8003d5c:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8003d60:	d019      	beq.n	8003d96 <_FillRect+0x3e2>
 8003d62:	b135      	cbz	r5, 8003d72 <_FillRect+0x3be>
 8003d64:	f803 6c02 	strb.w	r6, [r3, #-2]
 8003d68:	f803 0c01 	strb.w	r0, [r3, #-1]
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	428b      	cmp	r3, r1
 8003d70:	d011      	beq.n	8003d96 <_FillRect+0x3e2>
 8003d72:	461a      	mov	r2, r3
 8003d74:	f803 6c02 	strb.w	r6, [r3, #-2]
 8003d78:	f803 0c01 	strb.w	r0, [r3, #-1]
 8003d7c:	f802 6b02 	strb.w	r6, [r2], #2
 8003d80:	1c93      	adds	r3, r2, #2
 8003d82:	428b      	cmp	r3, r1
 8003d84:	f802 0c01 	strb.w	r0, [r2, #-1]
 8003d88:	d1f3      	bne.n	8003d72 <_FillRect+0x3be>
 8003d8a:	e004      	b.n	8003d96 <_FillRect+0x3e2>
 8003d8c:	2ff9      	cmp	r7, #249	; 0xf9
 8003d8e:	bf34      	ite	cc
 8003d90:	46b8      	movcc	r8, r7
 8003d92:	f04f 08f9 	movcs.w	r8, #249	; 0xf9
 8003d96:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8003d9a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8003d9e:	4648      	mov	r0, r9
 8003da0:	4798      	blx	r3
 8003da2:	ebb7 0708 	subs.w	r7, r7, r8
 8003da6:	d1f1      	bne.n	8003d8c <_FillRect+0x3d8>
 8003da8:	e721      	b.n	8003bee <_FillRect+0x23a>
 8003daa:	464a      	mov	r2, r9
 8003dac:	e7ca      	b.n	8003d44 <_FillRect+0x390>
 8003dae:	46c6      	mov	lr, r8
 8003db0:	4628      	mov	r0, r5
 8003db2:	e666      	b.n	8003a82 <_FillRect+0xce>

08003db4 <_DrawBitmap>:
 8003db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db8:	b093      	sub	sp, #76	; 0x4c
 8003dba:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8003dbc:	9107      	str	r1, [sp, #28]
 8003dbe:	1e66      	subs	r6, r4, #1
 8003dc0:	9606      	str	r6, [sp, #24]
 8003dc2:	9906      	ldr	r1, [sp, #24]
 8003dc4:	900c      	str	r0, [sp, #48]	; 0x30
 8003dc6:	6880      	ldr	r0, [r0, #8]
 8003dc8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
 8003dcc:	2901      	cmp	r1, #1
 8003dce:	4616      	mov	r6, r2
 8003dd0:	900d      	str	r0, [sp, #52]	; 0x34
 8003dd2:	f240 82da 	bls.w	800438a <_DrawBitmap+0x5d6>
 8003dd6:	2c04      	cmp	r4, #4
 8003dd8:	f000 82d7 	beq.w	800438a <_DrawBitmap+0x5d6>
 8003ddc:	2c08      	cmp	r4, #8
 8003dde:	f000 82d4 	beq.w	800438a <_DrawBitmap+0x5d6>
 8003de2:	9a07      	ldr	r2, [sp, #28]
 8003de4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003de8:	1974      	adds	r4, r6, r5
 8003dea:	18d1      	adds	r1, r2, r3
 8003dec:	3c01      	subs	r4, #1
 8003dee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003df0:	9400      	str	r4, [sp, #0]
 8003df2:	180b      	adds	r3, r1, r0
 8003df4:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8003df8:	4610      	mov	r0, r2
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	47a0      	blx	r4
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	dd3a      	ble.n	8003e7a <_DrawBitmap+0xc6>
 8003e04:	9c07      	ldr	r4, [sp, #28]
 8003e06:	9604      	str	r6, [sp, #16]
 8003e08:	9820      	ldr	r0, [sp, #128]	; 0x80
 8003e0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003e0c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003e0e:	1823      	adds	r3, r4, r0
 8003e10:	1e71      	subs	r1, r6, #1
 8003e12:	9110      	str	r1, [sp, #64]	; 0x40
 8003e14:	930e      	str	r3, [sp, #56]	; 0x38
 8003e16:	1b16      	subs	r6, r2, r4
 8003e18:	9904      	ldr	r1, [sp, #16]
 8003e1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003e1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003e1e:	9605      	str	r6, [sp, #20]
 8003e20:	194d      	adds	r5, r1, r5
 8003e22:	1823      	adds	r3, r4, r0
 8003e24:	950b      	str	r5, [sp, #44]	; 0x2c
 8003e26:	9311      	str	r3, [sp, #68]	; 0x44
 8003e28:	9a05      	ldr	r2, [sp, #20]
 8003e2a:	9e07      	ldr	r6, [sp, #28]
 8003e2c:	9906      	ldr	r1, [sp, #24]
 8003e2e:	1994      	adds	r4, r2, r6
 8003e30:	290f      	cmp	r1, #15
 8003e32:	d817      	bhi.n	8003e64 <_DrawBitmap+0xb0>
 8003e34:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003e38:	01710224 	.word	0x01710224
 8003e3c:	00bf0016 	.word	0x00bf0016
 8003e40:	00160016 	.word	0x00160016
 8003e44:	00560016 	.word	0x00560016
 8003e48:	00160016 	.word	0x00160016
 8003e4c:	00160016 	.word	0x00160016
 8003e50:	00160016 	.word	0x00160016
 8003e54:	00240016 	.word	0x00240016
 8003e58:	b121      	cbz	r1, 8003e64 <_DrawBitmap+0xb0>
 8003e5a:	f8d5 6118 	ldr.w	r6, [r5, #280]	; 0x118
 8003e5e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8003e60:	0049      	lsls	r1, r1, #1
 8003e62:	47b0      	blx	r6
 8003e64:	9904      	ldr	r1, [sp, #16]
 8003e66:	9805      	ldr	r0, [sp, #20]
 8003e68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003e6a:	1c4e      	adds	r6, r1, #1
 8003e6c:	9604      	str	r6, [sp, #16]
 8003e6e:	9e04      	ldr	r6, [sp, #16]
 8003e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e72:	1883      	adds	r3, r0, r2
 8003e74:	428e      	cmp	r6, r1
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	d1d6      	bne.n	8003e28 <_DrawBitmap+0x74>
 8003e7a:	b013      	add	sp, #76	; 0x4c
 8003e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e80:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003e82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003e84:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8003e86:	2100      	movs	r1, #0
 8003e88:	07fd      	lsls	r5, r7, #31
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	f100 8286 	bmi.w	800439c <_DrawBitmap+0x5e8>
 8003e90:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8003e94:	1c56      	adds	r6, r2, #1
 8003e96:	1c4d      	adds	r5, r1, #1
 8003e98:	42ba      	cmp	r2, r7
 8003e9a:	f103 0002 	add.w	r0, r3, #2
 8003e9e:	d018      	beq.n	8003ed2 <_DrawBitmap+0x11e>
 8003ea0:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8003ea4:	0a11      	lsrs	r1, r2, #8
 8003ea6:	2dfa      	cmp	r5, #250	; 0xfa
 8003ea8:	7019      	strb	r1, [r3, #0]
 8003eaa:	705a      	strb	r2, [r3, #1]
 8003eac:	f000 8281 	beq.w	80043b2 <_DrawBitmap+0x5fe>
 8003eb0:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
 8003eb4:	1c69      	adds	r1, r5, #1
 8003eb6:	0a1a      	lsrs	r2, r3, #8
 8003eb8:	7043      	strb	r3, [r0, #1]
 8003eba:	1c83      	adds	r3, r0, #2
 8003ebc:	29fa      	cmp	r1, #250	; 0xfa
 8003ebe:	7002      	strb	r2, [r0, #0]
 8003ec0:	f000 8257 	beq.w	8004372 <_DrawBitmap+0x5be>
 8003ec4:	1c72      	adds	r2, r6, #1
 8003ec6:	1c56      	adds	r6, r2, #1
 8003ec8:	1c4d      	adds	r5, r1, #1
 8003eca:	42ba      	cmp	r2, r7
 8003ecc:	f103 0002 	add.w	r0, r3, #2
 8003ed0:	d1e6      	bne.n	8003ea0 <_DrawBitmap+0xec>
 8003ed2:	2900      	cmp	r1, #0
 8003ed4:	d0c6      	beq.n	8003e64 <_DrawBitmap+0xb0>
 8003ed6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003ed8:	0049      	lsls	r1, r1, #1
 8003eda:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8003ede:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003ee0:	4798      	blx	r3
 8003ee2:	e7bf      	b.n	8003e64 <_DrawBitmap+0xb0>
 8003ee4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003ee6:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003ee8:	68b5      	ldr	r5, [r6, #8]
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0ba      	beq.n	8003e64 <_DrawBitmap+0xb0>
 8003eee:	f64c 0308 	movw	r3, #51208	; 0xc808
 8003ef2:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8003ef6:	6819      	ldr	r1, [r3, #0]
 8003ef8:	7c0a      	ldrb	r2, [r1, #16]
 8003efa:	f012 0603 	ands.w	r6, r2, #3
 8003efe:	f040 8263 	bne.w	80043c8 <_DrawBitmap+0x614>
 8003f02:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003f04:	2e00      	cmp	r6, #0
 8003f06:	ddad      	ble.n	8003e64 <_DrawBitmap+0xb0>
 8003f08:	46a0      	mov	r8, r4
 8003f0a:	9f07      	ldr	r7, [sp, #28]
 8003f0c:	f818 2b01 	ldrb.w	r2, [r8], #1
 8003f10:	9921      	ldr	r1, [sp, #132]	; 0x84
 8003f12:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003f16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f1a:	19f0      	adds	r0, r6, r7
 8003f1c:	9e05      	ldr	r6, [sp, #20]
 8003f1e:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8003f22:	1987      	adds	r7, r0, r6
 8003f24:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8003f28:	f105 0671 	add.w	r6, r5, #113	; 0x71
 8003f2c:	43e4      	mvns	r4, r4
 8003f2e:	f885 0071 	strb.w	r0, [r5, #113]	; 0x71
 8003f32:	2102      	movs	r1, #2
 8003f34:	4630      	mov	r0, r6
 8003f36:	193c      	adds	r4, r7, r4
 8003f38:	4798      	blx	r3
 8003f3a:	45b8      	cmp	r8, r7
 8003f3c:	f004 0401 	and.w	r4, r4, #1
 8003f40:	d090      	beq.n	8003e64 <_DrawBitmap+0xb0>
 8003f42:	b194      	cbz	r4, 8003f6a <_DrawBitmap+0x1b6>
 8003f44:	f818 2b01 	ldrb.w	r2, [r8], #1
 8003f48:	9921      	ldr	r1, [sp, #132]	; 0x84
 8003f4a:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003f4e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8003f52:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003f56:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
 8003f60:	4630      	mov	r0, r6
 8003f62:	4798      	blx	r3
 8003f64:	45b8      	cmp	r8, r7
 8003f66:	f43f af7d 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8003f6a:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
 8003f6e:	4644      	mov	r4, r8
 8003f70:	4630      	mov	r0, r6
 8003f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f76:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003f7a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
 8003f7e:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8003f82:	2102      	movs	r1, #2
 8003f84:	f885 c071 	strb.w	ip, [r5, #113]	; 0x71
 8003f88:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8003f8c:	4798      	blx	r3
 8003f8e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8003f92:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8003f96:	f859 2020 	ldr.w	r2, [r9, r0, lsl #2]
 8003f9a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003f9e:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8003fa2:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f104 0801 	add.w	r8, r4, #1
 8003fae:	4798      	blx	r3
 8003fb0:	45b8      	cmp	r8, r7
 8003fb2:	d1dc      	bne.n	8003f6e <_DrawBitmap+0x1ba>
 8003fb4:	e756      	b.n	8003e64 <_DrawBitmap+0xb0>
 8003fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fb8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8003fba:	68ad      	ldr	r5, [r5, #8]
 8003fbc:	2e00      	cmp	r6, #0
 8003fbe:	f43f af51 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8003fc2:	f64c 0008 	movw	r0, #51208	; 0xc808
 8003fc6:	f6c1 70ff 	movt	r0, #8191	; 0x1fff
 8003fca:	9a05      	ldr	r2, [sp, #20]
 8003fcc:	6803      	ldr	r3, [r0, #0]
 8003fce:	9907      	ldr	r1, [sp, #28]
 8003fd0:	f893 b010 	ldrb.w	fp, [r3, #16]
 8003fd4:	f812 9001 	ldrb.w	r9, [r2, r1]
 8003fd8:	f01b 0b03 	ands.w	fp, fp, #3
 8003fdc:	f040 8259 	bne.w	8004492 <_DrawBitmap+0x6de>
 8003fe0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8003fe2:	f1c7 0601 	rsb	r6, r7, #1
 8003fe6:	00b1      	lsls	r1, r6, #2
 8003fe8:	f1c1 0004 	rsb	r0, r1, #4
 8003fec:	27f0      	movs	r7, #240	; 0xf0
 8003fee:	fa47 f200 	asr.w	r2, r7, r0
 8003ff2:	ea02 0309 	and.w	r3, r2, r9
 8003ff6:	fa23 f101 	lsr.w	r1, r3, r1
 8003ffa:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003ffc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004000:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8004004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004006:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 800400a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800400e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004010:	f885 0071 	strb.w	r0, [r5, #113]	; 0x71
 8004014:	f105 0671 	add.w	r6, r5, #113	; 0x71
 8004018:	f101 38ff 	add.w	r8, r1, #4294967295
 800401c:	f102 0a01 	add.w	sl, r2, #1
 8004020:	2102      	movs	r1, #2
 8004022:	4630      	mov	r0, r6
 8004024:	4798      	blx	r3
 8004026:	f1ba 0f02 	cmp.w	sl, #2
 800402a:	f008 0801 	and.w	r8, r8, #1
 800402e:	f000 8594 	beq.w	8004b5a <_DrawBitmap+0xda6>
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	f1b3 0b01 	subs.w	fp, r3, #1
 8004038:	f43f af14 	beq.w	8003e64 <_DrawBitmap+0xb0>
 800403c:	f1b8 0f00 	cmp.w	r8, #0
 8004040:	d022      	beq.n	8004088 <_DrawBitmap+0x2d4>
 8004042:	f1ca 0001 	rsb	r0, sl, #1
 8004046:	0081      	lsls	r1, r0, #2
 8004048:	f1c1 0204 	rsb	r2, r1, #4
 800404c:	fa47 f302 	asr.w	r3, r7, r2
 8004050:	ea03 0209 	and.w	r2, r3, r9
 8004054:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004056:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800405a:	fa22 f201 	lsr.w	r2, r2, r1
 800405e:	f10a 0a01 	add.w	sl, sl, #1
 8004062:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8004066:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800406a:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 800406e:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8004072:	2102      	movs	r1, #2
 8004074:	4630      	mov	r0, r6
 8004076:	4798      	blx	r3
 8004078:	f1ba 0f02 	cmp.w	sl, #2
 800407c:	f000 8606 	beq.w	8004c8c <_DrawBitmap+0xed8>
 8004080:	f1bb 0b01 	subs.w	fp, fp, #1
 8004084:	f43f aeee 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004088:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800408c:	e01f      	b.n	80040ce <_DrawBitmap+0x31a>
 800408e:	f1ca 0201 	rsb	r2, sl, #1
 8004092:	0093      	lsls	r3, r2, #2
 8004094:	f1c3 0204 	rsb	r2, r3, #4
 8004098:	fa47 f202 	asr.w	r2, r7, r2
 800409c:	ea02 0209 	and.w	r2, r2, r9
 80040a0:	fa22 f203 	lsr.w	r2, r2, r3
 80040a4:	f10a 0a01 	add.w	sl, sl, #1
 80040a8:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80040ac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80040b0:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 80040b4:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 80040b8:	f885 e071 	strb.w	lr, [r5, #113]	; 0x71
 80040bc:	4798      	blx	r3
 80040be:	f1ba 0f02 	cmp.w	sl, #2
 80040c2:	f000 83f6 	beq.w	80048b2 <_DrawBitmap+0xafe>
 80040c6:	f1bb 0b01 	subs.w	fp, fp, #1
 80040ca:	f43f aecb 	beq.w	8003e64 <_DrawBitmap+0xb0>
 80040ce:	f1ca 0301 	rsb	r3, sl, #1
 80040d2:	0098      	lsls	r0, r3, #2
 80040d4:	f1c0 0204 	rsb	r2, r0, #4
 80040d8:	fa47 f102 	asr.w	r1, r7, r2
 80040dc:	ea01 0309 	and.w	r3, r1, r9
 80040e0:	fa23 f000 	lsr.w	r0, r3, r0
 80040e4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80040e8:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
 80040ec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80040f0:	4630      	mov	r0, r6
 80040f2:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 80040f6:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 80040fa:	2102      	movs	r1, #2
 80040fc:	4798      	blx	r3
 80040fe:	f10a 0a01 	add.w	sl, sl, #1
 8004102:	2102      	movs	r1, #2
 8004104:	458a      	cmp	sl, r1
 8004106:	4630      	mov	r0, r6
 8004108:	f10b 3bff 	add.w	fp, fp, #4294967295
 800410c:	d1bf      	bne.n	800408e <_DrawBitmap+0x2da>
 800410e:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004112:	f04f 0a00 	mov.w	sl, #0
 8004116:	3401      	adds	r4, #1
 8004118:	e7b9      	b.n	800408e <_DrawBitmap+0x2da>
 800411a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800411c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800411e:	68ad      	ldr	r5, [r5, #8]
 8004120:	2e00      	cmp	r6, #0
 8004122:	f43f ae9f 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004126:	f64c 0008 	movw	r0, #51208	; 0xc808
 800412a:	f6c1 70ff 	movt	r0, #8191	; 0x1fff
 800412e:	9b05      	ldr	r3, [sp, #20]
 8004130:	6801      	ldr	r1, [r0, #0]
 8004132:	9a07      	ldr	r2, [sp, #28]
 8004134:	f891 c010 	ldrb.w	ip, [r1, #16]
 8004138:	f813 9002 	ldrb.w	r9, [r3, r2]
 800413c:	f01c 0b03 	ands.w	fp, ip, #3
 8004140:	f040 822e 	bne.w	80045a0 <_DrawBitmap+0x7ec>
 8004144:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8004146:	f1c7 0603 	rsb	r6, r7, #3
 800414a:	0071      	lsls	r1, r6, #1
 800414c:	f1c1 0006 	rsb	r0, r1, #6
 8004150:	27c0      	movs	r7, #192	; 0xc0
 8004152:	fa47 f200 	asr.w	r2, r7, r0
 8004156:	ea02 0309 	and.w	r3, r2, r9
 800415a:	fa23 f101 	lsr.w	r1, r3, r1
 800415e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004160:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004164:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8004168:	9909      	ldr	r1, [sp, #36]	; 0x24
 800416a:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 800416e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8004172:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004174:	f885 0071 	strb.w	r0, [r5, #113]	; 0x71
 8004178:	f105 0671 	add.w	r6, r5, #113	; 0x71
 800417c:	f101 38ff 	add.w	r8, r1, #4294967295
 8004180:	f102 0a01 	add.w	sl, r2, #1
 8004184:	2102      	movs	r1, #2
 8004186:	4630      	mov	r0, r6
 8004188:	4798      	blx	r3
 800418a:	f1ba 0f04 	cmp.w	sl, #4
 800418e:	f008 0801 	and.w	r8, r8, #1
 8004192:	f000 84ed 	beq.w	8004b70 <_DrawBitmap+0xdbc>
 8004196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004198:	f1b3 0b01 	subs.w	fp, r3, #1
 800419c:	f43f ae62 	beq.w	8003e64 <_DrawBitmap+0xb0>
 80041a0:	f1b8 0f00 	cmp.w	r8, #0
 80041a4:	d022      	beq.n	80041ec <_DrawBitmap+0x438>
 80041a6:	f1ca 0003 	rsb	r0, sl, #3
 80041aa:	0041      	lsls	r1, r0, #1
 80041ac:	f1c1 0206 	rsb	r2, r1, #6
 80041b0:	fa47 f302 	asr.w	r3, r7, r2
 80041b4:	ea03 0209 	and.w	r2, r3, r9
 80041b8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80041ba:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80041be:	fa22 f201 	lsr.w	r2, r2, r1
 80041c2:	f10a 0a01 	add.w	sl, sl, #1
 80041c6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80041ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80041ce:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 80041d2:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 80041d6:	2102      	movs	r1, #2
 80041d8:	4630      	mov	r0, r6
 80041da:	4798      	blx	r3
 80041dc:	f1ba 0f04 	cmp.w	sl, #4
 80041e0:	f000 855b 	beq.w	8004c9a <_DrawBitmap+0xee6>
 80041e4:	f1bb 0b01 	subs.w	fp, fp, #1
 80041e8:	f43f ae3c 	beq.w	8003e64 <_DrawBitmap+0xb0>
 80041ec:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80041f0:	e01f      	b.n	8004232 <_DrawBitmap+0x47e>
 80041f2:	f1ca 0203 	rsb	r2, sl, #3
 80041f6:	0053      	lsls	r3, r2, #1
 80041f8:	f1c3 0206 	rsb	r2, r3, #6
 80041fc:	fa47 f202 	asr.w	r2, r7, r2
 8004200:	ea02 0209 	and.w	r2, r2, r9
 8004204:	fa22 f203 	lsr.w	r2, r2, r3
 8004208:	f10a 0a01 	add.w	sl, sl, #1
 800420c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8004210:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004214:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8004218:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 800421c:	f885 e071 	strb.w	lr, [r5, #113]	; 0x71
 8004220:	4798      	blx	r3
 8004222:	f1ba 0f04 	cmp.w	sl, #4
 8004226:	f000 833e 	beq.w	80048a6 <_DrawBitmap+0xaf2>
 800422a:	f1bb 0b01 	subs.w	fp, fp, #1
 800422e:	f43f ae19 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004232:	f1ca 0303 	rsb	r3, sl, #3
 8004236:	0058      	lsls	r0, r3, #1
 8004238:	f1c0 0206 	rsb	r2, r0, #6
 800423c:	fa47 f102 	asr.w	r1, r7, r2
 8004240:	ea01 0309 	and.w	r3, r1, r9
 8004244:	fa23 f000 	lsr.w	r0, r3, r0
 8004248:	f10a 0a01 	add.w	sl, sl, #1
 800424c:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
 8004250:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004254:	f885 2072 	strb.w	r2, [r5, #114]	; 0x72
 8004258:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800425c:	4630      	mov	r0, r6
 800425e:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8004262:	2102      	movs	r1, #2
 8004264:	4798      	blx	r3
 8004266:	2102      	movs	r1, #2
 8004268:	f1ba 0f04 	cmp.w	sl, #4
 800426c:	4630      	mov	r0, r6
 800426e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004272:	d1be      	bne.n	80041f2 <_DrawBitmap+0x43e>
 8004274:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004278:	f04f 0a00 	mov.w	sl, #0
 800427c:	3401      	adds	r4, #1
 800427e:	e7b8      	b.n	80041f2 <_DrawBitmap+0x43e>
 8004280:	f64c 0508 	movw	r5, #51208	; 0xc808
 8004284:	f6c1 75ff 	movt	r5, #8191	; 0x1fff
 8004288:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800428a:	6828      	ldr	r0, [r5, #0]
 800428c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800428e:	7c01      	ldrb	r1, [r0, #16]
 8004290:	68b5      	ldr	r5, [r6, #8]
 8004292:	e893 0044 	ldmia.w	r3, {r2, r6}
 8004296:	f001 0003 	and.w	r0, r1, #3
 800429a:	2802      	cmp	r0, #2
 800429c:	960a      	str	r6, [sp, #40]	; 0x28
 800429e:	f000 8289 	beq.w	80047b4 <_DrawBitmap+0xa00>
 80042a2:	2803      	cmp	r0, #3
 80042a4:	f000 8208 	beq.w	80046b8 <_DrawBitmap+0x904>
 80042a8:	2801      	cmp	r0, #1
 80042aa:	f000 8205 	beq.w	80046b8 <_DrawBitmap+0x904>
 80042ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80042b0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80042b2:	7821      	ldrb	r1, [r4, #0]
 80042b4:	f04f 0880 	mov.w	r8, #128	; 0x80
 80042b8:	1e78      	subs	r0, r7, #1
 80042ba:	fa48 f306 	asr.w	r3, r8, r6
 80042be:	fa1f f982 	uxth.w	r9, r2
 80042c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042c4:	f000 0001 	and.w	r0, r0, #1
 80042c8:	4219      	tst	r1, r3
 80042ca:	f105 0771 	add.w	r7, r5, #113	; 0x71
 80042ce:	fa1f fb82 	uxth.w	fp, r2
 80042d2:	9008      	str	r0, [sp, #32]
 80042d4:	f040 81ee 	bne.w	80046b4 <_DrawBitmap+0x900>
 80042d8:	4649      	mov	r1, r9
 80042da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042dc:	f885 1072 	strb.w	r1, [r5, #114]	; 0x72
 80042e0:	0a0e      	lsrs	r6, r1, #8
 80042e2:	f885 6071 	strb.w	r6, [r5, #113]	; 0x71
 80042e6:	2102      	movs	r1, #2
 80042e8:	1c56      	adds	r6, r2, #1
 80042ea:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80042ee:	4638      	mov	r0, r7
 80042f0:	4798      	blx	r3
 80042f2:	2e08      	cmp	r6, #8
 80042f4:	f000 84eb 	beq.w	8004cce <_DrawBitmap+0xf1a>
 80042f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042fa:	f1b0 0a01 	subs.w	sl, r0, #1
 80042fe:	f43f adb1 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004302:	9908      	ldr	r1, [sp, #32]
 8004304:	b1b9      	cbz	r1, 8004336 <_DrawBitmap+0x582>
 8004306:	7822      	ldrb	r2, [r4, #0]
 8004308:	fa48 f306 	asr.w	r3, r8, r6
 800430c:	421a      	tst	r2, r3
 800430e:	d02e      	beq.n	800436e <_DrawBitmap+0x5ba>
 8004310:	4658      	mov	r0, fp
 8004312:	0a01      	lsrs	r1, r0, #8
 8004314:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 8004318:	f885 0072 	strb.w	r0, [r5, #114]	; 0x72
 800431c:	2102      	movs	r1, #2
 800431e:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004322:	4638      	mov	r0, r7
 8004324:	3601      	adds	r6, #1
 8004326:	4790      	blx	r2
 8004328:	2e08      	cmp	r6, #8
 800432a:	f000 82b9 	beq.w	80048a0 <_DrawBitmap+0xaec>
 800432e:	f1ba 0a01 	subs.w	sl, sl, #1
 8004332:	f43f ad97 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004336:	7820      	ldrb	r0, [r4, #0]
 8004338:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 800433c:	fa48 f306 	asr.w	r3, r8, r6
 8004340:	4218      	tst	r0, r3
 8004342:	bf14      	ite	ne
 8004344:	465b      	movne	r3, fp
 8004346:	464b      	moveq	r3, r9
 8004348:	0a19      	lsrs	r1, r3, #8
 800434a:	f885 1071 	strb.w	r1, [r5, #113]	; 0x71
 800434e:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
 8004352:	2102      	movs	r1, #2
 8004354:	4638      	mov	r0, r7
 8004356:	3601      	adds	r6, #1
 8004358:	4790      	blx	r2
 800435a:	2e08      	cmp	r6, #8
 800435c:	f000 82af 	beq.w	80048be <_DrawBitmap+0xb0a>
 8004360:	7820      	ldrb	r0, [r4, #0]
 8004362:	fa48 f306 	asr.w	r3, r8, r6
 8004366:	4218      	tst	r0, r3
 8004368:	f10a 3aff 	add.w	sl, sl, #4294967295
 800436c:	d1d0      	bne.n	8004310 <_DrawBitmap+0x55c>
 800436e:	4648      	mov	r0, r9
 8004370:	e7cf      	b.n	8004312 <_DrawBitmap+0x55e>
 8004372:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004376:	f8d8 5118 	ldr.w	r5, [r8, #280]	; 0x118
 800437a:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 800437e:	47a8      	blx	r5
 8004380:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
 8004384:	2100      	movs	r1, #0
 8004386:	1c72      	adds	r2, r6, #1
 8004388:	e59d      	b.n	8003ec6 <_DrawBitmap+0x112>
 800438a:	4bb7      	ldr	r3, [pc, #732]	; (8004668 <_DrawBitmap+0x8b4>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	7c10      	ldrb	r0, [r2, #16]
 8004390:	f000 0103 	and.w	r1, r0, #3
 8004394:	2902      	cmp	r1, #2
 8004396:	f47f ad24 	bne.w	8003de2 <_DrawBitmap+0x2e>
 800439a:	e531      	b.n	8003e00 <_DrawBitmap+0x4c>
 800439c:	5a60      	ldrh	r0, [r4, r1]
 800439e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80043a2:	7058      	strb	r0, [r3, #1]
 80043a4:	0a02      	lsrs	r2, r0, #8
 80043a6:	2101      	movs	r1, #1
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80043ac:	3302      	adds	r3, #2
 80043ae:	460a      	mov	r2, r1
 80043b0:	e570      	b.n	8003e94 <_DrawBitmap+0xe0>
 80043b2:	f8d8 5118 	ldr.w	r5, [r8, #280]	; 0x118
 80043b6:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 80043ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80043be:	47a8      	blx	r5
 80043c0:	f8d8 0068 	ldr.w	r0, [r8, #104]	; 0x68
 80043c4:	2500      	movs	r5, #0
 80043c6:	e573      	b.n	8003eb0 <_DrawBitmap+0xfc>
 80043c8:	2e02      	cmp	r6, #2
 80043ca:	f47f ad4b 	bne.w	8003e64 <_DrawBitmap+0xb0>
 80043ce:	9c07      	ldr	r4, [sp, #28]
 80043d0:	f8d5 a06c 	ldr.w	sl, [r5, #108]	; 0x6c
 80043d4:	9408      	str	r4, [sp, #32]
 80043d6:	f04f 0800 	mov.w	r8, #0
 80043da:	46ab      	mov	fp, r5
 80043dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80043de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80043e2:	4645      	mov	r5, r8
 80043e4:	e00e      	b.n	8004404 <_DrawBitmap+0x650>
 80043e6:	b915      	cbnz	r5, 80043ee <_DrawBitmap+0x63a>
 80043e8:	f8db a06c 	ldr.w	sl, [fp, #108]	; 0x6c
 80043ec:	9408      	str	r4, [sp, #32]
 80043ee:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80043f0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80043f4:	f82a 0b02 	strh.w	r0, [sl], #2
 80043f8:	f108 0801 	add.w	r8, r8, #1
 80043fc:	2501      	movs	r5, #1
 80043fe:	3401      	adds	r4, #1
 8004400:	3f01      	subs	r7, #1
 8004402:	d00a      	beq.n	800441a <_DrawBitmap+0x666>
 8004404:	f819 6004 	ldrb.w	r6, [r9, r4]
 8004408:	2e00      	cmp	r6, #0
 800440a:	d1ec      	bne.n	80043e6 <_DrawBitmap+0x632>
 800440c:	2d01      	cmp	r5, #1
 800440e:	f000 82f7 	beq.w	8004a00 <_DrawBitmap+0xc4c>
 8004412:	3401      	adds	r4, #1
 8004414:	3f01      	subs	r7, #1
 8004416:	4635      	mov	r5, r6
 8004418:	d1f4      	bne.n	8004404 <_DrawBitmap+0x650>
 800441a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800441c:	9b07      	ldr	r3, [sp, #28]
 800441e:	465d      	mov	r5, fp
 8004420:	18d3      	adds	r3, r2, r3
 8004422:	f1b8 0f00 	cmp.w	r8, #0
 8004426:	f43f ad1d 	beq.w	8003e64 <_DrawBitmap+0xb0>
 800442a:	9e04      	ldr	r6, [sp, #16]
 800442c:	9908      	ldr	r1, [sp, #32]
 800442e:	9600      	str	r6, [sp, #0]
 8004430:	f8db 40a8 	ldr.w	r4, [fp, #168]	; 0xa8
 8004434:	4658      	mov	r0, fp
 8004436:	4632      	mov	r2, r6
 8004438:	47a0      	blx	r4
 800443a:	f018 0f01 	tst.w	r8, #1
 800443e:	f8db 406c 	ldr.w	r4, [fp, #108]	; 0x6c
 8004442:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 8004446:	4639      	mov	r1, r7
 8004448:	d007      	beq.n	800445a <_DrawBitmap+0x6a6>
 800444a:	f834 7b02 	ldrh.w	r7, [r4], #2
 800444e:	0a39      	lsrs	r1, r7, #8
 8004450:	7019      	strb	r1, [r3, #0]
 8004452:	2101      	movs	r1, #1
 8004454:	705f      	strb	r7, [r3, #1]
 8004456:	3302      	adds	r3, #2
 8004458:	460f      	mov	r7, r1
 800445a:	1c48      	adds	r0, r1, #1
 800445c:	4547      	cmp	r7, r8
 800445e:	f103 0202 	add.w	r2, r3, #2
 8004462:	f107 0701 	add.w	r7, r7, #1
 8004466:	f43f acf7 	beq.w	8003e58 <_DrawBitmap+0xa4>
 800446a:	f834 1b02 	ldrh.w	r1, [r4], #2
 800446e:	0a0e      	lsrs	r6, r1, #8
 8004470:	28fa      	cmp	r0, #250	; 0xfa
 8004472:	701e      	strb	r6, [r3, #0]
 8004474:	7059      	strb	r1, [r3, #1]
 8004476:	f000 83ee 	beq.w	8004c56 <_DrawBitmap+0xea2>
 800447a:	f834 6b02 	ldrh.w	r6, [r4], #2
 800447e:	1c41      	adds	r1, r0, #1
 8004480:	1c93      	adds	r3, r2, #2
 8004482:	0a30      	lsrs	r0, r6, #8
 8004484:	29fa      	cmp	r1, #250	; 0xfa
 8004486:	7010      	strb	r0, [r2, #0]
 8004488:	7056      	strb	r6, [r2, #1]
 800448a:	f000 835c 	beq.w	8004b46 <_DrawBitmap+0xd92>
 800448e:	3701      	adds	r7, #1
 8004490:	e7e3      	b.n	800445a <_DrawBitmap+0x6a6>
 8004492:	f1bb 0f02 	cmp.w	fp, #2
 8004496:	f47f ace5 	bne.w	8003e64 <_DrawBitmap+0xb0>
 800449a:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 800449c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800449e:	9608      	str	r6, [sp, #32]
 80044a0:	f04f 0c00 	mov.w	ip, #0
 80044a4:	940a      	str	r4, [sp, #40]	; 0x28
 80044a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80044a8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80044aa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80044ae:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80044b2:	46e3      	mov	fp, ip
 80044b4:	4664      	mov	r4, ip
 80044b6:	e016      	b.n	80044e6 <_DrawBitmap+0x732>
 80044b8:	b91c      	cbnz	r4, 80044c2 <_DrawBitmap+0x70e>
 80044ba:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 80044bc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80044c0:	9408      	str	r4, [sp, #32]
 80044c2:	9821      	ldr	r0, [sp, #132]	; 0x84
 80044c4:	9b08      	ldr	r3, [sp, #32]
 80044c6:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 80044ca:	f823 2b02 	strh.w	r2, [r3], #2
 80044ce:	f10b 0b01 	add.w	fp, fp, #1
 80044d2:	9308      	str	r3, [sp, #32]
 80044d4:	2401      	movs	r4, #1
 80044d6:	3601      	adds	r6, #1
 80044d8:	2e02      	cmp	r6, #2
 80044da:	f10a 0a01 	add.w	sl, sl, #1
 80044de:	d018      	beq.n	8004512 <_DrawBitmap+0x75e>
 80044e0:	f1b8 0801 	subs.w	r8, r8, #1
 80044e4:	d01f      	beq.n	8004526 <_DrawBitmap+0x772>
 80044e6:	f1c6 0301 	rsb	r3, r6, #1
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	20f0      	movs	r0, #240	; 0xf0
 80044ee:	f1c2 0104 	rsb	r1, r2, #4
 80044f2:	fa40 fc01 	asr.w	ip, r0, r1
 80044f6:	ea0c 0309 	and.w	r3, ip, r9
 80044fa:	fa33 fc02 	lsrs.w	ip, r3, r2
 80044fe:	d1db      	bne.n	80044b8 <_DrawBitmap+0x704>
 8004500:	2c01      	cmp	r4, #1
 8004502:	f000 822e 	beq.w	8004962 <_DrawBitmap+0xbae>
 8004506:	3601      	adds	r6, #1
 8004508:	2e02      	cmp	r6, #2
 800450a:	4664      	mov	r4, ip
 800450c:	f10a 0a01 	add.w	sl, sl, #1
 8004510:	d1e6      	bne.n	80044e0 <_DrawBitmap+0x72c>
 8004512:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004514:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004516:	f896 9001 	ldrb.w	r9, [r6, #1]
 800451a:	1c48      	adds	r0, r1, #1
 800451c:	2600      	movs	r6, #0
 800451e:	f1b8 0801 	subs.w	r8, r8, #1
 8004522:	900a      	str	r0, [sp, #40]	; 0x28
 8004524:	d1df      	bne.n	80044e6 <_DrawBitmap+0x732>
 8004526:	f1bb 0f00 	cmp.w	fp, #0
 800452a:	f43f ac9b 	beq.w	8003e64 <_DrawBitmap+0xb0>
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004532:	9200      	str	r2, [sp, #0]
 8004534:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8004538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800453a:	f8cd b00c 	str.w	fp, [sp, #12]
 800453e:	4628      	mov	r0, r5
 8004540:	47a0      	blx	r4
 8004542:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004546:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8004548:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800454a:	f01c 0f01 	tst.w	ip, #1
 800454e:	4641      	mov	r1, r8
 8004550:	f040 8351 	bne.w	8004bf6 <_DrawBitmap+0xe42>
 8004554:	4666      	mov	r6, ip
 8004556:	e00b      	b.n	8004570 <_DrawBitmap+0x7bc>
 8004558:	f834 3b02 	ldrh.w	r3, [r4], #2
 800455c:	1c41      	adds	r1, r0, #1
 800455e:	7053      	strb	r3, [r2, #1]
 8004560:	0a18      	lsrs	r0, r3, #8
 8004562:	1c93      	adds	r3, r2, #2
 8004564:	29fa      	cmp	r1, #250	; 0xfa
 8004566:	7010      	strb	r0, [r2, #0]
 8004568:	f000 8387 	beq.w	8004c7a <_DrawBitmap+0xec6>
 800456c:	f108 0801 	add.w	r8, r8, #1
 8004570:	1c48      	adds	r0, r1, #1
 8004572:	45b0      	cmp	r8, r6
 8004574:	f103 0202 	add.w	r2, r3, #2
 8004578:	f108 0801 	add.w	r8, r8, #1
 800457c:	f43f ac6c 	beq.w	8003e58 <_DrawBitmap+0xa4>
 8004580:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004584:	0a0f      	lsrs	r7, r1, #8
 8004586:	28fa      	cmp	r0, #250	; 0xfa
 8004588:	701f      	strb	r7, [r3, #0]
 800458a:	7059      	strb	r1, [r3, #1]
 800458c:	d1e4      	bne.n	8004558 <_DrawBitmap+0x7a4>
 800458e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004590:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004594:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004598:	4798      	blx	r3
 800459a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800459c:	2000      	movs	r0, #0
 800459e:	e7db      	b.n	8004558 <_DrawBitmap+0x7a4>
 80045a0:	f1bb 0f02 	cmp.w	fp, #2
 80045a4:	f47f ac5e 	bne.w	8003e64 <_DrawBitmap+0xb0>
 80045a8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 80045aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80045ac:	9608      	str	r6, [sp, #32]
 80045ae:	f04f 0000 	mov.w	r0, #0
 80045b2:	940a      	str	r4, [sp, #40]	; 0x28
 80045b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80045b6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80045b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80045bc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80045c0:	4683      	mov	fp, r0
 80045c2:	4604      	mov	r4, r0
 80045c4:	e016      	b.n	80045f4 <_DrawBitmap+0x840>
 80045c6:	b91c      	cbnz	r4, 80045d0 <_DrawBitmap+0x81c>
 80045c8:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 80045ca:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80045ce:	9408      	str	r4, [sp, #32]
 80045d0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80045d2:	9b08      	ldr	r3, [sp, #32]
 80045d4:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 80045d8:	f823 2b02 	strh.w	r2, [r3], #2
 80045dc:	f10b 0b01 	add.w	fp, fp, #1
 80045e0:	9308      	str	r3, [sp, #32]
 80045e2:	2401      	movs	r4, #1
 80045e4:	3601      	adds	r6, #1
 80045e6:	2e04      	cmp	r6, #4
 80045e8:	f10a 0a01 	add.w	sl, sl, #1
 80045ec:	d018      	beq.n	8004620 <_DrawBitmap+0x86c>
 80045ee:	f1b8 0801 	subs.w	r8, r8, #1
 80045f2:	d01f      	beq.n	8004634 <_DrawBitmap+0x880>
 80045f4:	f1c6 0303 	rsb	r3, r6, #3
 80045f8:	005a      	lsls	r2, r3, #1
 80045fa:	f1c2 0c06 	rsb	ip, r2, #6
 80045fe:	20c0      	movs	r0, #192	; 0xc0
 8004600:	fa40 f10c 	asr.w	r1, r0, ip
 8004604:	ea01 0309 	and.w	r3, r1, r9
 8004608:	fa33 fc02 	lsrs.w	ip, r3, r2
 800460c:	d1db      	bne.n	80045c6 <_DrawBitmap+0x812>
 800460e:	2c01      	cmp	r4, #1
 8004610:	f000 8158 	beq.w	80048c4 <_DrawBitmap+0xb10>
 8004614:	3601      	adds	r6, #1
 8004616:	2e04      	cmp	r6, #4
 8004618:	4664      	mov	r4, ip
 800461a:	f10a 0a01 	add.w	sl, sl, #1
 800461e:	d1e6      	bne.n	80045ee <_DrawBitmap+0x83a>
 8004620:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004622:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004624:	f896 9001 	ldrb.w	r9, [r6, #1]
 8004628:	1c48      	adds	r0, r1, #1
 800462a:	2600      	movs	r6, #0
 800462c:	f1b8 0801 	subs.w	r8, r8, #1
 8004630:	900a      	str	r0, [sp, #40]	; 0x28
 8004632:	d1df      	bne.n	80045f4 <_DrawBitmap+0x840>
 8004634:	f1bb 0f00 	cmp.w	fp, #0
 8004638:	f43f ac14 	beq.w	8003e64 <_DrawBitmap+0xb0>
 800463c:	9a04      	ldr	r2, [sp, #16]
 800463e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004640:	9200      	str	r2, [sp, #0]
 8004642:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8004646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004648:	f8cd b00c 	str.w	fp, [sp, #12]
 800464c:	4628      	mov	r0, r5
 800464e:	47a0      	blx	r4
 8004650:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004654:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8004656:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004658:	f01c 0f01 	tst.w	ip, #1
 800465c:	4641      	mov	r1, r8
 800465e:	f040 82c0 	bne.w	8004be2 <_DrawBitmap+0xe2e>
 8004662:	4666      	mov	r6, ip
 8004664:	e00e      	b.n	8004684 <_DrawBitmap+0x8d0>
 8004666:	bf00      	nop
 8004668:	1fffc808 	.word	0x1fffc808
 800466c:	f834 3b02 	ldrh.w	r3, [r4], #2
 8004670:	1c41      	adds	r1, r0, #1
 8004672:	7053      	strb	r3, [r2, #1]
 8004674:	0a18      	lsrs	r0, r3, #8
 8004676:	1c93      	adds	r3, r2, #2
 8004678:	29fa      	cmp	r1, #250	; 0xfa
 800467a:	7010      	strb	r0, [r2, #0]
 800467c:	f000 82f4 	beq.w	8004c68 <_DrawBitmap+0xeb4>
 8004680:	f108 0801 	add.w	r8, r8, #1
 8004684:	1c48      	adds	r0, r1, #1
 8004686:	45b0      	cmp	r8, r6
 8004688:	f103 0202 	add.w	r2, r3, #2
 800468c:	f108 0801 	add.w	r8, r8, #1
 8004690:	f43f abe2 	beq.w	8003e58 <_DrawBitmap+0xa4>
 8004694:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004698:	0a0f      	lsrs	r7, r1, #8
 800469a:	28fa      	cmp	r0, #250	; 0xfa
 800469c:	701f      	strb	r7, [r3, #0]
 800469e:	7059      	strb	r1, [r3, #1]
 80046a0:	d1e4      	bne.n	800466c <_DrawBitmap+0x8b8>
 80046a2:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80046a4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 80046a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80046ac:	4798      	blx	r3
 80046ae:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80046b0:	2000      	movs	r0, #0
 80046b2:	e7db      	b.n	800466c <_DrawBitmap+0x8b8>
 80046b4:	4659      	mov	r1, fp
 80046b6:	e610      	b.n	80042da <_DrawBitmap+0x526>
 80046b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80046ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80046bc:	7827      	ldrb	r7, [r4, #0]
 80046be:	f04f 0b80 	mov.w	fp, #128	; 0x80
 80046c2:	fa4b f201 	asr.w	r2, fp, r1
 80046c6:	f106 3aff 	add.w	sl, r6, #4294967295
 80046ca:	4217      	tst	r7, r2
 80046cc:	f00a 0601 	and.w	r6, sl, #1
 80046d0:	f040 82ea 	bne.w	8004ca8 <_DrawBitmap+0xef4>
 80046d4:	9820      	ldr	r0, [sp, #128]	; 0x80
 80046d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d8:	1c47      	adds	r7, r0, #1
 80046da:	2f08      	cmp	r7, #8
 80046dc:	f102 0801 	add.w	r8, r2, #1
 80046e0:	f000 82f2 	beq.w	8004cc8 <_DrawBitmap+0xf14>
 80046e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e6:	f1b3 0901 	subs.w	r9, r3, #1
 80046ea:	f43f abbb 	beq.w	8003e64 <_DrawBitmap+0xb0>
 80046ee:	b17e      	cbz	r6, 8004710 <_DrawBitmap+0x95c>
 80046f0:	7826      	ldrb	r6, [r4, #0]
 80046f2:	fa4b f107 	asr.w	r1, fp, r7
 80046f6:	420e      	tst	r6, r1
 80046f8:	f040 82ed 	bne.w	8004cd6 <_DrawBitmap+0xf22>
 80046fc:	3701      	adds	r7, #1
 80046fe:	2f08      	cmp	r7, #8
 8004700:	f108 0801 	add.w	r8, r8, #1
 8004704:	f000 82fc 	beq.w	8004d00 <_DrawBitmap+0xf4c>
 8004708:	f1b9 0901 	subs.w	r9, r9, #1
 800470c:	f43f abaa 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004710:	46c4      	mov	ip, r8
 8004712:	46a8      	mov	r8, r5
 8004714:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004716:	e00f      	b.n	8004738 <_DrawBitmap+0x984>
 8004718:	2e08      	cmp	r6, #8
 800471a:	d02c      	beq.n	8004776 <_DrawBitmap+0x9c2>
 800471c:	7822      	ldrb	r2, [r4, #0]
 800471e:	fa4b f006 	asr.w	r0, fp, r6
 8004722:	4202      	tst	r2, r0
 8004724:	d12e      	bne.n	8004784 <_DrawBitmap+0x9d0>
 8004726:	1c77      	adds	r7, r6, #1
 8004728:	2f08      	cmp	r7, #8
 800472a:	f10a 0c01 	add.w	ip, sl, #1
 800472e:	d03e      	beq.n	80047ae <_DrawBitmap+0x9fa>
 8004730:	f1b9 0901 	subs.w	r9, r9, #1
 8004734:	f43f ab96 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004738:	7820      	ldrb	r0, [r4, #0]
 800473a:	fa4b f107 	asr.w	r1, fp, r7
 800473e:	1c7e      	adds	r6, r7, #1
 8004740:	4208      	tst	r0, r1
 8004742:	f10c 0a01 	add.w	sl, ip, #1
 8004746:	f109 39ff 	add.w	r9, r9, #4294967295
 800474a:	d0e5      	beq.n	8004718 <_DrawBitmap+0x964>
 800474c:	4661      	mov	r1, ip
 800474e:	f8d8 70ec 	ldr.w	r7, [r8, #236]	; 0xec
 8004752:	9a04      	ldr	r2, [sp, #16]
 8004754:	f8cd c00c 	str.w	ip, [sp, #12]
 8004758:	4628      	mov	r0, r5
 800475a:	47b8      	blx	r7
 800475c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8004760:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004764:	f8d8 70f0 	ldr.w	r7, [r8, #240]	; 0xf0
 8004768:	9a04      	ldr	r2, [sp, #16]
 800476a:	4043      	eors	r3, r0
 800476c:	4661      	mov	r1, ip
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	2e08      	cmp	r6, #8
 8004774:	d1d2      	bne.n	800471c <_DrawBitmap+0x968>
 8004776:	3401      	adds	r4, #1
 8004778:	2600      	movs	r6, #0
 800477a:	7822      	ldrb	r2, [r4, #0]
 800477c:	fa4b f006 	asr.w	r0, fp, r6
 8004780:	4202      	tst	r2, r0
 8004782:	d0d0      	beq.n	8004726 <_DrawBitmap+0x972>
 8004784:	4651      	mov	r1, sl
 8004786:	9a04      	ldr	r2, [sp, #16]
 8004788:	f8d8 30ec 	ldr.w	r3, [r8, #236]	; 0xec
 800478c:	4628      	mov	r0, r5
 800478e:	4798      	blx	r3
 8004790:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8004794:	f8d8 70f0 	ldr.w	r7, [r8, #240]	; 0xf0
 8004798:	9a04      	ldr	r2, [sp, #16]
 800479a:	ea80 0301 	eor.w	r3, r0, r1
 800479e:	4651      	mov	r1, sl
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	1c77      	adds	r7, r6, #1
 80047a6:	2f08      	cmp	r7, #8
 80047a8:	f10a 0c01 	add.w	ip, sl, #1
 80047ac:	d1c0      	bne.n	8004730 <_DrawBitmap+0x97c>
 80047ae:	3401      	adds	r4, #1
 80047b0:	2700      	movs	r7, #0
 80047b2:	e7bd      	b.n	8004730 <_DrawBitmap+0x97c>
 80047b4:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 80047b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047b8:	9608      	str	r6, [sp, #32]
 80047ba:	f04f 0a00 	mov.w	sl, #0
 80047be:	46ac      	mov	ip, r5
 80047c0:	4625      	mov	r5, r4
 80047c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80047c4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80047c8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80047ca:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80047ce:	4654      	mov	r4, sl
 80047d0:	46ab      	mov	fp, r5
 80047d2:	e018      	b.n	8004806 <_DrawBitmap+0xa52>
 80047d4:	b924      	cbnz	r4, 80047e0 <_DrawBitmap+0xa2c>
 80047d6:	f8dc 506c 	ldr.w	r5, [ip, #108]	; 0x6c
 80047da:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80047de:	9508      	str	r5, [sp, #32]
 80047e0:	9808      	ldr	r0, [sp, #32]
 80047e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047e4:	f820 2b02 	strh.w	r2, [r0], #2
 80047e8:	f10a 0a01 	add.w	sl, sl, #1
 80047ec:	9008      	str	r0, [sp, #32]
 80047ee:	2401      	movs	r4, #1
 80047f0:	3601      	adds	r6, #1
 80047f2:	2e08      	cmp	r6, #8
 80047f4:	bf04      	itt	eq
 80047f6:	f10b 0b01 	addeq.w	fp, fp, #1
 80047fa:	2600      	moveq	r6, #0
 80047fc:	f1b8 0801 	subs.w	r8, r8, #1
 8004800:	f109 0901 	add.w	r9, r9, #1
 8004804:	d00b      	beq.n	800481e <_DrawBitmap+0xa6a>
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	f89b 0000 	ldrb.w	r0, [fp]
 800480c:	4133      	asrs	r3, r6
 800480e:	ea10 0503 	ands.w	r5, r0, r3
 8004812:	d1df      	bne.n	80047d4 <_DrawBitmap+0xa20>
 8004814:	2c01      	cmp	r4, #1
 8004816:	f000 813a 	beq.w	8004a8e <_DrawBitmap+0xcda>
 800481a:	462c      	mov	r4, r5
 800481c:	e7e8      	b.n	80047f0 <_DrawBitmap+0xa3c>
 800481e:	4665      	mov	r5, ip
 8004820:	f1ba 0f00 	cmp.w	sl, #0
 8004824:	f43f ab1e 	beq.w	8003e64 <_DrawBitmap+0xb0>
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	f8dc 40a8 	ldr.w	r4, [ip, #168]	; 0xa8
 8004832:	461a      	mov	r2, r3
 8004834:	4660      	mov	r0, ip
 8004836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004838:	47a0      	blx	r4
 800483a:	f01a 0f01 	tst.w	sl, #1
 800483e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8004840:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004842:	4641      	mov	r1, r8
 8004844:	d014      	beq.n	8004870 <_DrawBitmap+0xabc>
 8004846:	f834 0b02 	ldrh.w	r0, [r4], #2
 800484a:	0a01      	lsrs	r1, r0, #8
 800484c:	7019      	strb	r1, [r3, #0]
 800484e:	2101      	movs	r1, #1
 8004850:	7058      	strb	r0, [r3, #1]
 8004852:	4688      	mov	r8, r1
 8004854:	3302      	adds	r3, #2
 8004856:	e00b      	b.n	8004870 <_DrawBitmap+0xabc>
 8004858:	f834 6b02 	ldrh.w	r6, [r4], #2
 800485c:	1c41      	adds	r1, r0, #1
 800485e:	1c93      	adds	r3, r2, #2
 8004860:	0a30      	lsrs	r0, r6, #8
 8004862:	29fa      	cmp	r1, #250	; 0xfa
 8004864:	7010      	strb	r0, [r2, #0]
 8004866:	7056      	strb	r6, [r2, #1]
 8004868:	f000 824d 	beq.w	8004d06 <_DrawBitmap+0xf52>
 800486c:	f108 0801 	add.w	r8, r8, #1
 8004870:	1c48      	adds	r0, r1, #1
 8004872:	45d0      	cmp	r8, sl
 8004874:	f103 0202 	add.w	r2, r3, #2
 8004878:	f108 0801 	add.w	r8, r8, #1
 800487c:	f43f aaec 	beq.w	8003e58 <_DrawBitmap+0xa4>
 8004880:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004884:	0a0e      	lsrs	r6, r1, #8
 8004886:	28fa      	cmp	r0, #250	; 0xfa
 8004888:	701e      	strb	r6, [r3, #0]
 800488a:	7059      	strb	r1, [r3, #1]
 800488c:	d1e4      	bne.n	8004858 <_DrawBitmap+0xaa4>
 800488e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004890:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004894:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004898:	4798      	blx	r3
 800489a:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 800489c:	2000      	movs	r0, #0
 800489e:	e7db      	b.n	8004858 <_DrawBitmap+0xaa4>
 80048a0:	3401      	adds	r4, #1
 80048a2:	2600      	movs	r6, #0
 80048a4:	e543      	b.n	800432e <_DrawBitmap+0x57a>
 80048a6:	f894 9001 	ldrb.w	r9, [r4, #1]
 80048aa:	f04f 0a00 	mov.w	sl, #0
 80048ae:	3401      	adds	r4, #1
 80048b0:	e4bb      	b.n	800422a <_DrawBitmap+0x476>
 80048b2:	f894 9001 	ldrb.w	r9, [r4, #1]
 80048b6:	f04f 0a00 	mov.w	sl, #0
 80048ba:	3401      	adds	r4, #1
 80048bc:	e403      	b.n	80040c6 <_DrawBitmap+0x312>
 80048be:	3401      	adds	r4, #1
 80048c0:	2600      	movs	r6, #0
 80048c2:	e54d      	b.n	8004360 <_DrawBitmap+0x5ac>
 80048c4:	9f04      	ldr	r7, [sp, #16]
 80048c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048c8:	9700      	str	r7, [sp, #0]
 80048ca:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 80048ce:	9a04      	ldr	r2, [sp, #16]
 80048d0:	f8cd c00c 	str.w	ip, [sp, #12]
 80048d4:	f10a 33ff 	add.w	r3, sl, #4294967295
 80048d8:	4628      	mov	r0, r5
 80048da:	47b8      	blx	r7
 80048dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80048e0:	6eef      	ldr	r7, [r5, #108]	; 0x6c
 80048e2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80048e4:	f01b 0f01 	tst.w	fp, #1
 80048e8:	4661      	mov	r1, ip
 80048ea:	d029      	beq.n	8004940 <_DrawBitmap+0xb8c>
 80048ec:	f837 2b02 	ldrh.w	r2, [r7], #2
 80048f0:	4621      	mov	r1, r4
 80048f2:	0a10      	lsrs	r0, r2, #8
 80048f4:	f04f 0c01 	mov.w	ip, #1
 80048f8:	7018      	strb	r0, [r3, #0]
 80048fa:	705a      	strb	r2, [r3, #1]
 80048fc:	1c48      	adds	r0, r1, #1
 80048fe:	3302      	adds	r3, #2
 8004900:	45dc      	cmp	ip, fp
 8004902:	f103 0202 	add.w	r2, r3, #2
 8004906:	f10c 0401 	add.w	r4, ip, #1
 800490a:	d120      	bne.n	800494e <_DrawBitmap+0xb9a>
 800490c:	2900      	cmp	r1, #0
 800490e:	f040 8153 	bne.w	8004bb8 <_DrawBitmap+0xe04>
 8004912:	468b      	mov	fp, r1
 8004914:	460c      	mov	r4, r1
 8004916:	e665      	b.n	80045e4 <_DrawBitmap+0x830>
 8004918:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 800491c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800491e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004922:	4790      	blx	r2
 8004924:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8004926:	2000      	movs	r0, #0
 8004928:	f837 3b02 	ldrh.w	r3, [r7], #2
 800492c:	1c41      	adds	r1, r0, #1
 800492e:	7053      	strb	r3, [r2, #1]
 8004930:	0a18      	lsrs	r0, r3, #8
 8004932:	1c93      	adds	r3, r2, #2
 8004934:	29fa      	cmp	r1, #250	; 0xfa
 8004936:	7010      	strb	r0, [r2, #0]
 8004938:	f000 8172 	beq.w	8004c20 <_DrawBitmap+0xe6c>
 800493c:	f104 0c01 	add.w	ip, r4, #1
 8004940:	1c48      	adds	r0, r1, #1
 8004942:	45dc      	cmp	ip, fp
 8004944:	f103 0202 	add.w	r2, r3, #2
 8004948:	f10c 0401 	add.w	r4, ip, #1
 800494c:	d0de      	beq.n	800490c <_DrawBitmap+0xb58>
 800494e:	f837 1b02 	ldrh.w	r1, [r7], #2
 8004952:	28fa      	cmp	r0, #250	; 0xfa
 8004954:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8004958:	f883 e000 	strb.w	lr, [r3]
 800495c:	7059      	strb	r1, [r3, #1]
 800495e:	d1e3      	bne.n	8004928 <_DrawBitmap+0xb74>
 8004960:	e7da      	b.n	8004918 <_DrawBitmap+0xb64>
 8004962:	9f04      	ldr	r7, [sp, #16]
 8004964:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004966:	9700      	str	r7, [sp, #0]
 8004968:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 800496c:	9a04      	ldr	r2, [sp, #16]
 800496e:	f8cd c00c 	str.w	ip, [sp, #12]
 8004972:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800497e:	6eef      	ldr	r7, [r5, #108]	; 0x6c
 8004980:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004982:	f01b 0f01 	tst.w	fp, #1
 8004986:	4661      	mov	r1, ip
 8004988:	d029      	beq.n	80049de <_DrawBitmap+0xc2a>
 800498a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800498e:	0a11      	lsrs	r1, r2, #8
 8004990:	7019      	strb	r1, [r3, #0]
 8004992:	f04f 0c01 	mov.w	ip, #1
 8004996:	4621      	mov	r1, r4
 8004998:	705a      	strb	r2, [r3, #1]
 800499a:	1c48      	adds	r0, r1, #1
 800499c:	3302      	adds	r3, #2
 800499e:	45dc      	cmp	ip, fp
 80049a0:	f103 0202 	add.w	r2, r3, #2
 80049a4:	f10c 0401 	add.w	r4, ip, #1
 80049a8:	d120      	bne.n	80049ec <_DrawBitmap+0xc38>
 80049aa:	2900      	cmp	r1, #0
 80049ac:	f040 80f1 	bne.w	8004b92 <_DrawBitmap+0xdde>
 80049b0:	468b      	mov	fp, r1
 80049b2:	460c      	mov	r4, r1
 80049b4:	e58f      	b.n	80044d6 <_DrawBitmap+0x722>
 80049b6:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 80049ba:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80049bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80049c0:	4790      	blx	r2
 80049c2:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80049c4:	2000      	movs	r0, #0
 80049c6:	f837 3b02 	ldrh.w	r3, [r7], #2
 80049ca:	1c41      	adds	r1, r0, #1
 80049cc:	7053      	strb	r3, [r2, #1]
 80049ce:	0a18      	lsrs	r0, r3, #8
 80049d0:	1c93      	adds	r3, r2, #2
 80049d2:	29fa      	cmp	r1, #250	; 0xfa
 80049d4:	7010      	strb	r0, [r2, #0]
 80049d6:	f000 812c 	beq.w	8004c32 <_DrawBitmap+0xe7e>
 80049da:	f104 0c01 	add.w	ip, r4, #1
 80049de:	1c48      	adds	r0, r1, #1
 80049e0:	45dc      	cmp	ip, fp
 80049e2:	f103 0202 	add.w	r2, r3, #2
 80049e6:	f10c 0401 	add.w	r4, ip, #1
 80049ea:	d0de      	beq.n	80049aa <_DrawBitmap+0xbf6>
 80049ec:	f837 1b02 	ldrh.w	r1, [r7], #2
 80049f0:	28fa      	cmp	r0, #250	; 0xfa
 80049f2:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 80049f6:	f883 e000 	strb.w	lr, [r3]
 80049fa:	7059      	strb	r1, [r3, #1]
 80049fc:	d1e3      	bne.n	80049c6 <_DrawBitmap+0xc12>
 80049fe:	e7da      	b.n	80049b6 <_DrawBitmap+0xc02>
 8004a00:	9804      	ldr	r0, [sp, #16]
 8004a02:	9908      	ldr	r1, [sp, #32]
 8004a04:	9000      	str	r0, [sp, #0]
 8004a06:	1e63      	subs	r3, r4, #1
 8004a08:	9a04      	ldr	r2, [sp, #16]
 8004a0a:	9603      	str	r6, [sp, #12]
 8004a0c:	4658      	mov	r0, fp
 8004a0e:	f8db 60a8 	ldr.w	r6, [fp, #168]	; 0xa8
 8004a12:	47b0      	blx	r6
 8004a14:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004a18:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 8004a1c:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 8004a20:	f018 0f01 	tst.w	r8, #1
 8004a24:	4661      	mov	r1, ip
 8004a26:	f000 80ae 	beq.w	8004b86 <_DrawBitmap+0xdd2>
 8004a2a:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004a2e:	0a08      	lsrs	r0, r1, #8
 8004a30:	7059      	strb	r1, [r3, #1]
 8004a32:	7018      	strb	r0, [r3, #0]
 8004a34:	4629      	mov	r1, r5
 8004a36:	3302      	adds	r3, #2
 8004a38:	f04f 0601 	mov.w	r6, #1
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	1c48      	adds	r0, r1, #1
 8004a40:	4546      	cmp	r6, r8
 8004a42:	f103 0202 	add.w	r2, r3, #2
 8004a46:	f106 0601 	add.w	r6, r6, #1
 8004a4a:	d01a      	beq.n	8004a82 <_DrawBitmap+0xcce>
 8004a4c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8004a50:	28fa      	cmp	r0, #250	; 0xfa
 8004a52:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8004a56:	f883 e000 	strb.w	lr, [r3]
 8004a5a:	7059      	strb	r1, [r3, #1]
 8004a5c:	f000 80d5 	beq.w	8004c0a <_DrawBitmap+0xe56>
 8004a60:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004a64:	1c41      	adds	r1, r0, #1
 8004a66:	7053      	strb	r3, [r2, #1]
 8004a68:	0a18      	lsrs	r0, r3, #8
 8004a6a:	1c93      	adds	r3, r2, #2
 8004a6c:	29fa      	cmp	r1, #250	; 0xfa
 8004a6e:	7010      	strb	r0, [r2, #0]
 8004a70:	d053      	beq.n	8004b1a <_DrawBitmap+0xd66>
 8004a72:	3601      	adds	r6, #1
 8004a74:	1c48      	adds	r0, r1, #1
 8004a76:	4546      	cmp	r6, r8
 8004a78:	f103 0202 	add.w	r2, r3, #2
 8004a7c:	f106 0601 	add.w	r6, r6, #1
 8004a80:	d1e4      	bne.n	8004a4c <_DrawBitmap+0xc98>
 8004a82:	2900      	cmp	r1, #0
 8004a84:	f040 808e 	bne.w	8004ba4 <_DrawBitmap+0xdf0>
 8004a88:	4688      	mov	r8, r1
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	e4b7      	b.n	80043fe <_DrawBitmap+0x64a>
 8004a8e:	9a04      	ldr	r2, [sp, #16]
 8004a90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004a92:	9200      	str	r2, [sp, #0]
 8004a94:	f8dc 70a8 	ldr.w	r7, [ip, #168]	; 0xa8
 8004a98:	f8cd c00c 	str.w	ip, [sp, #12]
 8004a9c:	4660      	mov	r0, ip
 8004a9e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004aa2:	47b8      	blx	r7
 8004aa4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004aa8:	f01a 0f01 	tst.w	sl, #1
 8004aac:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8004ab0:	f8dc 3068 	ldr.w	r3, [ip, #104]	; 0x68
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	d069      	beq.n	8004b8c <_DrawBitmap+0xdd8>
 8004ab8:	f837 0b02 	ldrh.w	r0, [r7], #2
 8004abc:	0a01      	lsrs	r1, r0, #8
 8004abe:	7019      	strb	r1, [r3, #0]
 8004ac0:	7058      	strb	r0, [r3, #1]
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	2401      	movs	r4, #1
 8004ac8:	4665      	mov	r5, ip
 8004aca:	1c48      	adds	r0, r1, #1
 8004acc:	4554      	cmp	r4, sl
 8004ace:	f103 0202 	add.w	r2, r3, #2
 8004ad2:	f104 0401 	add.w	r4, r4, #1
 8004ad6:	d01a      	beq.n	8004b0e <_DrawBitmap+0xd5a>
 8004ad8:	f837 1b02 	ldrh.w	r1, [r7], #2
 8004adc:	28fa      	cmp	r0, #250	; 0xfa
 8004ade:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8004ae2:	f883 e000 	strb.w	lr, [r3]
 8004ae6:	7059      	strb	r1, [r3, #1]
 8004ae8:	f000 80ac 	beq.w	8004c44 <_DrawBitmap+0xe90>
 8004aec:	f837 3b02 	ldrh.w	r3, [r7], #2
 8004af0:	1c41      	adds	r1, r0, #1
 8004af2:	7053      	strb	r3, [r2, #1]
 8004af4:	0a18      	lsrs	r0, r3, #8
 8004af6:	1c93      	adds	r3, r2, #2
 8004af8:	29fa      	cmp	r1, #250	; 0xfa
 8004afa:	7010      	strb	r0, [r2, #0]
 8004afc:	d019      	beq.n	8004b32 <_DrawBitmap+0xd7e>
 8004afe:	3401      	adds	r4, #1
 8004b00:	1c48      	adds	r0, r1, #1
 8004b02:	4554      	cmp	r4, sl
 8004b04:	f103 0202 	add.w	r2, r3, #2
 8004b08:	f104 0401 	add.w	r4, r4, #1
 8004b0c:	d1e4      	bne.n	8004ad8 <_DrawBitmap+0xd24>
 8004b0e:	46ac      	mov	ip, r5
 8004b10:	2900      	cmp	r1, #0
 8004b12:	d15a      	bne.n	8004bca <_DrawBitmap+0xe16>
 8004b14:	468a      	mov	sl, r1
 8004b16:	460c      	mov	r4, r1
 8004b18:	e66a      	b.n	80047f0 <_DrawBitmap+0xa3c>
 8004b1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004b1e:	f8db 2118 	ldr.w	r2, [fp, #280]	; 0x118
 8004b22:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
 8004b26:	4790      	blx	r2
 8004b28:	3601      	adds	r6, #1
 8004b2a:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
 8004b2e:	2100      	movs	r1, #0
 8004b30:	e7a0      	b.n	8004a74 <_DrawBitmap+0xcc0>
 8004b32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004b36:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004b3a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004b3c:	4790      	blx	r2
 8004b3e:	3401      	adds	r4, #1
 8004b40:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004b42:	2100      	movs	r1, #0
 8004b44:	e7dc      	b.n	8004b00 <_DrawBitmap+0xd4c>
 8004b46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004b4a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004b4e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004b50:	4790      	blx	r2
 8004b52:	3701      	adds	r7, #1
 8004b54:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004b56:	2100      	movs	r1, #0
 8004b58:	e47f      	b.n	800445a <_DrawBitmap+0x6a6>
 8004b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5c:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004b60:	46da      	mov	sl, fp
 8004b62:	3401      	adds	r4, #1
 8004b64:	f1b3 0b01 	subs.w	fp, r3, #1
 8004b68:	f47f aa68 	bne.w	800403c <_DrawBitmap+0x288>
 8004b6c:	f7ff b97a 	b.w	8003e64 <_DrawBitmap+0xb0>
 8004b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b72:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004b76:	46da      	mov	sl, fp
 8004b78:	3401      	adds	r4, #1
 8004b7a:	f1b3 0b01 	subs.w	fp, r3, #1
 8004b7e:	f47f ab0f 	bne.w	80041a0 <_DrawBitmap+0x3ec>
 8004b82:	f7ff b96f 	b.w	8003e64 <_DrawBitmap+0xb0>
 8004b86:	4615      	mov	r5, r2
 8004b88:	4666      	mov	r6, ip
 8004b8a:	e758      	b.n	8004a3e <_DrawBitmap+0xc8a>
 8004b8c:	462c      	mov	r4, r5
 8004b8e:	4665      	mov	r5, ip
 8004b90:	e79b      	b.n	8004aca <_DrawBitmap+0xd16>
 8004b92:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004b96:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004b98:	0049      	lsls	r1, r1, #1
 8004b9a:	f04f 0b00 	mov.w	fp, #0
 8004b9e:	4798      	blx	r3
 8004ba0:	465c      	mov	r4, fp
 8004ba2:	e498      	b.n	80044d6 <_DrawBitmap+0x722>
 8004ba4:	f8db 3118 	ldr.w	r3, [fp, #280]	; 0x118
 8004ba8:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
 8004bac:	0049      	lsls	r1, r1, #1
 8004bae:	f04f 0800 	mov.w	r8, #0
 8004bb2:	4798      	blx	r3
 8004bb4:	4645      	mov	r5, r8
 8004bb6:	e422      	b.n	80043fe <_DrawBitmap+0x64a>
 8004bb8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004bbc:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004bbe:	0049      	lsls	r1, r1, #1
 8004bc0:	f04f 0b00 	mov.w	fp, #0
 8004bc4:	4798      	blx	r3
 8004bc6:	465c      	mov	r4, fp
 8004bc8:	e50c      	b.n	80045e4 <_DrawBitmap+0x830>
 8004bca:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004bce:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004bd0:	9503      	str	r5, [sp, #12]
 8004bd2:	0049      	lsls	r1, r1, #1
 8004bd4:	f04f 0a00 	mov.w	sl, #0
 8004bd8:	4798      	blx	r3
 8004bda:	4654      	mov	r4, sl
 8004bdc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004be0:	e606      	b.n	80047f0 <_DrawBitmap+0xa3c>
 8004be2:	f834 6b02 	ldrh.w	r6, [r4], #2
 8004be6:	0a31      	lsrs	r1, r6, #8
 8004be8:	7019      	strb	r1, [r3, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	705e      	strb	r6, [r3, #1]
 8004bee:	4688      	mov	r8, r1
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	4666      	mov	r6, ip
 8004bf4:	e546      	b.n	8004684 <_DrawBitmap+0x8d0>
 8004bf6:	f834 6b02 	ldrh.w	r6, [r4], #2
 8004bfa:	0a31      	lsrs	r1, r6, #8
 8004bfc:	7019      	strb	r1, [r3, #0]
 8004bfe:	2101      	movs	r1, #1
 8004c00:	705e      	strb	r6, [r3, #1]
 8004c02:	4688      	mov	r8, r1
 8004c04:	3302      	adds	r3, #2
 8004c06:	4666      	mov	r6, ip
 8004c08:	e4b2      	b.n	8004570 <_DrawBitmap+0x7bc>
 8004c0a:	f8db 2118 	ldr.w	r2, [fp, #280]	; 0x118
 8004c0e:	f8db 0068 	ldr.w	r0, [fp, #104]	; 0x68
 8004c12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c16:	4790      	blx	r2
 8004c18:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e71f      	b.n	8004a60 <_DrawBitmap+0xcac>
 8004c20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c24:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004c28:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004c2a:	4790      	blx	r2
 8004c2c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004c2e:	2100      	movs	r1, #0
 8004c30:	e684      	b.n	800493c <_DrawBitmap+0xb88>
 8004c32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c36:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004c3a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004c3c:	4790      	blx	r2
 8004c3e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004c40:	2100      	movs	r1, #0
 8004c42:	e6ca      	b.n	80049da <_DrawBitmap+0xc26>
 8004c44:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004c48:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004c4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c4e:	4790      	blx	r2
 8004c50:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8004c52:	2000      	movs	r0, #0
 8004c54:	e74a      	b.n	8004aec <_DrawBitmap+0xd38>
 8004c56:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004c58:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8004c5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c60:	4798      	blx	r3
 8004c62:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8004c64:	2000      	movs	r0, #0
 8004c66:	e408      	b.n	800447a <_DrawBitmap+0x6c6>
 8004c68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c6c:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004c70:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004c72:	4790      	blx	r2
 8004c74:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004c76:	2100      	movs	r1, #0
 8004c78:	e502      	b.n	8004680 <_DrawBitmap+0x8cc>
 8004c7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c7e:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004c82:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004c84:	4790      	blx	r2
 8004c86:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004c88:	2100      	movs	r1, #0
 8004c8a:	e46f      	b.n	800456c <_DrawBitmap+0x7b8>
 8004c8c:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004c90:	f04f 0a00 	mov.w	sl, #0
 8004c94:	3401      	adds	r4, #1
 8004c96:	f7ff b9f3 	b.w	8004080 <_DrawBitmap+0x2cc>
 8004c9a:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004c9e:	f04f 0a00 	mov.w	sl, #0
 8004ca2:	3401      	adds	r4, #1
 8004ca4:	f7ff ba9e 	b.w	80041e4 <_DrawBitmap+0x430>
 8004ca8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004caa:	9a04      	ldr	r2, [sp, #16]
 8004cac:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 8004cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cb2:	4798      	blx	r3
 8004cb4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004cb6:	f8d5 70f0 	ldr.w	r7, [r5, #240]	; 0xf0
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	ea80 0301 	eor.w	r3, r0, r1
 8004cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004cc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cc4:	47b8      	blx	r7
 8004cc6:	e505      	b.n	80046d4 <_DrawBitmap+0x920>
 8004cc8:	3401      	adds	r4, #1
 8004cca:	2700      	movs	r7, #0
 8004ccc:	e50a      	b.n	80046e4 <_DrawBitmap+0x930>
 8004cce:	3401      	adds	r4, #1
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	f7ff bb11 	b.w	80042f8 <_DrawBitmap+0x544>
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	9a04      	ldr	r2, [sp, #16]
 8004cda:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 8004cde:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ce0:	4798      	blx	r3
 8004ce2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004ce4:	f8d5 60f0 	ldr.w	r6, [r5, #240]	; 0xf0
 8004ce8:	ea80 0302 	eor.w	r3, r0, r2
 8004cec:	4641      	mov	r1, r8
 8004cee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cf0:	9a04      	ldr	r2, [sp, #16]
 8004cf2:	3701      	adds	r7, #1
 8004cf4:	47b0      	blx	r6
 8004cf6:	2f08      	cmp	r7, #8
 8004cf8:	f108 0801 	add.w	r8, r8, #1
 8004cfc:	f47f ad04 	bne.w	8004708 <_DrawBitmap+0x954>
 8004d00:	3401      	adds	r4, #1
 8004d02:	2700      	movs	r7, #0
 8004d04:	e500      	b.n	8004708 <_DrawBitmap+0x954>
 8004d06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004d0a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8004d0e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8004d10:	4790      	blx	r2
 8004d12:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004d14:	2100      	movs	r1, #0
 8004d16:	e5a9      	b.n	800486c <_DrawBitmap+0xab8>

08004d18 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	f000 fb68 	bl	80053f0 <GUIDRV_FlexColor__InitOnce>
 8004d20:	68a4      	ldr	r4, [r4, #8]
 8004d22:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8004d26:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004d2a:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
 8004d2e:	f643 50b5 	movw	r0, #15797	; 0x3db5
 8004d32:	f643 11b5 	movw	r1, #14773	; 0x39b5
 8004d36:	f245 3231 	movw	r2, #21297	; 0x5331
 8004d3a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004d3e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004d42:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004d46:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
 8004d4a:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
 8004d4e:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8004d52:	f245 2099 	movw	r0, #21145	; 0x5299
 8004d56:	f643 118d 	movw	r1, #14733	; 0x398d
 8004d5a:	f643 1299 	movw	r2, #14745	; 0x3999
 8004d5e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004d62:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004d66:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004d6a:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
 8004d6e:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 8004d72:	4620      	mov	r0, r4
 8004d74:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8004d78:	2108      	movs	r1, #8
 8004d7a:	4798      	blx	r3
 8004d7c:	f24d 00bc 	movw	r0, #53436	; 0xd0bc
 8004d80:	2310      	movs	r3, #16
 8004d82:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004d86:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d88:	6460      	str	r0, [r4, #68]	; 0x44
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <_Log2PhysX_X0Y0S0>:
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	4770      	bx	lr

08004d90 <_Log2PhysX_X1Y0S0>:
 8004d90:	6800      	ldr	r0, [r0, #0]
 8004d92:	1a41      	subs	r1, r0, r1
 8004d94:	1e48      	subs	r0, r1, #1
 8004d96:	4770      	bx	lr

08004d98 <_Log2PhysX_X0Y1S0>:
 8004d98:	4608      	mov	r0, r1
 8004d9a:	4770      	bx	lr

08004d9c <_Log2PhysX_X1Y1S0>:
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	1a41      	subs	r1, r0, r1
 8004da0:	1e48      	subs	r0, r1, #1
 8004da2:	4770      	bx	lr

08004da4 <_Log2PhysX_X0Y0S1>:
 8004da4:	4610      	mov	r0, r2
 8004da6:	4770      	bx	lr

08004da8 <_Log2PhysX_X1Y0S1>:
 8004da8:	6840      	ldr	r0, [r0, #4]
 8004daa:	1a81      	subs	r1, r0, r2
 8004dac:	1e48      	subs	r0, r1, #1
 8004dae:	4770      	bx	lr

08004db0 <_Log2PhysX_X0Y1S1>:
 8004db0:	4610      	mov	r0, r2
 8004db2:	4770      	bx	lr

08004db4 <_Log2PhysX_X1Y1S1>:
 8004db4:	6840      	ldr	r0, [r0, #4]
 8004db6:	1a81      	subs	r1, r0, r2
 8004db8:	1e48      	subs	r0, r1, #1
 8004dba:	4770      	bx	lr

08004dbc <_Log2PhysY_X0Y0S0>:
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4770      	bx	lr

08004dc0 <_Log2PhysY_X1Y0S0>:
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4770      	bx	lr

08004dc4 <_Log2PhysY_X0Y1S0>:
 8004dc4:	6840      	ldr	r0, [r0, #4]
 8004dc6:	1a81      	subs	r1, r0, r2
 8004dc8:	1e48      	subs	r0, r1, #1
 8004dca:	4770      	bx	lr

08004dcc <_Log2PhysY_X1Y1S0>:
 8004dcc:	6840      	ldr	r0, [r0, #4]
 8004dce:	1a81      	subs	r1, r0, r2
 8004dd0:	1e48      	subs	r0, r1, #1
 8004dd2:	4770      	bx	lr

08004dd4 <_Log2PhysY_X0Y0S1>:
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4770      	bx	lr

08004dd8 <_Log2PhysY_X1Y0S1>:
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4770      	bx	lr

08004ddc <_Log2PhysY_X0Y1S1>:
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	1a41      	subs	r1, r0, r1
 8004de0:	1e48      	subs	r0, r1, #1
 8004de2:	4770      	bx	lr

08004de4 <_Log2PhysY_X1Y1S1>:
 8004de4:	6800      	ldr	r0, [r0, #0]
 8004de6:	1a41      	subs	r1, r0, r1
 8004de8:	1e48      	subs	r0, r1, #1
 8004dea:	4770      	bx	lr

08004dec <_SetPixelIndex>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	6884      	ldr	r4, [r0, #8]
 8004df0:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8004df4:	47a0      	blx	r4
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <_GetPixelIndex>:
 8004df8:	b508      	push	{r3, lr}
 8004dfa:	6883      	ldr	r3, [r0, #8]
 8004dfc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e00:	4798      	blx	r3
 8004e02:	bd08      	pop	{r3, pc}

08004e04 <_XorPixel>:
 8004e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e06:	6885      	ldr	r5, [r0, #8]
 8004e08:	b083      	sub	sp, #12
 8004e0a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 8004e0e:	4604      	mov	r4, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	4616      	mov	r6, r2
 8004e14:	4798      	blx	r3
 8004e16:	9001      	str	r0, [sp, #4]
 8004e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004e1c:	68a0      	ldr	r0, [r4, #8]
 8004e1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004e20:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
 8004e24:	4639      	mov	r1, r7
 8004e26:	4620      	mov	r0, r4
 8004e28:	4632      	mov	r2, r6
 8004e2a:	ea8e 0303 	eor.w	r3, lr, r3
 8004e2e:	47a8      	blx	r5
 8004e30:	b003      	add	sp, #12
 8004e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e34 <_DrawHLine>:
 8004e34:	b510      	push	{r4, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	6884      	ldr	r4, [r0, #8]
 8004e3a:	9200      	str	r2, [sp, #0]
 8004e3c:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8004e40:	47a0      	blx	r4
 8004e42:	b002      	add	sp, #8
 8004e44:	bd10      	pop	{r4, pc}
 8004e46:	bf00      	nop

08004e48 <_DrawVLine>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	6884      	ldr	r4, [r0, #8]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	f8d4 40e8 	ldr.w	r4, [r4, #232]	; 0xe8
 8004e54:	460b      	mov	r3, r1
 8004e56:	47a0      	blx	r4
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd10      	pop	{r4, pc}

08004e5c <_FillRect>:
 8004e5c:	b530      	push	{r4, r5, lr}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	6885      	ldr	r5, [r0, #8]
 8004e62:	9c06      	ldr	r4, [sp, #24]
 8004e64:	9400      	str	r4, [sp, #0]
 8004e66:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8004e6a:	47a0      	blx	r4
 8004e6c:	b003      	add	sp, #12
 8004e6e:	bd30      	pop	{r4, r5, pc}

08004e70 <_DrawBitmap>:
 8004e70:	b530      	push	{r4, r5, lr}
 8004e72:	b087      	sub	sp, #28
 8004e74:	6885      	ldr	r5, [r0, #8]
 8004e76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e78:	9400      	str	r4, [sp, #0]
 8004e7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e7c:	9401      	str	r4, [sp, #4]
 8004e7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e80:	9402      	str	r4, [sp, #8]
 8004e82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004e84:	9403      	str	r4, [sp, #12]
 8004e86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004e88:	9404      	str	r4, [sp, #16]
 8004e8a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004e8c:	9405      	str	r4, [sp, #20]
 8004e8e:	f8d5 40e4 	ldr.w	r4, [r5, #228]	; 0xe4
 8004e92:	47a0      	blx	r4
 8004e94:	b007      	add	sp, #28
 8004e96:	bd30      	pop	{r4, r5, pc}

08004e98 <_GetDevFunc_SetRect>:
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop

08004e9c <_GetDevFunc_SetRectOutside>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	6885      	ldr	r5, [r0, #8]
 8004ea2:	9c07      	ldr	r4, [sp, #28]
 8004ea4:	b124      	cbz	r4, 8004eb0 <_GetDevFunc_SetRectOutside+0x14>
 8004ea6:	4c0d      	ldr	r4, [pc, #52]	; (8004edc <_GetDevFunc_SetRectOutside+0x40>)
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	b148      	cbz	r0, 8004ec0 <_GetDevFunc_SetRectOutside+0x24>
 8004eac:	b002      	add	sp, #8
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <_GetDevFunc_SetRectOutside+0x40>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d0f9      	beq.n	8004eac <_GetDevFunc_SetRectOutside+0x10>
 8004eb8:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
 8004ebc:	601c      	str	r4, [r3, #0]
 8004ebe:	e7f5      	b.n	8004eac <_GetDevFunc_SetRectOutside+0x10>
 8004ec0:	9e06      	ldr	r6, [sp, #24]
 8004ec2:	9600      	str	r6, [sp, #0]
 8004ec4:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b0      	blx	r6
 8004ecc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <_GetDevFunc_SetRectOutside+0x44>)
 8004ed2:	6021      	str	r1, [r4, #0]
 8004ed4:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8004ed8:	e7e8      	b.n	8004eac <_GetDevFunc_SetRectOutside+0x10>
 8004eda:	bf00      	nop
 8004edc:	1fffc8bc 	.word	0x1fffc8bc
 8004ee0:	08004e99 	.word	0x08004e99

08004ee4 <_ReadPixelCust_16bpp>:
 8004ee4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004ee6:	b508      	push	{r3, lr}
 8004ee8:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8004eec:	6990      	ldr	r0, [r2, #24]
 8004eee:	4798      	blx	r3
 8004ef0:	bd08      	pop	{r3, pc}
 8004ef2:	bf00      	nop

08004ef4 <_ReadPixelCust_18bpp>:
 8004ef4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004ef6:	b508      	push	{r3, lr}
 8004ef8:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8004efc:	6990      	ldr	r0, [r2, #24]
 8004efe:	4798      	blx	r3
 8004f00:	bd08      	pop	{r3, pc}
 8004f02:	bf00      	nop

08004f04 <_ReadRectCust_16bpp>:
 8004f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	6884      	ldr	r4, [r0, #8]
 8004f0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004f0e:	9500      	str	r5, [sp, #0]
 8004f10:	4620      	mov	r0, r4
 8004f12:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8004f16:	4691      	mov	r9, r2
 8004f18:	4698      	mov	r8, r3
 8004f1a:	460f      	mov	r7, r1
 8004f1c:	47b0      	blx	r6
 8004f1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f20:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8004f24:	6990      	ldr	r0, [r2, #24]
 8004f26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f28:	ebc9 0505 	rsb	r5, r9, r5
 8004f2c:	ebc7 0708 	rsb	r7, r7, r8
 8004f30:	1c6a      	adds	r2, r5, #1
 8004f32:	fb07 2202 	mla	r2, r7, r2, r2
 8004f36:	4798      	blx	r3
 8004f38:	b003      	add	sp, #12
 8004f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f3e:	bf00      	nop

08004f40 <_ReadRectCust_18bpp>:
 8004f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f44:	b083      	sub	sp, #12
 8004f46:	6884      	ldr	r4, [r0, #8]
 8004f48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004f4a:	9500      	str	r5, [sp, #0]
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8004f52:	4691      	mov	r9, r2
 8004f54:	4698      	mov	r8, r3
 8004f56:	460f      	mov	r7, r1
 8004f58:	47b0      	blx	r6
 8004f5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004f5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8004f60:	6990      	ldr	r0, [r2, #24]
 8004f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f64:	ebc9 0505 	rsb	r5, r9, r5
 8004f68:	ebc7 0708 	rsb	r7, r7, r8
 8004f6c:	1c6a      	adds	r2, r5, #1
 8004f6e:	fb07 2202 	mla	r2, r7, r2, r2
 8004f72:	4798      	blx	r3
 8004f74:	b003      	add	sp, #12
 8004f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f7a:	bf00      	nop

08004f7c <_GetDevFunc>:
 8004f7c:	3901      	subs	r1, #1
 8004f7e:	2917      	cmp	r1, #23
 8004f80:	d80f      	bhi.n	8004fa2 <_GetDevFunc+0x26>
 8004f82:	e8df f001 	tbb	[pc, r1]
 8004f86:	0e10      	.short	0x0e10
 8004f88:	0e0e0e0e 	.word	0x0e0e0e0e
 8004f8c:	150e0e0e 	.word	0x150e0e0e
 8004f90:	0e1b1917 	.word	0x0e1b1917
 8004f94:	0e0e0e0e 	.word	0x0e0e0e0e
 8004f98:	200e0e0e 	.word	0x200e0e0e
 8004f9c:	0c22      	.short	0x0c22
 8004f9e:	480d      	ldr	r0, [pc, #52]	; (8004fd4 <_GetDevFunc+0x58>)
 8004fa0:	4770      	bx	lr
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	4770      	bx	lr
 8004fa6:	6803      	ldr	r3, [r0, #0]
 8004fa8:	6898      	ldr	r0, [r3, #8]
 8004faa:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8004fae:	4770      	bx	lr
 8004fb0:	4809      	ldr	r0, [pc, #36]	; (8004fd8 <_GetDevFunc+0x5c>)
 8004fb2:	4770      	bx	lr
 8004fb4:	4809      	ldr	r0, [pc, #36]	; (8004fdc <_GetDevFunc+0x60>)
 8004fb6:	4770      	bx	lr
 8004fb8:	4809      	ldr	r0, [pc, #36]	; (8004fe0 <_GetDevFunc+0x64>)
 8004fba:	4770      	bx	lr
 8004fbc:	6802      	ldr	r2, [r0, #0]
 8004fbe:	6891      	ldr	r1, [r2, #8]
 8004fc0:	f8d1 00f4 	ldr.w	r0, [r1, #244]	; 0xf4
 8004fc4:	4770      	bx	lr
 8004fc6:	4807      	ldr	r0, [pc, #28]	; (8004fe4 <_GetDevFunc+0x68>)
 8004fc8:	4770      	bx	lr
 8004fca:	6803      	ldr	r3, [r0, #0]
 8004fcc:	6898      	ldr	r0, [r3, #8]
 8004fce:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
 8004fd2:	4770      	bx	lr
 8004fd4:	08004e9d 	.word	0x08004e9d
 8004fd8:	080050d9 	.word	0x080050d9
 8004fdc:	08005259 	.word	0x08005259
 8004fe0:	080051e1 	.word	0x080051e1
 8004fe4:	08005119 	.word	0x08005119

08004fe8 <_GetDevProp>:
 8004fe8:	3901      	subs	r1, #1
 8004fea:	6880      	ldr	r0, [r0, #8]
 8004fec:	290d      	cmp	r1, #13
 8004fee:	d81f      	bhi.n	8005030 <_GetDevProp+0x48>
 8004ff0:	e8df f001 	tbb	[pc, r1]
 8004ff4:	27252321 	.word	0x27252321
 8004ff8:	291e1e1e 	.word	0x291e1e1e
 8004ffc:	070c0c0e 	.word	0x070c0c0e
 8005000:	1017      	.short	0x1017
 8005002:	b120      	cbz	r0, 800500e <_GetDevProp+0x26>
 8005004:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005006:	f012 0001 	ands.w	r0, r2, #1
 800500a:	d000      	beq.n	800500e <_GetDevProp+0x26>
 800500c:	2001      	movs	r0, #1
 800500e:	4770      	bx	lr
 8005010:	2000      	movs	r0, #0
 8005012:	4770      	bx	lr
 8005014:	2800      	cmp	r0, #0
 8005016:	d0fa      	beq.n	800500e <_GetDevProp+0x26>
 8005018:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800501a:	f013 0004 	ands.w	r0, r3, #4
 800501e:	d1f5      	bne.n	800500c <_GetDevProp+0x24>
 8005020:	4770      	bx	lr
 8005022:	2800      	cmp	r0, #0
 8005024:	d0f3      	beq.n	800500e <_GetDevProp+0x26>
 8005026:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8005028:	f010 0002 	ands.w	r0, r0, #2
 800502c:	d1ee      	bne.n	800500c <_GetDevProp+0x24>
 800502e:	4770      	bx	lr
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	4770      	bx	lr
 8005036:	6800      	ldr	r0, [r0, #0]
 8005038:	4770      	bx	lr
 800503a:	6840      	ldr	r0, [r0, #4]
 800503c:	4770      	bx	lr
 800503e:	6880      	ldr	r0, [r0, #8]
 8005040:	4770      	bx	lr
 8005042:	68c0      	ldr	r0, [r0, #12]
 8005044:	4770      	bx	lr
 8005046:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop

0800504c <_GetDevData>:
 800504c:	6883      	ldr	r3, [r0, #8]
 800504e:	2901      	cmp	r1, #1
 8005050:	bf0c      	ite	eq
 8005052:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 8005054:	2000      	movne	r0, #0
 8005056:	4770      	bx	lr

08005058 <_GetRect>:
 8005058:	6883      	ldr	r3, [r0, #8]
 800505a:	e893 0005 	ldmia.w	r3, {r0, r2}
 800505e:	2300      	movs	r3, #0
 8005060:	3801      	subs	r0, #1
 8005062:	3a01      	subs	r2, #1
 8005064:	800b      	strh	r3, [r1, #0]
 8005066:	804b      	strh	r3, [r1, #2]
 8005068:	8088      	strh	r0, [r1, #4]
 800506a:	80ca      	strh	r2, [r1, #6]
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop

08005070 <GUIDRV_FlexColor__SetLog2Phys>:
 8005070:	b4f0      	push	{r4, r5, r6, r7}
 8005072:	f24d 0528 	movw	r5, #53288	; 0xd028
 8005076:	f6c0 0500 	movt	r5, #2048	; 0x800
 800507a:	462e      	mov	r6, r5
 800507c:	4607      	mov	r7, r0
 800507e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005080:	b090      	sub	sp, #64	; 0x40
 8005082:	466c      	mov	r4, sp
 8005084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005086:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800508a:	3520      	adds	r5, #32
 800508c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005092:	ac08      	add	r4, sp, #32
 8005094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005096:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800509a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800509c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80050a0:	eb0c 0586 	add.w	r5, ip, r6, lsl #2
 80050a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80050a8:	f855 3c40 	ldr.w	r3, [r5, #-64]
 80050ac:	f855 0c20 	ldr.w	r0, [r5, #-32]
 80050b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050b4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
 80050b8:	b010      	add	sp, #64	; 0x40
 80050ba:	bcf0      	pop	{r4, r5, r6, r7}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <_SetOrg>:
 80050c0:	b500      	push	{lr}
 80050c2:	b083      	sub	sp, #12
 80050c4:	e88d 0006 	stmia.w	sp, {r1, r2}
 80050c8:	6980      	ldr	r0, [r0, #24]
 80050ca:	2103      	movs	r1, #3
 80050cc:	466a      	mov	r2, sp
 80050ce:	f7fd ff7f 	bl	8002fd0 <LCD_X_DisplayDriver>
 80050d2:	b003      	add	sp, #12
 80050d4:	bd00      	pop	{pc}
 80050d6:	bf00      	nop

080050d8 <_GetDevFunc_SetVSize>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	6884      	ldr	r4, [r0, #8]
 80050dc:	4605      	mov	r5, r0
 80050de:	460f      	mov	r7, r1
 80050e0:	4616      	mov	r6, r2
 80050e2:	b114      	cbz	r4, 80050ea <_GetDevFunc_SetVSize+0x12>
 80050e4:	60a7      	str	r7, [r4, #8]
 80050e6:	60e6      	str	r6, [r4, #12]
 80050e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ea:	f44f 70ba 	mov.w	r0, #372	; 0x174
 80050ee:	f001 ff43 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 80050f2:	4621      	mov	r1, r4
 80050f4:	60a8      	str	r0, [r5, #8]
 80050f6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80050fa:	f000 fa41 	bl	8005580 <GUI__memset>
 80050fe:	68ab      	ldr	r3, [r5, #8]
 8005100:	4904      	ldr	r1, [pc, #16]	; (8005114 <_GetDevFunc_SetVSize+0x3c>)
 8005102:	641d      	str	r5, [r3, #64]	; 0x40
 8005104:	2202      	movs	r2, #2
 8005106:	2001      	movs	r0, #1
 8005108:	84da      	strh	r2, [r3, #38]	; 0x26
 800510a:	6218      	str	r0, [r3, #32]
 800510c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8005110:	68ac      	ldr	r4, [r5, #8]
 8005112:	e7e7      	b.n	80050e4 <_GetDevFunc_SetVSize+0xc>
 8005114:	08005071 	.word	0x08005071

08005118 <_SetDevFunc>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	6884      	ldr	r4, [r0, #8]
 800511c:	4606      	mov	r6, r0
 800511e:	460d      	mov	r5, r1
 8005120:	4617      	mov	r7, r2
 8005122:	b304      	cbz	r4, 8005166 <_SetDevFunc+0x4e>
 8005124:	2d26      	cmp	r5, #38	; 0x26
 8005126:	d011      	beq.n	800514c <_SetDevFunc+0x34>
 8005128:	2d27      	cmp	r5, #39	; 0x27
 800512a:	d000      	beq.n	800512e <_SetDevFunc+0x16>
 800512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005130:	2b10      	cmp	r3, #16
 8005132:	d037      	beq.n	80051a4 <_SetDevFunc+0x8c>
 8005134:	2b12      	cmp	r3, #18
 8005136:	d1f9      	bne.n	800512c <_SetDevFunc+0x14>
 8005138:	2f00      	cmp	r7, #0
 800513a:	d03c      	beq.n	80051b6 <_SetDevFunc+0x9e>
 800513c:	4a23      	ldr	r2, [pc, #140]	; (80051cc <_SetDevFunc+0xb4>)
 800513e:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
 8005142:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
 8005146:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
 800514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800514c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800514e:	2910      	cmp	r1, #16
 8005150:	d020      	beq.n	8005194 <_SetDevFunc+0x7c>
 8005152:	2912      	cmp	r1, #18
 8005154:	d1ea      	bne.n	800512c <_SetDevFunc+0x14>
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <_SetDevFunc+0xb8>)
 8005158:	f8c4 70d8 	str.w	r7, [r4, #216]	; 0xd8
 800515c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8005160:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8005164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005166:	f44f 70ba 	mov.w	r0, #372	; 0x174
 800516a:	f001 ff05 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 800516e:	4621      	mov	r1, r4
 8005170:	60b0      	str	r0, [r6, #8]
 8005172:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8005176:	f000 fa03 	bl	8005580 <GUI__memset>
 800517a:	68b3      	ldr	r3, [r6, #8]
 800517c:	4915      	ldr	r1, [pc, #84]	; (80051d4 <_SetDevFunc+0xbc>)
 800517e:	641e      	str	r6, [r3, #64]	; 0x40
 8005180:	2202      	movs	r2, #2
 8005182:	2001      	movs	r0, #1
 8005184:	84da      	strh	r2, [r3, #38]	; 0x26
 8005186:	6218      	str	r0, [r3, #32]
 8005188:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 800518c:	68b4      	ldr	r4, [r6, #8]
 800518e:	2c00      	cmp	r4, #0
 8005190:	d1c8      	bne.n	8005124 <_SetDevFunc+0xc>
 8005192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005194:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <_SetDevFunc+0xc0>)
 8005196:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
 800519a:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 800519e:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 80051a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a4:	b167      	cbz	r7, 80051c0 <_SetDevFunc+0xa8>
 80051a6:	480d      	ldr	r0, [pc, #52]	; (80051dc <_SetDevFunc+0xc4>)
 80051a8:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
 80051ac:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 80051b0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80051b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b6:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
 80051ba:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
 80051be:	e7b5      	b.n	800512c <_SetDevFunc+0x14>
 80051c0:	f8c4 70c8 	str.w	r7, [r4, #200]	; 0xc8
 80051c4:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
 80051c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08004f41 	.word	0x08004f41
 80051d0:	08004ef5 	.word	0x08004ef5
 80051d4:	08005071 	.word	0x08005071
 80051d8:	08004ee5 	.word	0x08004ee5
 80051dc:	08004f05 	.word	0x08004f05

080051e0 <_GetDevFunc_Init>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	6884      	ldr	r4, [r0, #8]
 80051e4:	4605      	mov	r5, r0
 80051e6:	b304      	cbz	r4, 800522a <_GetDevFunc_Init+0x4a>
 80051e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051ec:	f001 fec4 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 80051f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	66a0      	str	r0, [r4, #104]	; 0x68
 80051f6:	1dd0      	adds	r0, r2, #7
 80051f8:	10c0      	asrs	r0, r0, #3
 80051fa:	fb03 f000 	mul.w	r0, r3, r0
 80051fe:	f001 febb 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 8005202:	2200      	movs	r2, #0
 8005204:	2101      	movs	r1, #1
 8005206:	66e0      	str	r0, [r4, #108]	; 0x6c
 8005208:	69a8      	ldr	r0, [r5, #24]
 800520a:	f7fd fee1 	bl	8002fd0 <LCD_X_DisplayDriver>
 800520e:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
 8005212:	4605      	mov	r5, r0
 8005214:	4620      	mov	r0, r4
 8005216:	4788      	blx	r1
 8005218:	4620      	mov	r0, r4
 800521a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800521e:	4790      	blx	r2
 8005220:	2d00      	cmp	r5, #0
 8005222:	bfd4      	ite	le
 8005224:	2000      	movle	r0, #0
 8005226:	2001      	movgt	r0, #1
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	f44f 70ba 	mov.w	r0, #372	; 0x174
 800522e:	f001 fea3 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 8005232:	4621      	mov	r1, r4
 8005234:	60a8      	str	r0, [r5, #8]
 8005236:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800523a:	f000 f9a1 	bl	8005580 <GUI__memset>
 800523e:	68ab      	ldr	r3, [r5, #8]
 8005240:	4904      	ldr	r1, [pc, #16]	; (8005254 <_GetDevFunc_Init+0x74>)
 8005242:	641d      	str	r5, [r3, #64]	; 0x40
 8005244:	2202      	movs	r2, #2
 8005246:	2001      	movs	r0, #1
 8005248:	84da      	strh	r2, [r3, #38]	; 0x26
 800524a:	6218      	str	r0, [r3, #32]
 800524c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8005250:	68ac      	ldr	r4, [r5, #8]
 8005252:	e7c9      	b.n	80051e8 <_GetDevFunc_Init+0x8>
 8005254:	08005071 	.word	0x08005071

08005258 <_GetDevFunc_SetSize>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	6884      	ldr	r4, [r0, #8]
 800525c:	4605      	mov	r5, r0
 800525e:	460f      	mov	r7, r1
 8005260:	4616      	mov	r6, r2
 8005262:	b114      	cbz	r4, 800526a <_GetDevFunc_SetSize+0x12>
 8005264:	6027      	str	r7, [r4, #0]
 8005266:	6066      	str	r6, [r4, #4]
 8005268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526a:	f44f 70ba 	mov.w	r0, #372	; 0x174
 800526e:	f001 fe83 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 8005272:	4621      	mov	r1, r4
 8005274:	60a8      	str	r0, [r5, #8]
 8005276:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800527a:	f000 f981 	bl	8005580 <GUI__memset>
 800527e:	68ab      	ldr	r3, [r5, #8]
 8005280:	4904      	ldr	r1, [pc, #16]	; (8005294 <_GetDevFunc_SetSize+0x3c>)
 8005282:	641d      	str	r5, [r3, #64]	; 0x40
 8005284:	2202      	movs	r2, #2
 8005286:	2001      	movs	r0, #1
 8005288:	84da      	strh	r2, [r3, #38]	; 0x26
 800528a:	6218      	str	r0, [r3, #32]
 800528c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8005290:	68ac      	ldr	r4, [r5, #8]
 8005292:	e7e7      	b.n	8005264 <_GetDevFunc_SetSize+0xc>
 8005294:	08005071 	.word	0x08005071

08005298 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8005298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529c:	6884      	ldr	r4, [r0, #8]
 800529e:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80052a0:	f000 0502 	and.w	r5, r0, #2
 80052a4:	b2a8      	uxth	r0, r5
 80052a6:	b082      	sub	sp, #8
 80052a8:	4688      	mov	r8, r1
 80052aa:	4617      	mov	r7, r2
 80052ac:	461d      	mov	r5, r3
 80052ae:	b338      	cbz	r0, 8005300 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x68>
 80052b0:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 80052b4:	4620      	mov	r0, r4
 80052b6:	47b0      	blx	r6
 80052b8:	4641      	mov	r1, r8
 80052ba:	4606      	mov	r6, r0
 80052bc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80052c0:	463a      	mov	r2, r7
 80052c2:	4620      	mov	r0, r4
 80052c4:	4798      	blx	r3
 80052c6:	6921      	ldr	r1, [r4, #16]
 80052c8:	69a2      	ldr	r2, [r4, #24]
 80052ca:	42b1      	cmp	r1, r6
 80052cc:	4680      	mov	r8, r0
 80052ce:	bfd4      	ite	le
 80052d0:	2100      	movle	r1, #0
 80052d2:	2101      	movgt	r1, #1
 80052d4:	6960      	ldr	r0, [r4, #20]
 80052d6:	42b2      	cmp	r2, r6
 80052d8:	bfac      	ite	ge
 80052da:	460b      	movge	r3, r1
 80052dc:	f041 0301 	orrlt.w	r3, r1, #1
 80052e0:	4540      	cmp	r0, r8
 80052e2:	bfd4      	ite	le
 80052e4:	4619      	movle	r1, r3
 80052e6:	f043 0101 	orrgt.w	r1, r3, #1
 80052ea:	b9a9      	cbnz	r1, 8005318 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 80052ec:	69e2      	ldr	r2, [r4, #28]
 80052ee:	4542      	cmp	r2, r8
 80052f0:	db12      	blt.n	8005318 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 80052f2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80052f6:	4620      	mov	r0, r4
 80052f8:	4631      	mov	r1, r6
 80052fa:	4642      	mov	r2, r8
 80052fc:	4798      	blx	r3
 80052fe:	e003      	b.n	8005308 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 8005300:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8005304:	4620      	mov	r0, r4
 8005306:	4798      	blx	r3
 8005308:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 800530c:	4620      	mov	r0, r4
 800530e:	4629      	mov	r1, r5
 8005310:	4790      	blx	r2
 8005312:	b002      	add	sp, #8
 8005314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005318:	6867      	ldr	r7, [r4, #4]
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	1e78      	subs	r0, r7, #1
 800531e:	9000      	str	r0, [sp, #0]
 8005320:	2100      	movs	r1, #0
 8005322:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8005326:	4620      	mov	r0, r4
 8005328:	460a      	mov	r2, r1
 800532a:	3b01      	subs	r3, #1
 800532c:	47b8      	blx	r7
 800532e:	e7e0      	b.n	80052f2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x5a>

08005330 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	6884      	ldr	r4, [r0, #8]
 8005334:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005336:	f003 0002 	and.w	r0, r3, #2
 800533a:	b285      	uxth	r5, r0
 800533c:	b083      	sub	sp, #12
 800533e:	460f      	mov	r7, r1
 8005340:	4616      	mov	r6, r2
 8005342:	2d00      	cmp	r5, #0
 8005344:	d03b      	beq.n	80053be <GUIDRV_FlexColor__GetPixelIndexNoCache+0x8e>
 8005346:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
 800534a:	4620      	mov	r0, r4
 800534c:	47a8      	blx	r5
 800534e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8005352:	4632      	mov	r2, r6
 8005354:	4605      	mov	r5, r0
 8005356:	4639      	mov	r1, r7
 8005358:	4620      	mov	r0, r4
 800535a:	4798      	blx	r3
 800535c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8005360:	4606      	mov	r6, r0
 8005362:	b11b      	cbz	r3, 800536c <GUIDRV_FlexColor__GetPixelIndexNoCache+0x3c>
 8005364:	4620      	mov	r0, r4
 8005366:	2101      	movs	r1, #1
 8005368:	2200      	movs	r2, #0
 800536a:	4798      	blx	r3
 800536c:	6920      	ldr	r0, [r4, #16]
 800536e:	69a2      	ldr	r2, [r4, #24]
 8005370:	6961      	ldr	r1, [r4, #20]
 8005372:	42a8      	cmp	r0, r5
 8005374:	bfd4      	ite	le
 8005376:	2000      	movle	r0, #0
 8005378:	2001      	movgt	r0, #1
 800537a:	42aa      	cmp	r2, r5
 800537c:	bfac      	ite	ge
 800537e:	4603      	movge	r3, r0
 8005380:	f040 0301 	orrlt.w	r3, r0, #1
 8005384:	42b1      	cmp	r1, r6
 8005386:	bfd4      	ite	le
 8005388:	4618      	movle	r0, r3
 800538a:	f043 0001 	orrgt.w	r0, r3, #1
 800538e:	2800      	cmp	r0, #0
 8005390:	d121      	bne.n	80053d6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa6>
 8005392:	69e2      	ldr	r2, [r4, #28]
 8005394:	42b2      	cmp	r2, r6
 8005396:	db1e      	blt.n	80053d6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa6>
 8005398:	4629      	mov	r1, r5
 800539a:	4620      	mov	r0, r4
 800539c:	4632      	mov	r2, r6
 800539e:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 80053a2:	47a8      	blx	r5
 80053a4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80053a8:	4620      	mov	r0, r4
 80053aa:	4790      	blx	r2
 80053ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80053b0:	4605      	mov	r5, r0
 80053b2:	b16b      	cbz	r3, 80053d0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa0>
 80053b4:	4620      	mov	r0, r4
 80053b6:	2100      	movs	r1, #0
 80053b8:	2201      	movs	r2, #1
 80053ba:	4798      	blx	r3
 80053bc:	e008      	b.n	80053d0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xa0>
 80053be:	4620      	mov	r0, r4
 80053c0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80053c4:	4798      	blx	r3
 80053c6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80053ca:	4620      	mov	r0, r4
 80053cc:	4788      	blx	r1
 80053ce:	4605      	mov	r5, r0
 80053d0:	4628      	mov	r0, r5
 80053d2:	b003      	add	sp, #12
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d6:	6867      	ldr	r7, [r4, #4]
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	1e79      	subs	r1, r7, #1
 80053dc:	9100      	str	r1, [sp, #0]
 80053de:	2100      	movs	r1, #0
 80053e0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80053e4:	4620      	mov	r0, r4
 80053e6:	460a      	mov	r2, r1
 80053e8:	3b01      	subs	r3, #1
 80053ea:	47b8      	blx	r7
 80053ec:	e7d4      	b.n	8005398 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x68>
 80053ee:	bf00      	nop

080053f0 <GUIDRV_FlexColor__InitOnce>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	6885      	ldr	r5, [r0, #8]
 80053f4:	4604      	mov	r4, r0
 80053f6:	b105      	cbz	r5, 80053fa <GUIDRV_FlexColor__InitOnce+0xa>
 80053f8:	bd38      	pop	{r3, r4, r5, pc}
 80053fa:	f44f 70ba 	mov.w	r0, #372	; 0x174
 80053fe:	f001 fdbb 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 8005402:	4629      	mov	r1, r5
 8005404:	60a0      	str	r0, [r4, #8]
 8005406:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800540a:	f000 f8b9 	bl	8005580 <GUI__memset>
 800540e:	68a3      	ldr	r3, [r4, #8]
 8005410:	4904      	ldr	r1, [pc, #16]	; (8005424 <GUIDRV_FlexColor__InitOnce+0x34>)
 8005412:	641c      	str	r4, [r3, #64]	; 0x40
 8005414:	2202      	movs	r2, #2
 8005416:	2001      	movs	r0, #1
 8005418:	84da      	strh	r2, [r3, #38]	; 0x26
 800541a:	6218      	str	r0, [r3, #32]
 800541c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	bf00      	nop
 8005424:	08005071 	.word	0x08005071

08005428 <GUIDRV_FlexColor_Config>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	6884      	ldr	r4, [r0, #8]
 800542c:	4606      	mov	r6, r0
 800542e:	460d      	mov	r5, r1
 8005430:	b1b4      	cbz	r4, 8005460 <GUIDRV_FlexColor_Config+0x38>
 8005432:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8005436:	6363      	str	r3, [r4, #52]	; 0x34
 8005438:	075b      	lsls	r3, r3, #29
 800543a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800543c:	6322      	str	r2, [r4, #48]	; 0x30
 800543e:	d507      	bpl.n	8005450 <GUIDRV_FlexColor_Config+0x28>
 8005440:	e894 0005 	ldmia.w	r4, {r0, r2}
 8005444:	68a1      	ldr	r1, [r4, #8]
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	6022      	str	r2, [r4, #0]
 800544a:	6060      	str	r0, [r4, #4]
 800544c:	60a3      	str	r3, [r4, #8]
 800544e:	60e1      	str	r1, [r4, #12]
 8005450:	89aa      	ldrh	r2, [r5, #12]
 8005452:	6928      	ldr	r0, [r5, #16]
 8005454:	84a2      	strh	r2, [r4, #36]	; 0x24
 8005456:	b110      	cbz	r0, 800545e <GUIDRV_FlexColor_Config+0x36>
 8005458:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 800545c:	6221      	str	r1, [r4, #32]
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8005464:	f001 fd88 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 8005468:	4621      	mov	r1, r4
 800546a:	60b0      	str	r0, [r6, #8]
 800546c:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8005470:	f000 f886 	bl	8005580 <GUI__memset>
 8005474:	68b3      	ldr	r3, [r6, #8]
 8005476:	4905      	ldr	r1, [pc, #20]	; (800548c <GUIDRV_FlexColor_Config+0x64>)
 8005478:	641e      	str	r6, [r3, #64]	; 0x40
 800547a:	2202      	movs	r2, #2
 800547c:	2001      	movs	r0, #1
 800547e:	84da      	strh	r2, [r3, #38]	; 0x26
 8005480:	6218      	str	r0, [r3, #32]
 8005482:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 8005486:	68b4      	ldr	r4, [r6, #8]
 8005488:	e7d3      	b.n	8005432 <GUIDRV_FlexColor_Config+0xa>
 800548a:	bf00      	nop
 800548c:	08005071 	.word	0x08005071

08005490 <GUIDRV_FlexColor_SetFunc>:
 8005490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	6885      	ldr	r5, [r0, #8]
 8005496:	4604      	mov	r4, r0
 8005498:	4688      	mov	r8, r1
 800549a:	4616      	mov	r6, r2
 800549c:	461f      	mov	r7, r3
 800549e:	b17d      	cbz	r5, 80054c0 <GUIDRV_FlexColor_SetFunc+0x30>
 80054a0:	4641      	mov	r1, r8
 80054a2:	2268      	movs	r2, #104	; 0x68
 80054a4:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 80054a8:	f006 f91e 	bl	800b6e8 <memcpy>
 80054ac:	4620      	mov	r0, r4
 80054ae:	47b0      	blx	r6
 80054b0:	4620      	mov	r0, r4
 80054b2:	47b8      	blx	r7
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	4790      	blx	r2
 80054ba:	62a8      	str	r0, [r5, #40]	; 0x28
 80054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c0:	f44f 70ba 	mov.w	r0, #372	; 0x174
 80054c4:	f001 fd58 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 80054c8:	4629      	mov	r1, r5
 80054ca:	60a0      	str	r0, [r4, #8]
 80054cc:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80054d0:	f000 f856 	bl	8005580 <GUI__memset>
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	4905      	ldr	r1, [pc, #20]	; (80054ec <GUIDRV_FlexColor_SetFunc+0x5c>)
 80054d8:	641c      	str	r4, [r3, #64]	; 0x40
 80054da:	2202      	movs	r2, #2
 80054dc:	2001      	movs	r0, #1
 80054de:	84da      	strh	r2, [r3, #38]	; 0x26
 80054e0:	6218      	str	r0, [r3, #32]
 80054e2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 80054e6:	68a5      	ldr	r5, [r4, #8]
 80054e8:	e7da      	b.n	80054a0 <GUIDRV_FlexColor_SetFunc+0x10>
 80054ea:	bf00      	nop
 80054ec:	08005071 	.word	0x08005071

080054f0 <LCD_SetVSizeEx>:
 80054f0:	b530      	push	{r4, r5, lr}
 80054f2:	b083      	sub	sp, #12
 80054f4:	460d      	mov	r5, r1
 80054f6:	4614      	mov	r4, r2
 80054f8:	f000 f9f8 	bl	80058ec <GUI_DEVICE__GetpDriver>
 80054fc:	9001      	str	r0, [sp, #4]
 80054fe:	b168      	cbz	r0, 800551c <LCD_SetVSizeEx+0x2c>
 8005500:	68c3      	ldr	r3, [r0, #12]
 8005502:	210a      	movs	r1, #10
 8005504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005506:	a801      	add	r0, sp, #4
 8005508:	4790      	blx	r2
 800550a:	4603      	mov	r3, r0
 800550c:	b130      	cbz	r0, 800551c <LCD_SetVSizeEx+0x2c>
 800550e:	9801      	ldr	r0, [sp, #4]
 8005510:	4629      	mov	r1, r5
 8005512:	4622      	mov	r2, r4
 8005514:	4798      	blx	r3
 8005516:	2000      	movs	r0, #0
 8005518:	b003      	add	sp, #12
 800551a:	bd30      	pop	{r4, r5, pc}
 800551c:	2001      	movs	r0, #1
 800551e:	e7fb      	b.n	8005518 <LCD_SetVSizeEx+0x28>

08005520 <LCD_SetSizeEx>:
 8005520:	b530      	push	{r4, r5, lr}
 8005522:	b083      	sub	sp, #12
 8005524:	460d      	mov	r5, r1
 8005526:	4614      	mov	r4, r2
 8005528:	f000 f9e0 	bl	80058ec <GUI_DEVICE__GetpDriver>
 800552c:	9001      	str	r0, [sp, #4]
 800552e:	b168      	cbz	r0, 800554c <LCD_SetSizeEx+0x2c>
 8005530:	68c3      	ldr	r3, [r0, #12]
 8005532:	210b      	movs	r1, #11
 8005534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005536:	a801      	add	r0, sp, #4
 8005538:	4790      	blx	r2
 800553a:	4603      	mov	r3, r0
 800553c:	b130      	cbz	r0, 800554c <LCD_SetSizeEx+0x2c>
 800553e:	9801      	ldr	r0, [sp, #4]
 8005540:	4629      	mov	r1, r5
 8005542:	4622      	mov	r2, r4
 8005544:	4798      	blx	r3
 8005546:	2000      	movs	r0, #0
 8005548:	b003      	add	sp, #12
 800554a:	bd30      	pop	{r4, r5, pc}
 800554c:	2001      	movs	r0, #1
 800554e:	e7fb      	b.n	8005548 <LCD_SetSizeEx+0x28>

08005550 <LCD_SetLUTEntryEx>:
 8005550:	b530      	push	{r4, r5, lr}
 8005552:	b083      	sub	sp, #12
 8005554:	460d      	mov	r5, r1
 8005556:	4614      	mov	r4, r2
 8005558:	f000 f9c8 	bl	80058ec <GUI_DEVICE__GetpDriver>
 800555c:	9001      	str	r0, [sp, #4]
 800555e:	b168      	cbz	r0, 800557c <LCD_SetLUTEntryEx+0x2c>
 8005560:	68c3      	ldr	r3, [r0, #12]
 8005562:	2110      	movs	r1, #16
 8005564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005566:	a801      	add	r0, sp, #4
 8005568:	4790      	blx	r2
 800556a:	4603      	mov	r3, r0
 800556c:	b130      	cbz	r0, 800557c <LCD_SetLUTEntryEx+0x2c>
 800556e:	9801      	ldr	r0, [sp, #4]
 8005570:	4629      	mov	r1, r5
 8005572:	4622      	mov	r2, r4
 8005574:	4798      	blx	r3
 8005576:	2000      	movs	r0, #0
 8005578:	b003      	add	sp, #12
 800557a:	bd30      	pop	{r4, r5, pc}
 800557c:	2001      	movs	r0, #1
 800557e:	e7fb      	b.n	8005578 <LCD_SetLUTEntryEx+0x28>

08005580 <GUI__memset>:
 8005580:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8005584:	2a00      	cmp	r2, #0
 8005586:	f000 80cf 	beq.w	8005728 <GUI__memset+0x1a8>
 800558a:	f010 0f03 	tst.w	r0, #3
 800558e:	4603      	mov	r3, r0
 8005590:	d00d      	beq.n	80055ae <GUI__memset+0x2e>
 8005592:	1e54      	subs	r4, r2, #1
 8005594:	f014 0f01 	tst.w	r4, #1
 8005598:	f000 80d5 	beq.w	8005746 <GUI__memset+0x1c6>
 800559c:	4603      	mov	r3, r0
 800559e:	4622      	mov	r2, r4
 80055a0:	f803 1b01 	strb.w	r1, [r3], #1
 80055a4:	f013 0f03 	tst.w	r3, #3
 80055a8:	4618      	mov	r0, r3
 80055aa:	f040 80cc 	bne.w	8005746 <GUI__memset+0x1c6>
 80055ae:	0897      	lsrs	r7, r2, #2
 80055b0:	d048      	beq.n	8005644 <GUI__memset+0xc4>
 80055b2:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 80055b6:	2f03      	cmp	r7, #3
 80055b8:	f002 0203 	and.w	r2, r2, #3
 80055bc:	eb04 4304 	add.w	r3, r4, r4, lsl #16
 80055c0:	dd28      	ble.n	8005614 <GUI__memset+0x94>
 80055c2:	1f3d      	subs	r5, r7, #4
 80055c4:	462e      	mov	r6, r5
 80055c6:	2e03      	cmp	r6, #3
 80055c8:	6003      	str	r3, [r0, #0]
 80055ca:	6043      	str	r3, [r0, #4]
 80055cc:	6083      	str	r3, [r0, #8]
 80055ce:	60c3      	str	r3, [r0, #12]
 80055d0:	f3c5 0580 	ubfx	r5, r5, #2, #1
 80055d4:	f100 0410 	add.w	r4, r0, #16
 80055d8:	dd14      	ble.n	8005604 <GUI__memset+0x84>
 80055da:	b13d      	cbz	r5, 80055ec <GUI__memset+0x6c>
 80055dc:	3e04      	subs	r6, #4
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	6063      	str	r3, [r4, #4]
 80055e2:	60a3      	str	r3, [r4, #8]
 80055e4:	60e3      	str	r3, [r4, #12]
 80055e6:	3410      	adds	r4, #16
 80055e8:	2e03      	cmp	r6, #3
 80055ea:	dd0b      	ble.n	8005604 <GUI__memset+0x84>
 80055ec:	3e08      	subs	r6, #8
 80055ee:	6023      	str	r3, [r4, #0]
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	60a3      	str	r3, [r4, #8]
 80055f4:	60e3      	str	r3, [r4, #12]
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	6163      	str	r3, [r4, #20]
 80055fa:	61a3      	str	r3, [r4, #24]
 80055fc:	61e3      	str	r3, [r4, #28]
 80055fe:	3420      	adds	r4, #32
 8005600:	2e03      	cmp	r6, #3
 8005602:	dcf3      	bgt.n	80055ec <GUI__memset+0x6c>
 8005604:	3f04      	subs	r7, #4
 8005606:	08bc      	lsrs	r4, r7, #2
 8005608:	1c65      	adds	r5, r4, #1
 800560a:	ebb7 0784 	subs.w	r7, r7, r4, lsl #2
 800560e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8005612:	d015      	beq.n	8005640 <GUI__memset+0xc0>
 8005614:	1e7e      	subs	r6, r7, #1
 8005616:	4604      	mov	r4, r0
 8005618:	4635      	mov	r5, r6
 800561a:	f844 3b04 	str.w	r3, [r4], #4
 800561e:	f006 0601 	and.w	r6, r6, #1
 8005622:	b15d      	cbz	r5, 800563c <GUI__memset+0xbc>
 8005624:	b11e      	cbz	r6, 800562e <GUI__memset+0xae>
 8005626:	3d01      	subs	r5, #1
 8005628:	f844 3b04 	str.w	r3, [r4], #4
 800562c:	d006      	beq.n	800563c <GUI__memset+0xbc>
 800562e:	4626      	mov	r6, r4
 8005630:	f846 3b04 	str.w	r3, [r6], #4
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	1d34      	adds	r4, r6, #4
 8005638:	3d02      	subs	r5, #2
 800563a:	d1f8      	bne.n	800562e <GUI__memset+0xae>
 800563c:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8005640:	2a00      	cmp	r2, #0
 8005642:	d071      	beq.n	8005728 <GUI__memset+0x1a8>
 8005644:	4243      	negs	r3, r0
 8005646:	f003 0703 	and.w	r7, r3, #3
 800564a:	4297      	cmp	r7, r2
 800564c:	bf28      	it	cs
 800564e:	4617      	movcs	r7, r2
 8005650:	2a03      	cmp	r2, #3
 8005652:	bf98      	it	ls
 8005654:	4617      	movls	r7, r2
 8005656:	4691      	mov	r9, r2
 8005658:	2f00      	cmp	r7, #0
 800565a:	d07b      	beq.n	8005754 <GUI__memset+0x1d4>
 800565c:	4603      	mov	r3, r0
 800565e:	43c5      	mvns	r5, r0
 8005660:	f803 1b01 	strb.w	r1, [r3], #1
 8005664:	1944      	adds	r4, r0, r5
 8005666:	1a1d      	subs	r5, r3, r0
 8005668:	19e6      	adds	r6, r4, r7
 800566a:	3a01      	subs	r2, #1
 800566c:	42bd      	cmp	r5, r7
 800566e:	f006 0401 	and.w	r4, r6, #1
 8005672:	461e      	mov	r6, r3
 8005674:	d211      	bcs.n	800569a <GUI__memset+0x11a>
 8005676:	b134      	cbz	r4, 8005686 <GUI__memset+0x106>
 8005678:	f803 1b01 	strb.w	r1, [r3], #1
 800567c:	1a1c      	subs	r4, r3, r0
 800567e:	3a01      	subs	r2, #1
 8005680:	42bc      	cmp	r4, r7
 8005682:	461e      	mov	r6, r3
 8005684:	d209      	bcs.n	800569a <GUI__memset+0x11a>
 8005686:	461c      	mov	r4, r3
 8005688:	3a02      	subs	r2, #2
 800568a:	f804 1b01 	strb.w	r1, [r4], #1
 800568e:	7059      	strb	r1, [r3, #1]
 8005690:	1c63      	adds	r3, r4, #1
 8005692:	1a1c      	subs	r4, r3, r0
 8005694:	42bc      	cmp	r4, r7
 8005696:	461e      	mov	r6, r3
 8005698:	d3f5      	bcc.n	8005686 <GUI__memset+0x106>
 800569a:	45b9      	cmp	r9, r7
 800569c:	d044      	beq.n	8005728 <GUI__memset+0x1a8>
 800569e:	ebc7 0909 	rsb	r9, r7, r9
 80056a2:	ea4f 0c99 	mov.w	ip, r9, lsr #2
 80056a6:	ea4f 088c 	mov.w	r8, ip, lsl #2
 80056aa:	f1bc 0f00 	cmp.w	ip, #0
 80056ae:	d025      	beq.n	80056fc <GUI__memset+0x17c>
 80056b0:	2500      	movs	r5, #0
 80056b2:	f361 0507 	bfi	r5, r1, #0, #8
 80056b6:	f361 250f 	bfi	r5, r1, #8, #8
 80056ba:	2401      	movs	r4, #1
 80056bc:	f361 4517 	bfi	r5, r1, #16, #8
 80056c0:	19c0      	adds	r0, r0, r7
 80056c2:	f361 651f 	bfi	r5, r1, #24, #8
 80056c6:	f10c 33ff 	add.w	r3, ip, #4294967295
 80056ca:	4564      	cmp	r4, ip
 80056cc:	f840 5b04 	str.w	r5, [r0], #4
 80056d0:	ea03 0304 	and.w	r3, r3, r4
 80056d4:	d20d      	bcs.n	80056f2 <GUI__memset+0x172>
 80056d6:	b123      	cbz	r3, 80056e2 <GUI__memset+0x162>
 80056d8:	2402      	movs	r4, #2
 80056da:	4564      	cmp	r4, ip
 80056dc:	f840 5b04 	str.w	r5, [r0], #4
 80056e0:	d207      	bcs.n	80056f2 <GUI__memset+0x172>
 80056e2:	4603      	mov	r3, r0
 80056e4:	3402      	adds	r4, #2
 80056e6:	f843 5b04 	str.w	r5, [r3], #4
 80056ea:	6045      	str	r5, [r0, #4]
 80056ec:	1d18      	adds	r0, r3, #4
 80056ee:	4564      	cmp	r4, ip
 80056f0:	d3f7      	bcc.n	80056e2 <GUI__memset+0x162>
 80056f2:	45c1      	cmp	r9, r8
 80056f4:	4446      	add	r6, r8
 80056f6:	ebc8 0202 	rsb	r2, r8, r2
 80056fa:	d015      	beq.n	8005728 <GUI__memset+0x1a8>
 80056fc:	4633      	mov	r3, r6
 80056fe:	18b2      	adds	r2, r6, r2
 8005700:	f803 1b01 	strb.w	r1, [r3], #1
 8005704:	43f6      	mvns	r6, r6
 8005706:	1990      	adds	r0, r2, r6
 8005708:	4293      	cmp	r3, r2
 800570a:	f000 0601 	and.w	r6, r0, #1
 800570e:	d00b      	beq.n	8005728 <GUI__memset+0x1a8>
 8005710:	b11e      	cbz	r6, 800571a <GUI__memset+0x19a>
 8005712:	f803 1b01 	strb.w	r1, [r3], #1
 8005716:	4293      	cmp	r3, r2
 8005718:	d006      	beq.n	8005728 <GUI__memset+0x1a8>
 800571a:	4618      	mov	r0, r3
 800571c:	f800 1b01 	strb.w	r1, [r0], #1
 8005720:	7059      	strb	r1, [r3, #1]
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	4293      	cmp	r3, r2
 8005726:	d1f8      	bne.n	800571a <GUI__memset+0x19a>
 8005728:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800572c:	4770      	bx	lr
 800572e:	f010 0f03 	tst.w	r0, #3
 8005732:	f43f af3c 	beq.w	80055ae <GUI__memset+0x2e>
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	3a01      	subs	r2, #1
 800573c:	f013 0f03 	tst.w	r3, #3
 8005740:	4618      	mov	r0, r3
 8005742:	f43f af34 	beq.w	80055ae <GUI__memset+0x2e>
 8005746:	4618      	mov	r0, r3
 8005748:	3a01      	subs	r2, #1
 800574a:	f800 1b01 	strb.w	r1, [r0], #1
 800574e:	4603      	mov	r3, r0
 8005750:	d1ed      	bne.n	800572e <GUI__memset+0x1ae>
 8005752:	e7e9      	b.n	8005728 <GUI__memset+0x1a8>
 8005754:	4606      	mov	r6, r0
 8005756:	e7a2      	b.n	800569e <GUI__memset+0x11e>

08005758 <GUI_SetFont>:
 8005758:	4b03      	ldr	r3, [pc, #12]	; (8005768 <GUI_SetFont+0x10>)
 800575a:	6819      	ldr	r1, [r3, #0]
 800575c:	4602      	mov	r2, r0
 800575e:	69c8      	ldr	r0, [r1, #28]
 8005760:	b102      	cbz	r2, 8005764 <GUI_SetFont+0xc>
 8005762:	61ca      	str	r2, [r1, #28]
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	1fffc808 	.word	0x1fffc808

0800576c <GUI_SetColor>:
 800576c:	f004 bb38 	b.w	8009de0 <LCD_SetColor>

08005770 <GUI_DispStringHCenterAt>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	f64c 0308 	movw	r3, #51208	; 0xc808
 8005776:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800577a:	4605      	mov	r5, r0
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
 8005782:	f044 0002 	orr.w	r0, r4, #2
 8005786:	460f      	mov	r7, r1
 8005788:	4616      	mov	r6, r2
 800578a:	f004 fc49 	bl	800a020 <GUI_SetTextAlign>
 800578e:	4639      	mov	r1, r7
 8005790:	4604      	mov	r4, r0
 8005792:	4632      	mov	r2, r6
 8005794:	4628      	mov	r0, r5
 8005796:	f000 f805 	bl	80057a4 <GUI_DispStringAt>
 800579a:	4620      	mov	r0, r4
 800579c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057a0:	f004 bc3e 	b.w	800a020 <GUI_SetTextAlign>

080057a4 <GUI_DispStringAt>:
 80057a4:	f64c 0308 	movw	r3, #51208	; 0xc808
 80057a8:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	8459      	strh	r1, [r3, #34]	; 0x22
 80057b0:	849a      	strh	r2, [r3, #36]	; 0x24
 80057b2:	f000 b801 	b.w	80057b8 <GUI_DispString>
 80057b6:	bf00      	nop

080057b8 <GUI_DispString>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	4604      	mov	r4, r0
 80057be:	b085      	sub	sp, #20
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d06f      	beq.n	80058a4 <GUI_DispString+0xec>
 80057c4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80058e8 <GUI_DispString+0x130>
 80057c8:	f000 fc56 	bl	8006078 <GUI_GetFontDistY>
 80057cc:	f8d8 3000 	ldr.w	r3, [r8]
 80057d0:	4681      	mov	r9, r0
 80057d2:	8c58      	ldrh	r0, [r3, #34]	; 0x22
 80057d4:	9000      	str	r0, [sp, #0]
 80057d6:	f000 fc37 	bl	8006048 <GUI_GetYAdjust>
 80057da:	f8d8 2000 	ldr.w	r2, [r8]
 80057de:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80057e0:	b280      	uxth	r0, r0
 80057e2:	1a0b      	subs	r3, r1, r0
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	8493      	strh	r3, [r2, #36]	; 0x24
 80057e8:	7821      	ldrb	r1, [r4, #0]
 80057ea:	9001      	str	r0, [sp, #4]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d053      	beq.n	8005898 <GUI_DispString+0xe0>
 80057f0:	fa1f f989 	uxth.w	r9, r9
 80057f4:	46c2      	mov	sl, r8
 80057f6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 fb7e 	bl	8005efc <GUI__GetLineNumChars>
 8005800:	4605      	mov	r5, r0
 8005802:	4629      	mov	r1, r5
 8005804:	4620      	mov	r0, r4
 8005806:	f000 fbbf 	bl	8005f88 <GUI__GetLineDistX>
 800580a:	f8d8 3000 	ldr.w	r3, [r8]
 800580e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005810:	f002 0603 	and.w	r6, r2, #3
 8005814:	2e01      	cmp	r6, #1
 8005816:	d064      	beq.n	80058e2 <GUI_DispString+0x12a>
 8005818:	2e02      	cmp	r6, #2
 800581a:	d05b      	beq.n	80058d4 <GUI_DispString+0x11c>
 800581c:	fa1f fb80 	uxth.w	fp, r0
 8005820:	f04f 0700 	mov.w	r7, #0
 8005824:	8c58      	ldrh	r0, [r3, #34]	; 0x22
 8005826:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 8005828:	1bc1      	subs	r1, r0, r7
 800582a:	fa1f fc81 	uxth.w	ip, r1
 800582e:	fa1f f78c 	uxth.w	r7, ip
 8005832:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005836:	f106 3eff 	add.w	lr, r6, #4294967295
 800583a:	4494      	add	ip, r2
 800583c:	44ce      	add	lr, r9
 800583e:	aa02      	add	r2, sp, #8
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	845f      	strh	r7, [r3, #34]	; 0x22
 8005846:	f8ad c00c 	strh.w	ip, [sp, #12]
 800584a:	f8ad e00e 	strh.w	lr, [sp, #14]
 800584e:	f8ad 7008 	strh.w	r7, [sp, #8]
 8005852:	f8ad 600a 	strh.w	r6, [sp, #10]
 8005856:	f000 fbd7 	bl	8006008 <GUI__DispLine>
 800585a:	f8d8 3000 	ldr.w	r3, [r8]
 800585e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005862:	4620      	mov	r0, r4
 8005864:	8499      	strh	r1, [r3, #36]	; 0x24
 8005866:	4629      	mov	r1, r5
 8005868:	f004 fba8 	bl	8009fbc <GUI_UC__NumChars2NumBytes>
 800586c:	5c22      	ldrb	r2, [r4, r0]
 800586e:	2a0a      	cmp	r2, #10
 8005870:	eb04 0300 	add.w	r3, r4, r0
 8005874:	d019      	beq.n	80058aa <GUI_DispString+0xf2>
 8005876:	2a0d      	cmp	r2, #13
 8005878:	d017      	beq.n	80058aa <GUI_DispString+0xf2>
 800587a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800587e:	f8da 2000 	ldr.w	r2, [sl]
 8005882:	4483      	add	fp, r0
 8005884:	f8a2 b022 	strh.w	fp, [r2, #34]	; 0x22
 8005888:	7819      	ldrb	r1, [r3, #0]
 800588a:	b119      	cbz	r1, 8005894 <GUI_DispString+0xdc>
 800588c:	7858      	ldrb	r0, [r3, #1]
 800588e:	1c5c      	adds	r4, r3, #1
 8005890:	2800      	cmp	r0, #0
 8005892:	d1b0      	bne.n	80057f6 <GUI_DispString+0x3e>
 8005894:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8005896:	9801      	ldr	r0, [sp, #4]
 8005898:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800589a:	18c3      	adds	r3, r0, r3
 800589c:	f021 0003 	bic.w	r0, r1, #3
 80058a0:	8493      	strh	r3, [r2, #36]	; 0x24
 80058a2:	8590      	strh	r0, [r2, #44]	; 0x2c
 80058a4:	b005      	add	sp, #20
 80058a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058aa:	f8d8 2000 	ldr.w	r2, [r8]
 80058ae:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80058b0:	f001 0103 	and.w	r1, r1, #3
 80058b4:	3901      	subs	r1, #1
 80058b6:	2901      	cmp	r1, #1
 80058b8:	bf8b      	itete	hi
 80058ba:	8c11      	ldrhhi	r1, [r2, #32]
 80058bc:	9800      	ldrls	r0, [sp, #0]
 80058be:	8451      	strhhi	r1, [r2, #34]	; 0x22
 80058c0:	8450      	strhls	r0, [r2, #34]	; 0x22
 80058c2:	7819      	ldrb	r1, [r3, #0]
 80058c4:	290a      	cmp	r1, #10
 80058c6:	d1e0      	bne.n	800588a <GUI_DispString+0xd2>
 80058c8:	8c90      	ldrh	r0, [r2, #36]	; 0x24
 80058ca:	eb09 0100 	add.w	r1, r9, r0
 80058ce:	8491      	strh	r1, [r2, #36]	; 0x24
 80058d0:	7819      	ldrb	r1, [r3, #0]
 80058d2:	e7da      	b.n	800588a <GUI_DispString+0xd2>
 80058d4:	eb00 7cd0 	add.w	ip, r0, r0, lsr #31
 80058d8:	f3cc 074f 	ubfx	r7, ip, #1, #16
 80058dc:	fa1f fb80 	uxth.w	fp, r0
 80058e0:	e7a0      	b.n	8005824 <GUI_DispString+0x6c>
 80058e2:	b287      	uxth	r7, r0
 80058e4:	46bb      	mov	fp, r7
 80058e6:	e79d      	b.n	8005824 <GUI_DispString+0x6c>
 80058e8:	1fffc808 	.word	0x1fffc808

080058ec <GUI_DEVICE__GetpDriver>:
 80058ec:	2800      	cmp	r0, #0
 80058ee:	dc0e      	bgt.n	800590e <GUI_DEVICE__GetpDriver+0x22>
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <GUI_DEVICE__GetpDriver+0x28>)
 80058f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80058f6:	b158      	cbz	r0, 8005910 <GUI_DEVICE__GetpDriver+0x24>
 80058f8:	68c1      	ldr	r1, [r0, #12]
 80058fa:	680a      	ldr	r2, [r1, #0]
 80058fc:	b91a      	cbnz	r2, 8005906 <GUI_DEVICE__GetpDriver+0x1a>
 80058fe:	e008      	b.n	8005912 <GUI_DEVICE__GetpDriver+0x26>
 8005900:	68c3      	ldr	r3, [r0, #12]
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	b121      	cbz	r1, 8005910 <GUI_DEVICE__GetpDriver+0x24>
 8005906:	6800      	ldr	r0, [r0, #0]
 8005908:	2800      	cmp	r0, #0
 800590a:	d1f9      	bne.n	8005900 <GUI_DEVICE__GetpDriver+0x14>
 800590c:	4770      	bx	lr
 800590e:	2000      	movs	r0, #0
 8005910:	4770      	bx	lr
 8005912:	4770      	bx	lr
 8005914:	1fffdaf0 	.word	0x1fffdaf0

08005918 <GUI_DEVICE_Unlink>:
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <GUI_DEVICE_Unlink+0x28>)
 800591a:	6981      	ldr	r1, [r0, #24]
 800591c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005920:	4298      	cmp	r0, r3
 8005922:	6803      	ldr	r3, [r0, #0]
 8005924:	bf08      	it	eq
 8005926:	f842 3021 	streq.w	r3, [r2, r1, lsl #2]
 800592a:	6842      	ldr	r2, [r0, #4]
 800592c:	b10a      	cbz	r2, 8005932 <GUI_DEVICE_Unlink+0x1a>
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	6803      	ldr	r3, [r0, #0]
 8005932:	b103      	cbz	r3, 8005936 <GUI_DEVICE_Unlink+0x1e>
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	2100      	movs	r1, #0
 8005938:	6001      	str	r1, [r0, #0]
 800593a:	6041      	str	r1, [r0, #4]
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	1fffdaf0 	.word	0x1fffdaf0

08005944 <GUI_DEVICE_Link>:
 8005944:	b470      	push	{r4, r5, r6}
 8005946:	b110      	cbz	r0, 800594e <GUI_DEVICE_Link+0xa>
 8005948:	6984      	ldr	r4, [r0, #24]
 800594a:	2c00      	cmp	r4, #0
 800594c:	dd02      	ble.n	8005954 <GUI_DEVICE_Link+0x10>
 800594e:	2001      	movs	r0, #1
 8005950:	bc70      	pop	{r4, r5, r6}
 8005952:	4770      	bx	lr
 8005954:	4d1c      	ldr	r5, [pc, #112]	; (80059c8 <GUI_DEVICE_Link+0x84>)
 8005956:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800595a:	b90b      	cbnz	r3, 8005960 <GUI_DEVICE_Link+0x1c>
 800595c:	e030      	b.n	80059c0 <GUI_DEVICE_Link+0x7c>
 800595e:	4613      	mov	r3, r2
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	2a00      	cmp	r2, #0
 8005964:	d1fb      	bne.n	800595e <GUI_DEVICE_Link+0x1a>
 8005966:	68c1      	ldr	r1, [r0, #12]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	6809      	ldr	r1, [r1, #0]
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	428a      	cmp	r2, r1
 8005970:	dd06      	ble.n	8005980 <GUI_DEVICE_Link+0x3c>
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0ea      	beq.n	800594e <GUI_DEVICE_Link+0xa>
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	428a      	cmp	r2, r1
 800597e:	dcf8      	bgt.n	8005972 <GUI_DEVICE_Link+0x2e>
 8005980:	4291      	cmp	r1, r2
 8005982:	d00b      	beq.n	800599c <GUI_DEVICE_Link+0x58>
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	b1c1      	cbz	r1, 80059ba <GUI_DEVICE_Link+0x76>
 8005988:	6008      	str	r0, [r1, #0]
 800598a:	6041      	str	r1, [r0, #4]
 800598c:	4283      	cmp	r3, r0
 800598e:	bf14      	ite	ne
 8005990:	461a      	movne	r2, r3
 8005992:	2200      	moveq	r2, #0
 8005994:	6058      	str	r0, [r3, #4]
 8005996:	6002      	str	r2, [r0, #0]
 8005998:	2000      	movs	r0, #0
 800599a:	e7d9      	b.n	8005950 <GUI_DEVICE_Link+0xc>
 800599c:	8a82      	ldrh	r2, [r0, #20]
 800599e:	2a01      	cmp	r2, #1
 80059a0:	d1f0      	bne.n	8005984 <GUI_DEVICE_Link+0x40>
 80059a2:	461e      	mov	r6, r3
 80059a4:	e004      	b.n	80059b0 <GUI_DEVICE_Link+0x6c>
 80059a6:	68de      	ldr	r6, [r3, #12]
 80059a8:	6832      	ldr	r2, [r6, #0]
 80059aa:	428a      	cmp	r2, r1
 80059ac:	461e      	mov	r6, r3
 80059ae:	dbe9      	blt.n	8005984 <GUI_DEVICE_Link+0x40>
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f7      	bne.n	80059a6 <GUI_DEVICE_Link+0x62>
 80059b6:	4633      	mov	r3, r6
 80059b8:	e7e4      	b.n	8005984 <GUI_DEVICE_Link+0x40>
 80059ba:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80059be:	e7e5      	b.n	800598c <GUI_DEVICE_Link+0x48>
 80059c0:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80059c4:	4618      	mov	r0, r3
 80059c6:	e7c3      	b.n	8005950 <GUI_DEVICE_Link+0xc>
 80059c8:	1fffdaf0 	.word	0x1fffdaf0

080059cc <GUI_DEVICE_CreateAndLink>:
 80059cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d0:	1e1d      	subs	r5, r3, #0
 80059d2:	4607      	mov	r7, r0
 80059d4:	460e      	mov	r6, r1
 80059d6:	4690      	mov	r8, r2
 80059d8:	dc1c      	bgt.n	8005a14 <GUI_DEVICE_CreateAndLink+0x48>
 80059da:	201c      	movs	r0, #28
 80059dc:	f001 facc 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 80059e0:	4604      	mov	r4, r0
 80059e2:	b1b8      	cbz	r0, 8005a14 <GUI_DEVICE_CreateAndLink+0x48>
 80059e4:	b1d6      	cbz	r6, 8005a1c <GUI_DEVICE_CreateAndLink+0x50>
 80059e6:	6106      	str	r6, [r0, #16]
 80059e8:	2300      	movs	r3, #0
 80059ea:	61a5      	str	r5, [r4, #24]
 80059ec:	f8a4 8014 	strh.w	r8, [r4, #20]
 80059f0:	60e7      	str	r7, [r4, #12]
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	6063      	str	r3, [r4, #4]
 80059f6:	60a3      	str	r3, [r4, #8]
 80059f8:	4620      	mov	r0, r4
 80059fa:	f7ff ffa3 	bl	8005944 <GUI_DEVICE_Link>
 80059fe:	68e0      	ldr	r0, [r4, #12]
 8005a00:	6801      	ldr	r1, [r0, #0]
 8005a02:	b921      	cbnz	r1, 8005a0e <GUI_DEVICE_CreateAndLink+0x42>
 8005a04:	4a0b      	ldr	r2, [pc, #44]	; (8005a34 <GUI_DEVICE_CreateAndLink+0x68>)
 8005a06:	6813      	ldr	r3, [r2, #0]
 8005a08:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005a0c:	646c      	str	r4, [r5, #68]	; 0x44
 8005a0e:	4620      	mov	r0, r4
 8005a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a14:	2400      	movs	r4, #0
 8005a16:	4620      	mov	r0, r4
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <GUI_DEVICE_CreateAndLink+0x6c>)
 8005a1e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8005a22:	b90a      	cbnz	r2, 8005a28 <GUI_DEVICE_CreateAndLink+0x5c>
 8005a24:	e7e0      	b.n	80059e8 <GUI_DEVICE_CreateAndLink+0x1c>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6810      	ldr	r0, [r2, #0]
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1fb      	bne.n	8005a26 <GUI_DEVICE_CreateAndLink+0x5a>
 8005a2e:	6911      	ldr	r1, [r2, #16]
 8005a30:	6121      	str	r1, [r4, #16]
 8005a32:	e7d9      	b.n	80059e8 <GUI_DEVICE_CreateAndLink+0x1c>
 8005a34:	1fffc808 	.word	0x1fffc808
 8005a38:	1fffdaf0 	.word	0x1fffdaf0

08005a3c <_OnExit>:
 8005a3c:	f64c 00d8 	movw	r0, #51416	; 0xc8d8
 8005a40:	f6c1 70ff 	movt	r0, #8191	; 0x1fff
 8005a44:	b510      	push	{r4, lr}
 8005a46:	2400      	movs	r4, #0
 8005a48:	f840 4b04 	str.w	r4, [r0], #4
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	2258      	movs	r2, #88	; 0x58
 8005a50:	f7ff fd96 	bl	8005580 <GUI__memset>
 8005a54:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
 8005a58:	f6c1 70ff 	movt	r0, #8191	; 0x1fff
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	2204      	movs	r2, #4
 8005a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a64:	f7ff bd8c 	b.w	8005580 <GUI__memset>

08005a68 <GUI_SetDefaultFont>:
 8005a68:	f64c 0300 	movw	r3, #51200	; 0xc800
 8005a6c:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8005a70:	6058      	str	r0, [r3, #4]
 8005a72:	4770      	bx	lr

08005a74 <GUI_Clear>:
 8005a74:	2000      	movs	r0, #0
 8005a76:	b510      	push	{r4, lr}
 8005a78:	4601      	mov	r1, r0
 8005a7a:	f004 fb25 	bl	800a0c8 <GUI_GotoXY>
 8005a7e:	2004      	movs	r0, #4
 8005a80:	f003 faf2 	bl	8009068 <LCD_SetDrawMode>
 8005a84:	4604      	mov	r4, r0
 8005a86:	f24c 0001 	movw	r0, #49153	; 0xc001
 8005a8a:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005a8e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005a92:	4601      	mov	r1, r0
 8005a94:	4613      	mov	r3, r2
 8005a96:	f003 fb45 	bl	8009124 <LCD_FillRect>
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa0:	f003 bae2 	b.w	8009068 <LCD_SetDrawMode>

08005aa4 <GUI_Init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	4c24      	ldr	r4, [pc, #144]	; (8005b38 <GUI_Init+0x94>)
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	b963      	cbnz	r3, 8005ac6 <GUI_Init+0x22>
 8005aac:	2001      	movs	r0, #1
 8005aae:	6020      	str	r0, [r4, #0]
 8005ab0:	f7fd f96e 	bl	8002d90 <GUI_X_Config>
 8005ab4:	f7fd fa34 	bl	8002f20 <LCD_X_Config>
 8005ab8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005aba:	4a20      	ldr	r2, [pc, #128]	; (8005b3c <GUI_Init+0x98>)
 8005abc:	6621      	str	r1, [r4, #96]	; 0x60
 8005abe:	f104 055c 	add.w	r5, r4, #92	; 0x5c
 8005ac2:	65e2      	str	r2, [r4, #92]	; 0x5c
 8005ac4:	6665      	str	r5, [r4, #100]	; 0x64
 8005ac6:	4d1e      	ldr	r5, [pc, #120]	; (8005b40 <GUI_Init+0x9c>)
 8005ac8:	4f1e      	ldr	r7, [pc, #120]	; (8005b44 <GUI_Init+0xa0>)
 8005aca:	262e      	movs	r6, #46	; 0x2e
 8005acc:	703e      	strb	r6, [r7, #0]
 8005ace:	f7fd f971 	bl	8002db4 <GUI_X_Init>
 8005ad2:	68ab      	ldr	r3, [r5, #8]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <GUI_Init+0xa4>)
 8005ad6:	7c58      	ldrb	r0, [r3, #17]
 8005ad8:	491c      	ldr	r1, [pc, #112]	; (8005b4c <GUI_Init+0xa8>)
 8005ada:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005ade:	639b      	str	r3, [r3, #56]	; 0x38
 8005ae0:	68c2      	ldr	r2, [r0, #12]
 8005ae2:	641b      	str	r3, [r3, #64]	; 0x40
 8005ae4:	1d1f      	adds	r7, r3, #4
 8005ae6:	f103 0608 	add.w	r6, r3, #8
 8005aea:	63df      	str	r7, [r3, #60]	; 0x3c
 8005aec:	61a6      	str	r6, [r4, #24]
 8005aee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005af0:	4798      	blx	r3
 8005af2:	6869      	ldr	r1, [r5, #4]
 8005af4:	68aa      	ldr	r2, [r5, #8]
 8005af6:	6221      	str	r1, [r4, #32]
 8005af8:	4915      	ldr	r1, [pc, #84]	; (8005b50 <GUI_Init+0xac>)
 8005afa:	3208      	adds	r2, #8
 8005afc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005b00:	2000      	movs	r0, #0
 8005b02:	6521      	str	r1, [r4, #80]	; 0x50
 8005b04:	61a2      	str	r2, [r4, #24]
 8005b06:	2103      	movs	r1, #3
 8005b08:	2201      	movs	r2, #1
 8005b0a:	7722      	strb	r2, [r4, #28]
 8005b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b0e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b10:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8005b14:	f004 f95a 	bl	8009dcc <LCD_SetBkColor>
 8005b18:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005b1c:	f004 f960 	bl	8009de0 <LCD_SetColor>
 8005b20:	4c0c      	ldr	r4, [pc, #48]	; (8005b54 <GUI_Init+0xb0>)
 8005b22:	480d      	ldr	r0, [pc, #52]	; (8005b58 <GUI_Init+0xb4>)
 8005b24:	6004      	str	r4, [r0, #0]
 8005b26:	f004 f8a1 	bl	8009c6c <LCD_Init>
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	4601      	mov	r1, r0
 8005b30:	f004 fa80 	bl	800a034 <GUI_SetOrg>
 8005b34:	4620      	mov	r0, r4
 8005b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b38:	1fffc8d8 	.word	0x1fffc8d8
 8005b3c:	08005a3d 	.word	0x08005a3d
 8005b40:	1fffc800 	.word	0x1fffc800
 8005b44:	1fffdac5 	.word	0x1fffdac5
 8005b48:	1fffdaf0 	.word	0x1fffdaf0
 8005b4c:	1fffc8e4 	.word	0x1fffc8e4
 8005b50:	0800d09c 	.word	0x0800d09c
 8005b54:	0800e4e4 	.word	0x0800e4e4
 8005b58:	1fffdae8 	.word	0x1fffdae8

08005b5c <GUI__RegisterExit>:
 8005b5c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
 8005b60:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8005b64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b66:	6658      	str	r0, [r3, #100]	; 0x64
 8005b68:	6042      	str	r2, [r0, #4]
 8005b6a:	4770      	bx	lr

08005b6c <GUIPROP_DispChar>:
 8005b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b70:	4c3a      	ldr	r4, [pc, #232]	; (8005c5c <GUIPROP_DispChar+0xf0>)
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
 8005b78:	69d3      	ldr	r3, [r2, #28]
 8005b7a:	b089      	sub	sp, #36	; 0x24
 8005b7c:	b143      	cbz	r3, 8005b90 <GUIPROP_DispChar+0x24>
 8005b7e:	881a      	ldrh	r2, [r3, #0]
 8005b80:	4290      	cmp	r0, r2
 8005b82:	d302      	bcc.n	8005b8a <GUIPROP_DispChar+0x1e>
 8005b84:	8859      	ldrh	r1, [r3, #2]
 8005b86:	4281      	cmp	r1, r0
 8005b88:	d205      	bcs.n	8005b96 <GUIPROP_DispChar+0x2a>
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f6      	bne.n	8005b7e <GUIPROP_DispChar+0x12>
 8005b90:	b009      	add	sp, #36	; 0x24
 8005b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b96:	685f      	ldr	r7, [r3, #4]
 8005b98:	ebc2 0800 	rsb	r8, r2, r0
 8005b9c:	fa0f fa85 	sxth.w	sl, r5
 8005ba0:	eb07 05c8 	add.w	r5, r7, r8, lsl #3
 8005ba4:	4650      	mov	r0, sl
 8005ba6:	f895 b002 	ldrb.w	fp, [r5, #2]
 8005baa:	f003 fa5d 	bl	8009068 <LCD_SetDrawMode>
 8005bae:	6826      	ldr	r6, [r4, #0]
 8005bb0:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 8005bb4:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8005bb8:	f9b6 1024 	ldrsh.w	r1, [r6, #36]	; 0x24
 8005bbc:	f89e c01a 	ldrb.w	ip, [lr, #26]
 8005bc0:	f89e 3018 	ldrb.w	r3, [lr, #24]
 8005bc4:	4681      	mov	r9, r0
 8005bc6:	f9b6 0022 	ldrsh.w	r0, [r6, #34]	; 0x22
 8005bca:	f8cd c000 	str.w	ip, [sp]
 8005bce:	f89e e01b 	ldrb.w	lr, [lr, #27]
 8005bd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8005bd6:	f04f 0b01 	mov.w	fp, #1
 8005bda:	f8cd b008 	str.w	fp, [sp, #8]
 8005bde:	f8cd e004 	str.w	lr, [sp, #4]
 8005be2:	9306      	str	r3, [sp, #24]
 8005be4:	686b      	ldr	r3, [r5, #4]
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	6bb6      	ldr	r6, [r6, #56]	; 0x38
 8005bea:	9b06      	ldr	r3, [sp, #24]
 8005bec:	9605      	str	r6, [sp, #20]
 8005bee:	f003 fd41 	bl	8009674 <LCD_DrawBitmap>
 8005bf2:	6820      	ldr	r0, [r4, #0]
 8005bf4:	69c6      	ldr	r6, [r0, #28]
 8005bf6:	f896 b019 	ldrb.w	fp, [r6, #25]
 8005bfa:	7e32      	ldrb	r2, [r6, #24]
 8005bfc:	4593      	cmp	fp, r2
 8005bfe:	d921      	bls.n	8005c44 <GUIPROP_DispChar+0xd8>
 8005c00:	f1ba 0f02 	cmp.w	sl, #2
 8005c04:	7ef6      	ldrb	r6, [r6, #27]
 8005c06:	d01d      	beq.n	8005c44 <GUIPROP_DispChar+0xd8>
 8005c08:	9207      	str	r2, [sp, #28]
 8005c0a:	f004 fa6f 	bl	800a0ec <GUI_GetColor>
 8005c0e:	4682      	mov	sl, r0
 8005c10:	f004 fa64 	bl	800a0dc <GUI_GetBkColor>
 8005c14:	f7ff fdaa 	bl	800576c <GUI_SetColor>
 8005c18:	4910      	ldr	r1, [pc, #64]	; (8005c5c <GUIPROP_DispChar+0xf0>)
 8005c1a:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 8005c1e:	680b      	ldr	r3, [r1, #0]
 8005c20:	9907      	ldr	r1, [sp, #28]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8005c28:	7ed2      	ldrb	r2, [r2, #27]
 8005c2a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005c2e:	fb07 0202 	mla	r2, r7, r2, r0
 8005c32:	fb01 3106 	mla	r1, r1, r6, r3
 8005c36:	fb0b 3306 	mla	r3, fp, r6, r3
 8005c3a:	f003 fa73 	bl	8009124 <LCD_FillRect>
 8005c3e:	4650      	mov	r0, sl
 8005c40:	f7ff fd94 	bl	800576c <GUI_SetColor>
 8005c44:	4648      	mov	r0, r9
 8005c46:	f003 fa0f 	bl	8009068 <LCD_SetDrawMode>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	7868      	ldrb	r0, [r5, #1]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8005c52:	7e92      	ldrb	r2, [r2, #26]
 8005c54:	fb00 1002 	mla	r0, r0, r2, r1
 8005c58:	8458      	strh	r0, [r3, #34]	; 0x22
 8005c5a:	e799      	b.n	8005b90 <GUIPROP_DispChar+0x24>
 8005c5c:	1fffc808 	.word	0x1fffc808

08005c60 <GUIPROP_GetCharDistX>:
 8005c60:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <GUIPROP_GetCharDistX+0x44>)
 8005c62:	b470      	push	{r4, r5, r6}
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	69d5      	ldr	r5, [r2, #28]
 8005c68:	69eb      	ldr	r3, [r5, #28]
 8005c6a:	b143      	cbz	r3, 8005c7e <GUIPROP_GetCharDistX+0x1e>
 8005c6c:	881a      	ldrh	r2, [r3, #0]
 8005c6e:	4290      	cmp	r0, r2
 8005c70:	d302      	bcc.n	8005c78 <GUIPROP_GetCharDistX+0x18>
 8005c72:	885c      	ldrh	r4, [r3, #2]
 8005c74:	4284      	cmp	r4, r0
 8005c76:	d205      	bcs.n	8005c84 <GUIPROP_GetCharDistX+0x24>
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f6      	bne.n	8005c6c <GUIPROP_GetCharDistX+0xc>
 8005c7e:	4618      	mov	r0, r3
 8005c80:	bc70      	pop	{r4, r5, r6}
 8005c82:	4770      	bx	lr
 8005c84:	685e      	ldr	r6, [r3, #4]
 8005c86:	7eac      	ldrb	r4, [r5, #26]
 8005c88:	1a82      	subs	r2, r0, r2
 8005c8a:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8005c8e:	7843      	ldrb	r3, [r0, #1]
 8005c90:	fb13 f004 	smulbb	r0, r3, r4
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d0f3      	beq.n	8005c80 <GUIPROP_GetCharDistX+0x20>
 8005c98:	f816 2032 	ldrb.w	r2, [r6, r2, lsl #3]
 8005c9c:	fb14 f302 	smulbb	r3, r4, r2
 8005ca0:	600b      	str	r3, [r1, #0]
 8005ca2:	e7ed      	b.n	8005c80 <GUIPROP_GetCharDistX+0x20>
 8005ca4:	1fffc808 	.word	0x1fffc808

08005ca8 <GUIPROP_GetFontInfo>:
 8005ca8:	2301      	movs	r3, #1
 8005caa:	800b      	strh	r3, [r1, #0]
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop

08005cb0 <GUIPROP_IsInFont>:
 8005cb0:	69c0      	ldr	r0, [r0, #28]
 8005cb2:	b150      	cbz	r0, 8005cca <GUIPROP_IsInFont+0x1a>
 8005cb4:	8803      	ldrh	r3, [r0, #0]
 8005cb6:	428b      	cmp	r3, r1
 8005cb8:	d802      	bhi.n	8005cc0 <GUIPROP_IsInFont+0x10>
 8005cba:	8842      	ldrh	r2, [r0, #2]
 8005cbc:	428a      	cmp	r2, r1
 8005cbe:	d203      	bcs.n	8005cc8 <GUIPROP_IsInFont+0x18>
 8005cc0:	6880      	ldr	r0, [r0, #8]
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d1f6      	bne.n	8005cb4 <GUIPROP_IsInFont+0x4>
 8005cc6:	4770      	bx	lr
 8005cc8:	2001      	movs	r0, #1
 8005cca:	4770      	bx	lr

08005ccc <GUIMONO_DispChar>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8005e24 <GUIMONO_DispChar+0x158>
 8005cd4:	f8db 3000 	ldr.w	r3, [fp]
 8005cd8:	69d9      	ldr	r1, [r3, #28]
 8005cda:	f8b3 c022 	ldrh.w	ip, [r3, #34]	; 0x22
 8005cde:	69cc      	ldr	r4, [r1, #28]
 8005ce0:	8c9f      	ldrh	r7, [r3, #36]	; 0x24
 8005ce2:	89a2      	ldrh	r2, [r4, #12]
 8005ce4:	4282      	cmp	r2, r0
 8005ce6:	b08d      	sub	sp, #52	; 0x34
 8005ce8:	f200 8085 	bhi.w	8005df6 <GUIMONO_DispChar+0x12a>
 8005cec:	89e5      	ldrh	r5, [r4, #14]
 8005cee:	4285      	cmp	r5, r0
 8005cf0:	f0c0 8081 	bcc.w	8005df6 <GUIMONO_DispChar+0x12a>
 8005cf4:	1a82      	subs	r2, r0, r2
 8005cf6:	6826      	ldr	r6, [r4, #0]
 8005cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfc:	900a      	str	r0, [sp, #40]	; 0x28
 8005cfe:	1c50      	adds	r0, r2, #1
 8005d00:	d071      	beq.n	8005de6 <GUIMONO_DispChar+0x11a>
 8005d02:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 8005d06:	7e0d      	ldrb	r5, [r1, #24]
 8005d08:	7ca3      	ldrb	r3, [r4, #18]
 8005d0a:	f894 8010 	ldrb.w	r8, [r4, #16]
 8005d0e:	9207      	str	r2, [sp, #28]
 8005d10:	fa0f f18a 	sxth.w	r1, sl
 8005d14:	fb15 f303 	smulbb	r3, r5, r3
 8005d18:	4608      	mov	r0, r1
 8005d1a:	fa0f f98c 	sxth.w	r9, ip
 8005d1e:	9109      	str	r1, [sp, #36]	; 0x24
 8005d20:	9308      	str	r3, [sp, #32]
 8005d22:	f003 f9a1 	bl	8009068 <LCD_SetDrawMode>
 8005d26:	f8db 3000 	ldr.w	r3, [fp]
 8005d2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	7e90      	ldrb	r0, [r2, #26]
 8005d30:	9000      	str	r0, [sp, #0]
 8005d32:	7ed1      	ldrb	r1, [r2, #27]
 8005d34:	9808      	ldr	r0, [sp, #32]
 8005d36:	9101      	str	r1, [sp, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	9202      	str	r2, [sp, #8]
 8005d3c:	9a07      	ldr	r2, [sp, #28]
 8005d3e:	7ca1      	ldrb	r1, [r4, #18]
 8005d40:	fb00 6202 	mla	r2, r0, r2, r6
 8005d44:	9103      	str	r1, [sp, #12]
 8005d46:	9204      	str	r2, [sp, #16]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	b23f      	sxth	r7, r7
 8005d4c:	9305      	str	r3, [sp, #20]
 8005d4e:	4639      	mov	r1, r7
 8005d50:	4648      	mov	r0, r9
 8005d52:	4642      	mov	r2, r8
 8005d54:	462b      	mov	r3, r5
 8005d56:	f003 fc8d 	bl	8009674 <LCD_DrawBitmap>
 8005d5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d5c:	3101      	adds	r1, #1
 8005d5e:	d01c      	beq.n	8005d9a <GUIMONO_DispChar+0xce>
 8005d60:	f04a 0002 	orr.w	r0, sl, #2
 8005d64:	b200      	sxth	r0, r0
 8005d66:	f003 f97f 	bl	8009068 <LCD_SetDrawMode>
 8005d6a:	4a2e      	ldr	r2, [pc, #184]	; (8005e24 <GUIMONO_DispChar+0x158>)
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	69d8      	ldr	r0, [r3, #28]
 8005d70:	7e81      	ldrb	r1, [r0, #26]
 8005d72:	9100      	str	r1, [sp, #0]
 8005d74:	7ec2      	ldrb	r2, [r0, #27]
 8005d76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d78:	9201      	str	r2, [sp, #4]
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	9002      	str	r0, [sp, #8]
 8005d7e:	9808      	ldr	r0, [sp, #32]
 8005d80:	7ca2      	ldrb	r2, [r4, #18]
 8005d82:	fb00 6601 	mla	r6, r0, r1, r6
 8005d86:	9203      	str	r2, [sp, #12]
 8005d88:	9604      	str	r6, [sp, #16]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	4648      	mov	r0, r9
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	4639      	mov	r1, r7
 8005d92:	4642      	mov	r2, r8
 8005d94:	462b      	mov	r3, r5
 8005d96:	f003 fc6d 	bl	8009674 <LCD_DrawBitmap>
 8005d9a:	f8db 2000 	ldr.w	r2, [fp]
 8005d9e:	69d1      	ldr	r1, [r2, #28]
 8005da0:	7e48      	ldrb	r0, [r1, #25]
 8005da2:	7e0b      	ldrb	r3, [r1, #24]
 8005da4:	4298      	cmp	r0, r3
 8005da6:	d916      	bls.n	8005dd6 <GUIMONO_DispChar+0x10a>
 8005da8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005daa:	2a02      	cmp	r2, #2
 8005dac:	d013      	beq.n	8005dd6 <GUIMONO_DispChar+0x10a>
 8005dae:	f08a 0504 	eor.w	r5, sl, #4
 8005db2:	b228      	sxth	r0, r5
 8005db4:	f003 f958 	bl	8009068 <LCD_SetDrawMode>
 8005db8:	491a      	ldr	r1, [pc, #104]	; (8005e24 <GUIMONO_DispChar+0x158>)
 8005dba:	6808      	ldr	r0, [r1, #0]
 8005dbc:	69c3      	ldr	r3, [r0, #28]
 8005dbe:	7e1d      	ldrb	r5, [r3, #24]
 8005dc0:	7ed9      	ldrb	r1, [r3, #27]
 8005dc2:	7e9a      	ldrb	r2, [r3, #26]
 8005dc4:	7e5b      	ldrb	r3, [r3, #25]
 8005dc6:	4648      	mov	r0, r9
 8005dc8:	fb05 7101 	mla	r1, r5, r1, r7
 8005dcc:	fb02 9208 	mla	r2, r2, r8, r9
 8005dd0:	19db      	adds	r3, r3, r7
 8005dd2:	f003 f9a7 	bl	8009124 <LCD_FillRect>
 8005dd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005dd8:	b2c0      	uxtb	r0, r0
 8005dda:	f003 f945 	bl	8009068 <LCD_SetDrawMode>
 8005dde:	f8db 3000 	ldr.w	r3, [fp]
 8005de2:	f8b3 c022 	ldrh.w	ip, [r3, #34]	; 0x22
 8005de6:	7c61      	ldrb	r1, [r4, #17]
 8005de8:	eb0c 0901 	add.w	r9, ip, r1
 8005dec:	f8a3 9022 	strh.w	r9, [r3, #34]	; 0x22
 8005df0:	b00d      	add	sp, #52	; 0x34
 8005df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df6:	68a5      	ldr	r5, [r4, #8]
 8005df8:	6866      	ldr	r6, [r4, #4]
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	d0f3      	beq.n	8005de6 <GUIMONO_DispChar+0x11a>
 8005dfe:	882a      	ldrh	r2, [r5, #0]
 8005e00:	4290      	cmp	r0, r2
 8005e02:	d3f0      	bcc.n	8005de6 <GUIMONO_DispChar+0x11a>
 8005e04:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8005e08:	4580      	cmp	r8, r0
 8005e0a:	d3ec      	bcc.n	8005de6 <GUIMONO_DispChar+0x11a>
 8005e0c:	686d      	ldr	r5, [r5, #4]
 8005e0e:	1a80      	subs	r0, r0, r2
 8005e10:	b282      	uxth	r2, r0
 8005e12:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8005e16:	f935 2022 	ldrsh.w	r2, [r5, r2, lsl #2]
 8005e1a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8005e1e:	900a      	str	r0, [sp, #40]	; 0x28
 8005e20:	e76d      	b.n	8005cfe <GUIMONO_DispChar+0x32>
 8005e22:	bf00      	nop
 8005e24:	1fffc808 	.word	0x1fffc808

08005e28 <GUIMONO_GetCharDistX>:
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <GUIMONO_GetCharDistX+0x14>)
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	69c2      	ldr	r2, [r0, #28]
 8005e2e:	69d3      	ldr	r3, [r2, #28]
 8005e30:	b109      	cbz	r1, 8005e36 <GUIMONO_GetCharDistX+0xe>
 8005e32:	7c18      	ldrb	r0, [r3, #16]
 8005e34:	6008      	str	r0, [r1, #0]
 8005e36:	7c58      	ldrb	r0, [r3, #17]
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	1fffc808 	.word	0x1fffc808

08005e40 <GUIMONO_GetFontInfo>:
 8005e40:	2302      	movs	r3, #2
 8005e42:	800b      	strh	r3, [r1, #0]
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop

08005e48 <GUIMONO_IsInFont>:
 8005e48:	69c3      	ldr	r3, [r0, #28]
 8005e4a:	899a      	ldrh	r2, [r3, #12]
 8005e4c:	428a      	cmp	r2, r1
 8005e4e:	d802      	bhi.n	8005e56 <GUIMONO_IsInFont+0xe>
 8005e50:	89d8      	ldrh	r0, [r3, #14]
 8005e52:	4288      	cmp	r0, r1
 8005e54:	d20d      	bcs.n	8005e72 <GUIMONO_IsInFont+0x2a>
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	b16b      	cbz	r3, 8005e76 <GUIMONO_IsInFont+0x2e>
 8005e5a:	881a      	ldrh	r2, [r3, #0]
 8005e5c:	4291      	cmp	r1, r2
 8005e5e:	d30a      	bcc.n	8005e76 <GUIMONO_IsInFont+0x2e>
 8005e60:	8858      	ldrh	r0, [r3, #2]
 8005e62:	4288      	cmp	r0, r1
 8005e64:	d307      	bcc.n	8005e76 <GUIMONO_IsInFont+0x2e>
 8005e66:	1a89      	subs	r1, r1, r2
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f933 2021 	ldrsh.w	r2, [r3, r1, lsl #2]
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	db01      	blt.n	8005e76 <GUIMONO_IsInFont+0x2e>
 8005e72:	2001      	movs	r0, #1
 8005e74:	4770      	bx	lr
 8005e76:	2000      	movs	r0, #0
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop

08005e7c <_Log2VisBuffered>:
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <_DispLine>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	ab02      	add	r3, sp, #8
 8005e86:	4c1a      	ldr	r4, [pc, #104]	; (8005ef0 <_DispLine+0x70>)
 8005e88:	f843 1d08 	str.w	r1, [r3, #-8]!
 8005e8c:	4919      	ldr	r1, [pc, #100]	; (8005ef4 <_DispLine+0x74>)
 8005e8e:	9001      	str	r0, [sp, #4]
 8005e90:	680d      	ldr	r5, [r1, #0]
 8005e92:	4669      	mov	r1, sp
 8005e94:	4616      	mov	r6, r2
 8005e96:	47a8      	blx	r5
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	9001      	str	r0, [sp, #4]
 8005e9c:	6950      	ldr	r0, [r2, #20]
 8005e9e:	b118      	cbz	r0, 8005ea8 <_DispLine+0x28>
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	f004 f8f3 	bl	800a08c <GUI_RectsIntersect>
 8005ea6:	b168      	cbz	r0, 8005ec4 <_DispLine+0x44>
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f004 f85f 	bl	8009f6c <GUI__ManageCache>
 8005eae:	6820      	ldr	r0, [r4, #0]
 8005eb0:	69c3      	ldr	r3, [r0, #28]
 8005eb2:	6959      	ldr	r1, [r3, #20]
 8005eb4:	b141      	cbz	r1, 8005ec8 <_DispLine+0x48>
 8005eb6:	688a      	ldr	r2, [r1, #8]
 8005eb8:	9801      	ldr	r0, [sp, #4]
 8005eba:	9900      	ldr	r1, [sp, #0]
 8005ebc:	4790      	blx	r2
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f004 f854 	bl	8009f6c <GUI__ManageCache>
 8005ec4:	b002      	add	sp, #8
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	4d0b      	ldr	r5, [pc, #44]	; (8005ef8 <_DispLine+0x78>)
 8005eca:	9a00      	ldr	r2, [sp, #0]
 8005ecc:	1e53      	subs	r3, r2, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	a801      	add	r0, sp, #4
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	dbf3      	blt.n	8005ebe <_DispLine+0x3e>
 8005ed6:	f004 f85d 	bl	8009f94 <GUI_UC__GetCharCodeInc>
 8005eda:	6821      	ldr	r1, [r4, #0]
 8005edc:	69ca      	ldr	r2, [r1, #28]
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	4798      	blx	r3
 8005ee4:	6829      	ldr	r1, [r5, #0]
 8005ee6:	2900      	cmp	r1, #0
 8005ee8:	d0ef      	beq.n	8005eca <_DispLine+0x4a>
 8005eea:	4630      	mov	r0, r6
 8005eec:	4788      	blx	r1
 8005eee:	e7ec      	b.n	8005eca <_DispLine+0x4a>
 8005ef0:	1fffc808 	.word	0x1fffc808
 8005ef4:	1fffc80c 	.word	0x1fffc80c
 8005ef8:	1fffdae0 	.word	0x1fffdae0

08005efc <GUI__GetLineNumChars>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	460d      	mov	r5, r1
 8005f02:	9001      	str	r0, [sp, #4]
 8005f04:	4604      	mov	r4, r0
 8005f06:	b140      	cbz	r0, 8005f1a <GUI__GetLineNumChars+0x1e>
 8005f08:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <GUI__GetLineNumChars+0x88>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	69d4      	ldr	r4, [r2, #28]
 8005f0e:	6963      	ldr	r3, [r4, #20]
 8005f10:	b133      	cbz	r3, 8005f20 <GUI__GetLineNumChars+0x24>
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	b122      	cbz	r2, 8005f20 <GUI__GetLineNumChars+0x24>
 8005f16:	4790      	blx	r2
 8005f18:	4604      	mov	r4, r0
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	2400      	movs	r4, #0
 8005f22:	2d00      	cmp	r5, #0
 8005f24:	ddf9      	ble.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f26:	1e69      	subs	r1, r5, #1
 8005f28:	a801      	add	r0, sp, #4
 8005f2a:	f001 0601 	and.w	r6, r1, #1
 8005f2e:	f004 f831 	bl	8009f94 <GUI_UC__GetCharCodeInc>
 8005f32:	2400      	movs	r4, #0
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0f0      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f38:	280a      	cmp	r0, #10
 8005f3a:	d0ee      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f3c:	2401      	movs	r4, #1
 8005f3e:	42ac      	cmp	r4, r5
 8005f40:	d0eb      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f42:	b1b6      	cbz	r6, 8005f72 <GUI__GetLineNumChars+0x76>
 8005f44:	a801      	add	r0, sp, #4
 8005f46:	f004 f825 	bl	8009f94 <GUI_UC__GetCharCodeInc>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d0e5      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f4e:	280a      	cmp	r0, #10
 8005f50:	d0e3      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f52:	2402      	movs	r4, #2
 8005f54:	42ac      	cmp	r4, r5
 8005f56:	d10c      	bne.n	8005f72 <GUI__GetLineNumChars+0x76>
 8005f58:	e7df      	b.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f5a:	2b0a      	cmp	r3, #10
 8005f5c:	d0dd      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f5e:	f004 f819 	bl	8009f94 <GUI_UC__GetCharCodeInc>
 8005f62:	3401      	adds	r4, #1
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d0d8      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f68:	280a      	cmp	r0, #10
 8005f6a:	d0d6      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f6c:	3401      	adds	r4, #1
 8005f6e:	42ac      	cmp	r4, r5
 8005f70:	d0d3      	beq.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f72:	a801      	add	r0, sp, #4
 8005f74:	f004 f80e 	bl	8009f94 <GUI_UC__GetCharCodeInc>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	a801      	add	r0, sp, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ec      	bne.n	8005f5a <GUI__GetLineNumChars+0x5e>
 8005f80:	e7cb      	b.n	8005f1a <GUI__GetLineNumChars+0x1e>
 8005f82:	bf00      	nop
 8005f84:	1fffc808 	.word	0x1fffc808

08005f88 <GUI__GetLineDistX>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	ab04      	add	r3, sp, #16
 8005f8e:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <GUI__GetLineDistX+0x78>)
 8005f90:	f843 1d10 	str.w	r1, [r3, #-16]!
 8005f94:	6814      	ldr	r4, [r2, #0]
 8005f96:	9001      	str	r0, [sp, #4]
 8005f98:	4669      	mov	r1, sp
 8005f9a:	47a0      	blx	r4
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	9001      	str	r0, [sp, #4]
 8005fa0:	b140      	cbz	r0, 8005fb4 <GUI__GetLineDistX+0x2c>
 8005fa2:	4918      	ldr	r1, [pc, #96]	; (8006004 <GUI__GetLineDistX+0x7c>)
 8005fa4:	680b      	ldr	r3, [r1, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	6951      	ldr	r1, [r2, #20]
 8005faa:	b129      	cbz	r1, 8005fb8 <GUI__GetLineDistX+0x30>
 8005fac:	680b      	ldr	r3, [r1, #0]
 8005fae:	b11b      	cbz	r3, 8005fb8 <GUI__GetLineDistX+0x30>
 8005fb0:	9900      	ldr	r1, [sp, #0]
 8005fb2:	4798      	blx	r3
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	9800      	ldr	r0, [sp, #0]
 8005fba:	1e45      	subs	r5, r0, #1
 8005fbc:	2400      	movs	r4, #0
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	9500      	str	r5, [sp, #0]
 8005fc2:	db19      	blt.n	8005ff8 <GUI__GetLineDistX+0x70>
 8005fc4:	a801      	add	r0, sp, #4
 8005fc6:	f003 ffe5 	bl	8009f94 <GUI_UC__GetCharCodeInc>
 8005fca:	4605      	mov	r5, r0
 8005fcc:	f000 f85c 	bl	8006088 <GUI_GetCharDistX>
 8005fd0:	9e00      	ldr	r6, [sp, #0]
 8005fd2:	1e72      	subs	r2, r6, #1
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	9200      	str	r2, [sp, #0]
 8005fd8:	4404      	add	r4, r0
 8005fda:	daf3      	bge.n	8005fc4 <GUI__GetLineDistX+0x3c>
 8005fdc:	a904      	add	r1, sp, #16
 8005fde:	2600      	movs	r6, #0
 8005fe0:	f841 6d04 	str.w	r6, [r1, #-4]!
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f000 f85b 	bl	80060a0 <GUI_GetCharDistXEx>
 8005fea:	9903      	ldr	r1, [sp, #12]
 8005fec:	4288      	cmp	r0, r1
 8005fee:	bfb8      	it	lt
 8005ff0:	ebc0 0601 	rsblt	r6, r0, r1
 8005ff4:	19a0      	adds	r0, r4, r6
 8005ff6:	e7dd      	b.n	8005fb4 <GUI__GetLineDistX+0x2c>
 8005ff8:	2500      	movs	r5, #0
 8005ffa:	462c      	mov	r4, r5
 8005ffc:	e7ee      	b.n	8005fdc <GUI__GetLineDistX+0x54>
 8005ffe:	bf00      	nop
 8006000:	1fffc80c 	.word	0x1fffc80c
 8006004:	1fffc808 	.word	0x1fffc808

08006008 <GUI__DispLine>:
 8006008:	b530      	push	{r4, r5, lr}
 800600a:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <GUI__DispLine+0x38>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	b083      	sub	sp, #12
 8006010:	4605      	mov	r5, r0
 8006012:	460c      	mov	r4, r1
 8006014:	b123      	cbz	r3, 8006020 <GUI__DispLine+0x18>
 8006016:	466a      	mov	r2, sp
 8006018:	f7ff ff32 	bl	8005e80 <_DispLine>
 800601c:	b003      	add	sp, #12
 800601e:	bd30      	pop	{r4, r5, pc}
 8006020:	6810      	ldr	r0, [r2, #0]
 8006022:	6851      	ldr	r1, [r2, #4]
 8006024:	466a      	mov	r2, sp
 8006026:	c203      	stmia	r2!, {r0, r1}
 8006028:	4806      	ldr	r0, [pc, #24]	; (8006044 <GUI__DispLine+0x3c>)
 800602a:	f8bd 3000 	ldrh.w	r3, [sp]
 800602e:	6801      	ldr	r1, [r0, #0]
 8006030:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8006034:	844b      	strh	r3, [r1, #34]	; 0x22
 8006036:	848a      	strh	r2, [r1, #36]	; 0x24
 8006038:	4628      	mov	r0, r5
 800603a:	4621      	mov	r1, r4
 800603c:	e7eb      	b.n	8006016 <GUI__DispLine+0xe>
 800603e:	bf00      	nop
 8006040:	1fffdac8 	.word	0x1fffdac8
 8006044:	1fffc808 	.word	0x1fffc808

08006048 <GUI_GetYAdjust>:
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <GUI_GetYAdjust+0x2c>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	8d90      	ldrh	r0, [r2, #44]	; 0x2c
 800604e:	f000 010c 	and.w	r1, r0, #12
 8006052:	2908      	cmp	r1, #8
 8006054:	d005      	beq.n	8006062 <GUI_GetYAdjust+0x1a>
 8006056:	290c      	cmp	r1, #12
 8006058:	d003      	beq.n	8006062 <GUI_GetYAdjust+0x1a>
 800605a:	2904      	cmp	r1, #4
 800605c:	d005      	beq.n	800606a <GUI_GetYAdjust+0x22>
 800605e:	2000      	movs	r0, #0
 8006060:	4770      	bx	lr
 8006062:	69d0      	ldr	r0, [r2, #28]
 8006064:	7e01      	ldrb	r1, [r0, #24]
 8006066:	0848      	lsrs	r0, r1, #1
 8006068:	4770      	bx	lr
 800606a:	69d3      	ldr	r3, [r2, #28]
 800606c:	7e1a      	ldrb	r2, [r3, #24]
 800606e:	1e50      	subs	r0, r2, #1
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	1fffc808 	.word	0x1fffc808

08006078 <GUI_GetFontDistY>:
 8006078:	f64c 0308 	movw	r3, #51208	; 0xc808
 800607c:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	69c1      	ldr	r1, [r0, #28]
 8006084:	7e48      	ldrb	r0, [r1, #25]
 8006086:	4770      	bx	lr

08006088 <GUI_GetCharDistX>:
 8006088:	b508      	push	{r3, lr}
 800608a:	f64c 0308 	movw	r3, #51208	; 0xc808
 800608e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8006092:	2100      	movs	r1, #0
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	69d3      	ldr	r3, [r2, #28]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	4790      	blx	r2
 800609c:	bd08      	pop	{r3, pc}
 800609e:	bf00      	nop

080060a0 <GUI_GetCharDistXEx>:
 80060a0:	b508      	push	{r3, lr}
 80060a2:	f64c 0308 	movw	r3, #51208	; 0xc808
 80060a6:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	69d3      	ldr	r3, [r2, #28]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	4790      	blx	r2
 80060b2:	bd08      	pop	{r3, pc}

080060b4 <_OnExit>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	f64d 24fc 	movw	r4, #56060	; 0xdafc
 80060ba:	2500      	movs	r5, #0
 80060bc:	f6c1 74ff 	movt	r4, #8191	; 0x1fff
 80060c0:	2280      	movs	r2, #128	; 0x80
 80060c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80060c6:	4629      	mov	r1, r5
 80060c8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 80060cc:	f7ff fa58 	bl	8005580 <GUI__memset>
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	22c0      	movs	r2, #192	; 0xc0
 80060d6:	f7ff fa53 	bl	8005580 <GUI__memset>
 80060da:	f64c 1040 	movw	r0, #51520	; 0xc940
 80060de:	f6c1 70ff 	movt	r0, #8191	; 0x1fff
 80060e2:	4629      	mov	r1, r5
 80060e4:	220c      	movs	r2, #12
 80060e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ea:	f7ff ba49 	b.w	8005580 <GUI__memset>
 80060ee:	bf00      	nop

080060f0 <_AddFreeMemory>:
 80060f0:	4bb3      	ldr	r3, [pc, #716]	; (80063c0 <_AddFreeMemory+0x2d0>)
 80060f2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80060f6:	68dc      	ldr	r4, [r3, #12]
 80060f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fa:	1e66      	subs	r6, r4, #1
 80060fc:	1996      	adds	r6, r2, r6
 80060fe:	180c      	adds	r4, r1, r0
 8006100:	42a6      	cmp	r6, r4
 8006102:	460d      	mov	r5, r1
 8006104:	d303      	bcc.n	800610e <_AddFreeMemory+0x1e>
 8006106:	580e      	ldr	r6, [r1, r0]
 8006108:	2e00      	cmp	r6, #0
 800610a:	f000 80d4 	beq.w	80062b6 <_AddFreeMemory+0x1c6>
 800610e:	428a      	cmp	r2, r1
 8006110:	d205      	bcs.n	800611e <_AddFreeMemory+0x2e>
 8006112:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006116:	1a8c      	subs	r4, r1, r2
 8006118:	6826      	ldr	r6, [r4, #0]
 800611a:	2e00      	cmp	r6, #0
 800611c:	d070      	beq.n	8006200 <_AddFreeMemory+0x110>
 800611e:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8006122:	4ea7      	ldr	r6, [pc, #668]	; (80063c0 <_AddFreeMemory+0x2d0>)
 8006124:	42a0      	cmp	r0, r4
 8006126:	f080 8115 	bcs.w	8006354 <_AddFreeMemory+0x264>
 800612a:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 800612e:	4290      	cmp	r0, r2
 8006130:	f080 8112 	bcs.w	8006358 <_AddFreeMemory+0x268>
 8006134:	f8d6 40a8 	ldr.w	r4, [r6, #168]	; 0xa8
 8006138:	42a0      	cmp	r0, r4
 800613a:	f080 810f 	bcs.w	800635c <_AddFreeMemory+0x26c>
 800613e:	f8d6 20a0 	ldr.w	r2, [r6, #160]	; 0xa0
 8006142:	4290      	cmp	r0, r2
 8006144:	f080 810c 	bcs.w	8006360 <_AddFreeMemory+0x270>
 8006148:	f8d6 4098 	ldr.w	r4, [r6, #152]	; 0x98
 800614c:	42a0      	cmp	r0, r4
 800614e:	f080 8109 	bcs.w	8006364 <_AddFreeMemory+0x274>
 8006152:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006156:	4290      	cmp	r0, r2
 8006158:	f080 8106 	bcs.w	8006368 <_AddFreeMemory+0x278>
 800615c:	f8d6 4088 	ldr.w	r4, [r6, #136]	; 0x88
 8006160:	42a0      	cmp	r0, r4
 8006162:	f080 8103 	bcs.w	800636c <_AddFreeMemory+0x27c>
 8006166:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 800616a:	4290      	cmp	r0, r2
 800616c:	f080 8100 	bcs.w	8006370 <_AddFreeMemory+0x280>
 8006170:	6fb4      	ldr	r4, [r6, #120]	; 0x78
 8006172:	42a0      	cmp	r0, r4
 8006174:	f080 80fe 	bcs.w	8006374 <_AddFreeMemory+0x284>
 8006178:	6f36      	ldr	r6, [r6, #112]	; 0x70
 800617a:	42b0      	cmp	r0, r6
 800617c:	f080 8107 	bcs.w	800638e <_AddFreeMemory+0x29e>
 8006180:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8006182:	4a8f      	ldr	r2, [pc, #572]	; (80063c0 <_AddFreeMemory+0x2d0>)
 8006184:	42a0      	cmp	r0, r4
 8006186:	f080 8104 	bcs.w	8006392 <_AddFreeMemory+0x2a2>
 800618a:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800618c:	42b0      	cmp	r0, r6
 800618e:	f080 8102 	bcs.w	8006396 <_AddFreeMemory+0x2a6>
 8006192:	6d94      	ldr	r4, [r2, #88]	; 0x58
 8006194:	42a0      	cmp	r0, r4
 8006196:	f080 8100 	bcs.w	800639a <_AddFreeMemory+0x2aa>
 800619a:	6d16      	ldr	r6, [r2, #80]	; 0x50
 800619c:	42b0      	cmp	r0, r6
 800619e:	f080 80fe 	bcs.w	800639e <_AddFreeMemory+0x2ae>
 80061a2:	6c94      	ldr	r4, [r2, #72]	; 0x48
 80061a4:	42a0      	cmp	r0, r4
 80061a6:	f080 80fc 	bcs.w	80063a2 <_AddFreeMemory+0x2b2>
 80061aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061ac:	4290      	cmp	r0, r2
 80061ae:	bf34      	ite	cc
 80061b0:	f04f 34ff 	movcc.w	r4, #4294967295
 80061b4:	2400      	movcs	r4, #0
 80061b6:	3408      	adds	r4, #8
 80061b8:	eb03 06c4 	add.w	r6, r3, r4, lsl #3
 80061bc:	182d      	adds	r5, r5, r0
 80061be:	6872      	ldr	r2, [r6, #4]
 80061c0:	6048      	str	r0, [r1, #4]
 80061c2:	2600      	movs	r6, #0
 80061c4:	600e      	str	r6, [r1, #0]
 80061c6:	608a      	str	r2, [r1, #8]
 80061c8:	6109      	str	r1, [r1, #16]
 80061ca:	f101 0608 	add.w	r6, r1, #8
 80061ce:	f845 0c04 	str.w	r0, [r5, #-4]
 80061d2:	b102      	cbz	r2, 80061d6 <_AddFreeMemory+0xe6>
 80061d4:	6056      	str	r6, [r2, #4]
 80061d6:	2500      	movs	r5, #0
 80061d8:	60cd      	str	r5, [r1, #12]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 80061e0:	4977      	ldr	r1, [pc, #476]	; (80063c0 <_AddFreeMemory+0x2d0>)
 80061e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80061e6:	1882      	adds	r2, r0, r2
 80061e8:	6066      	str	r6, [r4, #4]
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	b92d      	cbnz	r5, 80061fa <_AddFreeMemory+0x10a>
 80061ee:	68cc      	ldr	r4, [r1, #12]
 80061f0:	688b      	ldr	r3, [r1, #8]
 80061f2:	1aa2      	subs	r2, r4, r2
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bf88      	it	hi
 80061f8:	608a      	strhi	r2, [r1, #8]
 80061fa:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80061fe:	4770      	bx	lr
 8006200:	6862      	ldr	r2, [r4, #4]
 8006202:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8006206:	496e      	ldr	r1, [pc, #440]	; (80063c0 <_AddFreeMemory+0x2d0>)
 8006208:	42aa      	cmp	r2, r5
 800620a:	4410      	add	r0, r2
 800620c:	f080 80cb 	bcs.w	80063a6 <_AddFreeMemory+0x2b6>
 8006210:	f8d1 70b0 	ldr.w	r7, [r1, #176]	; 0xb0
 8006214:	42ba      	cmp	r2, r7
 8006216:	f080 80ce 	bcs.w	80063b6 <_AddFreeMemory+0x2c6>
 800621a:	f8d1 60a8 	ldr.w	r6, [r1, #168]	; 0xa8
 800621e:	42b2      	cmp	r2, r6
 8006220:	f080 80d5 	bcs.w	80063ce <_AddFreeMemory+0x2de>
 8006224:	f8d1 50a0 	ldr.w	r5, [r1, #160]	; 0xa0
 8006228:	42aa      	cmp	r2, r5
 800622a:	f080 80ce 	bcs.w	80063ca <_AddFreeMemory+0x2da>
 800622e:	f8d1 7098 	ldr.w	r7, [r1, #152]	; 0x98
 8006232:	42ba      	cmp	r2, r7
 8006234:	f080 80cf 	bcs.w	80063d6 <_AddFreeMemory+0x2e6>
 8006238:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 800623c:	42b2      	cmp	r2, r6
 800623e:	f080 80c8 	bcs.w	80063d2 <_AddFreeMemory+0x2e2>
 8006242:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 8006246:	42aa      	cmp	r2, r5
 8006248:	f080 80cb 	bcs.w	80063e2 <_AddFreeMemory+0x2f2>
 800624c:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 8006250:	428a      	cmp	r2, r1
 8006252:	f080 80c4 	bcs.w	80063de <_AddFreeMemory+0x2ee>
 8006256:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8006258:	4e59      	ldr	r6, [pc, #356]	; (80063c0 <_AddFreeMemory+0x2d0>)
 800625a:	42ba      	cmp	r2, r7
 800625c:	f080 80bd 	bcs.w	80063da <_AddFreeMemory+0x2ea>
 8006260:	6f35      	ldr	r5, [r6, #112]	; 0x70
 8006262:	42aa      	cmp	r2, r5
 8006264:	f080 80d7 	bcs.w	8006416 <_AddFreeMemory+0x326>
 8006268:	6eb1      	ldr	r1, [r6, #104]	; 0x68
 800626a:	428a      	cmp	r2, r1
 800626c:	f080 80e1 	bcs.w	8006432 <_AddFreeMemory+0x342>
 8006270:	6e37      	ldr	r7, [r6, #96]	; 0x60
 8006272:	42ba      	cmp	r2, r7
 8006274:	f080 80db 	bcs.w	800642e <_AddFreeMemory+0x33e>
 8006278:	6db5      	ldr	r5, [r6, #88]	; 0x58
 800627a:	42aa      	cmp	r2, r5
 800627c:	f080 80d5 	bcs.w	800642a <_AddFreeMemory+0x33a>
 8006280:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8006282:	428a      	cmp	r2, r1
 8006284:	f080 80cf 	bcs.w	8006426 <_AddFreeMemory+0x336>
 8006288:	6cb7      	ldr	r7, [r6, #72]	; 0x48
 800628a:	42ba      	cmp	r2, r7
 800628c:	f080 80d6 	bcs.w	800643c <_AddFreeMemory+0x34c>
 8006290:	6c36      	ldr	r6, [r6, #64]	; 0x40
 8006292:	42b2      	cmp	r2, r6
 8006294:	bf34      	ite	cc
 8006296:	f04f 37ff 	movcc.w	r7, #4294967295
 800629a:	2700      	movcs	r7, #0
 800629c:	681d      	ldr	r5, [r3, #0]
 800629e:	68a1      	ldr	r1, [r4, #8]
 80062a0:	68e6      	ldr	r6, [r4, #12]
 80062a2:	1aaa      	subs	r2, r5, r2
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	b101      	cbz	r1, 80062aa <_AddFreeMemory+0x1ba>
 80062a8:	604e      	str	r6, [r1, #4]
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	d064      	beq.n	8006378 <_AddFreeMemory+0x288>
 80062ae:	6031      	str	r1, [r6, #0]
 80062b0:	4625      	mov	r5, r4
 80062b2:	4621      	mov	r1, r4
 80062b4:	e733      	b.n	800611e <_AddFreeMemory+0x2e>
 80062b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80062ba:	f8d3 70b8 	ldr.w	r7, [r3, #184]	; 0xb8
 80062be:	45bc      	cmp	ip, r7
 80062c0:	4460      	add	r0, ip
 80062c2:	d272      	bcs.n	80063aa <_AddFreeMemory+0x2ba>
 80062c4:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 80062c8:	45b4      	cmp	ip, r6
 80062ca:	d27b      	bcs.n	80063c4 <_AddFreeMemory+0x2d4>
 80062cc:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 80062d0:	45bc      	cmp	ip, r7
 80062d2:	d272      	bcs.n	80063ba <_AddFreeMemory+0x2ca>
 80062d4:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80062d8:	45b4      	cmp	ip, r6
 80062da:	d269      	bcs.n	80063b0 <_AddFreeMemory+0x2c0>
 80062dc:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 80062e0:	45bc      	cmp	ip, r7
 80062e2:	f080 808c 	bcs.w	80063fe <_AddFreeMemory+0x30e>
 80062e6:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 80062ea:	45b4      	cmp	ip, r6
 80062ec:	f080 8084 	bcs.w	80063f8 <_AddFreeMemory+0x308>
 80062f0:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 80062f4:	45bc      	cmp	ip, r7
 80062f6:	d27c      	bcs.n	80063f2 <_AddFreeMemory+0x302>
 80062f8:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 80062fc:	45b4      	cmp	ip, r6
 80062fe:	d275      	bcs.n	80063ec <_AddFreeMemory+0x2fc>
 8006300:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 8006302:	45bc      	cmp	ip, r7
 8006304:	d26f      	bcs.n	80063e6 <_AddFreeMemory+0x2f6>
 8006306:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 8006308:	45bc      	cmp	ip, r7
 800630a:	f080 8089 	bcs.w	8006420 <_AddFreeMemory+0x330>
 800630e:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8006310:	45bc      	cmp	ip, r7
 8006312:	f080 8082 	bcs.w	800641a <_AddFreeMemory+0x32a>
 8006316:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8006318:	45bc      	cmp	ip, r7
 800631a:	d279      	bcs.n	8006410 <_AddFreeMemory+0x320>
 800631c:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 800631e:	45bc      	cmp	ip, r7
 8006320:	d273      	bcs.n	800640a <_AddFreeMemory+0x31a>
 8006322:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8006324:	45bc      	cmp	ip, r7
 8006326:	d26d      	bcs.n	8006404 <_AddFreeMemory+0x314>
 8006328:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 800632a:	45bc      	cmp	ip, r7
 800632c:	f080 8083 	bcs.w	8006436 <_AddFreeMemory+0x346>
 8006330:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8006332:	45b4      	cmp	ip, r6
 8006334:	bf34      	ite	cc
 8006336:	f04f 38ff 	movcc.w	r8, #4294967295
 800633a:	f04f 0800 	movcs.w	r8, #0
 800633e:	681e      	ldr	r6, [r3, #0]
 8006340:	68a7      	ldr	r7, [r4, #8]
 8006342:	68e4      	ldr	r4, [r4, #12]
 8006344:	ebcc 0606 	rsb	r6, ip, r6
 8006348:	601e      	str	r6, [r3, #0]
 800634a:	b107      	cbz	r7, 800634e <_AddFreeMemory+0x25e>
 800634c:	607c      	str	r4, [r7, #4]
 800634e:	b1cc      	cbz	r4, 8006384 <_AddFreeMemory+0x294>
 8006350:	6027      	str	r7, [r4, #0]
 8006352:	e6dc      	b.n	800610e <_AddFreeMemory+0x1e>
 8006354:	240f      	movs	r4, #15
 8006356:	e72e      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006358:	240e      	movs	r4, #14
 800635a:	e72c      	b.n	80061b6 <_AddFreeMemory+0xc6>
 800635c:	240d      	movs	r4, #13
 800635e:	e72a      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006360:	240c      	movs	r4, #12
 8006362:	e728      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006364:	240b      	movs	r4, #11
 8006366:	e726      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006368:	240a      	movs	r4, #10
 800636a:	e724      	b.n	80061b6 <_AddFreeMemory+0xc6>
 800636c:	2409      	movs	r4, #9
 800636e:	e722      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006370:	2408      	movs	r4, #8
 8006372:	e720      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006374:	2407      	movs	r4, #7
 8006376:	e71e      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006378:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800637c:	4625      	mov	r5, r4
 800637e:	6479      	str	r1, [r7, #68]	; 0x44
 8006380:	4621      	mov	r1, r4
 8006382:	e6cc      	b.n	800611e <_AddFreeMemory+0x2e>
 8006384:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006388:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800638c:	e6bf      	b.n	800610e <_AddFreeMemory+0x1e>
 800638e:	2406      	movs	r4, #6
 8006390:	e711      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006392:	2405      	movs	r4, #5
 8006394:	e70f      	b.n	80061b6 <_AddFreeMemory+0xc6>
 8006396:	2404      	movs	r4, #4
 8006398:	e70d      	b.n	80061b6 <_AddFreeMemory+0xc6>
 800639a:	2403      	movs	r4, #3
 800639c:	e70b      	b.n	80061b6 <_AddFreeMemory+0xc6>
 800639e:	2402      	movs	r4, #2
 80063a0:	e709      	b.n	80061b6 <_AddFreeMemory+0xc6>
 80063a2:	2401      	movs	r4, #1
 80063a4:	e707      	b.n	80061b6 <_AddFreeMemory+0xc6>
 80063a6:	270f      	movs	r7, #15
 80063a8:	e778      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063aa:	f04f 080f 	mov.w	r8, #15
 80063ae:	e7c6      	b.n	800633e <_AddFreeMemory+0x24e>
 80063b0:	f04f 080c 	mov.w	r8, #12
 80063b4:	e7c3      	b.n	800633e <_AddFreeMemory+0x24e>
 80063b6:	270e      	movs	r7, #14
 80063b8:	e770      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063ba:	f04f 080d 	mov.w	r8, #13
 80063be:	e7be      	b.n	800633e <_AddFreeMemory+0x24e>
 80063c0:	1fffdafc 	.word	0x1fffdafc
 80063c4:	f04f 080e 	mov.w	r8, #14
 80063c8:	e7b9      	b.n	800633e <_AddFreeMemory+0x24e>
 80063ca:	270c      	movs	r7, #12
 80063cc:	e766      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063ce:	270d      	movs	r7, #13
 80063d0:	e764      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063d2:	270a      	movs	r7, #10
 80063d4:	e762      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063d6:	270b      	movs	r7, #11
 80063d8:	e760      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063da:	2707      	movs	r7, #7
 80063dc:	e75e      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063de:	2708      	movs	r7, #8
 80063e0:	e75c      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063e2:	2709      	movs	r7, #9
 80063e4:	e75a      	b.n	800629c <_AddFreeMemory+0x1ac>
 80063e6:	f04f 0807 	mov.w	r8, #7
 80063ea:	e7a8      	b.n	800633e <_AddFreeMemory+0x24e>
 80063ec:	f04f 0808 	mov.w	r8, #8
 80063f0:	e7a5      	b.n	800633e <_AddFreeMemory+0x24e>
 80063f2:	f04f 0809 	mov.w	r8, #9
 80063f6:	e7a2      	b.n	800633e <_AddFreeMemory+0x24e>
 80063f8:	f04f 080a 	mov.w	r8, #10
 80063fc:	e79f      	b.n	800633e <_AddFreeMemory+0x24e>
 80063fe:	f04f 080b 	mov.w	r8, #11
 8006402:	e79c      	b.n	800633e <_AddFreeMemory+0x24e>
 8006404:	f04f 0802 	mov.w	r8, #2
 8006408:	e799      	b.n	800633e <_AddFreeMemory+0x24e>
 800640a:	f04f 0803 	mov.w	r8, #3
 800640e:	e796      	b.n	800633e <_AddFreeMemory+0x24e>
 8006410:	f04f 0804 	mov.w	r8, #4
 8006414:	e793      	b.n	800633e <_AddFreeMemory+0x24e>
 8006416:	2706      	movs	r7, #6
 8006418:	e740      	b.n	800629c <_AddFreeMemory+0x1ac>
 800641a:	f04f 0805 	mov.w	r8, #5
 800641e:	e78e      	b.n	800633e <_AddFreeMemory+0x24e>
 8006420:	f04f 0806 	mov.w	r8, #6
 8006424:	e78b      	b.n	800633e <_AddFreeMemory+0x24e>
 8006426:	2702      	movs	r7, #2
 8006428:	e738      	b.n	800629c <_AddFreeMemory+0x1ac>
 800642a:	2703      	movs	r7, #3
 800642c:	e736      	b.n	800629c <_AddFreeMemory+0x1ac>
 800642e:	2704      	movs	r7, #4
 8006430:	e734      	b.n	800629c <_AddFreeMemory+0x1ac>
 8006432:	2705      	movs	r7, #5
 8006434:	e732      	b.n	800629c <_AddFreeMemory+0x1ac>
 8006436:	f04f 0801 	mov.w	r8, #1
 800643a:	e780      	b.n	800633e <_AddFreeMemory+0x24e>
 800643c:	2701      	movs	r7, #1
 800643e:	e72d      	b.n	800629c <_AddFreeMemory+0x1ac>

08006440 <_RemoveHoles>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8006618 <_RemoveHoles+0x1d8>
 8006448:	f8d8 4038 	ldr.w	r4, [r8, #56]	; 0x38
 800644c:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8006450:	e894 0060 	ldmia.w	r4, {r5, r6}
 8006454:	1e79      	subs	r1, r7, #1
 8006456:	b083      	sub	sp, #12
 8006458:	4683      	mov	fp, r0
 800645a:	190f      	adds	r7, r1, r4
 800645c:	46c1      	mov	r9, r8
 800645e:	b135      	cbz	r5, 800646e <_RemoveHoles+0x2e>
 8006460:	19a4      	adds	r4, r4, r6
 8006462:	42a7      	cmp	r7, r4
 8006464:	d914      	bls.n	8006490 <_RemoveHoles+0x50>
 8006466:	e894 0060 	ldmia.w	r4, {r5, r6}
 800646a:	2d00      	cmp	r5, #0
 800646c:	d1f8      	bne.n	8006460 <_RemoveHoles+0x20>
 800646e:	1931      	adds	r1, r6, r4
 8006470:	428f      	cmp	r7, r1
 8006472:	d90d      	bls.n	8006490 <_RemoveHoles+0x50>
 8006474:	5935      	ldr	r5, [r6, r4]
 8006476:	684b      	ldr	r3, [r1, #4]
 8006478:	b175      	cbz	r5, 8006498 <_RemoveHoles+0x58>
 800647a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800647e:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 8006482:	2801      	cmp	r0, #1
 8006484:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8006488:	d00c      	beq.n	80064a4 <_RemoveHoles+0x64>
 800648a:	461e      	mov	r6, r3
 800648c:	460c      	mov	r4, r1
 800648e:	e7e6      	b.n	800645e <_RemoveHoles+0x1e>
 8006490:	2001      	movs	r0, #1
 8006492:	b003      	add	sp, #12
 8006494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006498:	461e      	mov	r6, r3
 800649a:	460c      	mov	r4, r1
 800649c:	1931      	adds	r1, r6, r4
 800649e:	428f      	cmp	r7, r1
 80064a0:	d8e8      	bhi.n	8006474 <_RemoveHoles+0x34>
 80064a2:	e7f5      	b.n	8006490 <_RemoveHoles+0x50>
 80064a4:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 80064a8:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 80064ac:	42b0      	cmp	r0, r6
 80064ae:	d978      	bls.n	80065a2 <_RemoveHoles+0x162>
 80064b0:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 80064b4:	42b0      	cmp	r0, r6
 80064b6:	d977      	bls.n	80065a8 <_RemoveHoles+0x168>
 80064b8:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 80064bc:	42b0      	cmp	r0, r6
 80064be:	d97d      	bls.n	80065bc <_RemoveHoles+0x17c>
 80064c0:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 80064c4:	42b0      	cmp	r0, r6
 80064c6:	d974      	bls.n	80065b2 <_RemoveHoles+0x172>
 80064c8:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 80064cc:	42b0      	cmp	r0, r6
 80064ce:	f240 8085 	bls.w	80065dc <_RemoveHoles+0x19c>
 80064d2:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 80064d6:	42b0      	cmp	r0, r6
 80064d8:	d97b      	bls.n	80065d2 <_RemoveHoles+0x192>
 80064da:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 80064de:	42b0      	cmp	r0, r6
 80064e0:	d974      	bls.n	80065cc <_RemoveHoles+0x18c>
 80064e2:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 80064e6:	4286      	cmp	r6, r0
 80064e8:	d26b      	bcs.n	80065c2 <_RemoveHoles+0x182>
 80064ea:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 80064ee:	4286      	cmp	r6, r0
 80064f0:	f080 8087 	bcs.w	8006602 <_RemoveHoles+0x1c2>
 80064f4:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 80064f8:	4286      	cmp	r6, r0
 80064fa:	d27d      	bcs.n	80065f8 <_RemoveHoles+0x1b8>
 80064fc:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 8006500:	4286      	cmp	r6, r0
 8006502:	d276      	bcs.n	80065f2 <_RemoveHoles+0x1b2>
 8006504:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 8006508:	4286      	cmp	r6, r0
 800650a:	d26d      	bcs.n	80065e8 <_RemoveHoles+0x1a8>
 800650c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 8006510:	4286      	cmp	r6, r0
 8006512:	d266      	bcs.n	80065e2 <_RemoveHoles+0x1a2>
 8006514:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8006518:	4286      	cmp	r6, r0
 800651a:	d278      	bcs.n	800660e <_RemoveHoles+0x1ce>
 800651c:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 8006520:	4286      	cmp	r6, r0
 8006522:	d271      	bcs.n	8006608 <_RemoveHoles+0x1c8>
 8006524:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 8006528:	4286      	cmp	r6, r0
 800652a:	bf34      	ite	cc
 800652c:	f04f 30ff 	movcc.w	r0, #4294967295
 8006530:	2000      	movcs	r0, #0
 8006532:	9001      	str	r0, [sp, #4]
 8006534:	f8d8 0000 	ldr.w	r0, [r8]
 8006538:	f8d4 e008 	ldr.w	lr, [r4, #8]
 800653c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006540:	1b80      	subs	r0, r0, r6
 8006542:	f8c8 0000 	str.w	r0, [r8]
 8006546:	f1be 0f00 	cmp.w	lr, #0
 800654a:	d001      	beq.n	8006550 <_RemoveHoles+0x110>
 800654c:	f8ce c004 	str.w	ip, [lr, #4]
 8006550:	f1bc 0f00 	cmp.w	ip, #0
 8006554:	d01e      	beq.n	8006594 <_RemoveHoles+0x154>
 8006556:	f8cc e000 	str.w	lr, [ip]
 800655a:	6054      	str	r4, [r2, #4]
 800655c:	4620      	mov	r0, r4
 800655e:	461a      	mov	r2, r3
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	f005 f8cc 	bl	800b6fe <memmove>
 8006566:	4555      	cmp	r5, sl
 8006568:	9900      	ldr	r1, [sp, #0]
 800656a:	d00d      	beq.n	8006588 <_RemoveHoles+0x148>
 800656c:	1864      	adds	r4, r4, r1
 800656e:	4630      	mov	r0, r6
 8006570:	4621      	mov	r1, r4
 8006572:	f7ff fdbd 	bl	80060f0 <_AddFreeMemory>
 8006576:	f1bb 0f00 	cmp.w	fp, #0
 800657a:	f43f af72 	beq.w	8006462 <_RemoveHoles+0x22>
 800657e:	4558      	cmp	r0, fp
 8006580:	f4ff af6f 	bcc.w	8006462 <_RemoveHoles+0x22>
 8006584:	2000      	movs	r0, #0
 8006586:	e784      	b.n	8006492 <_RemoveHoles+0x52>
 8006588:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800658c:	1b9a      	subs	r2, r3, r6
 800658e:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 8006592:	e7eb      	b.n	800656c <_RemoveHoles+0x12c>
 8006594:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006598:	eb08 00cc 	add.w	r0, r8, ip, lsl #3
 800659c:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 80065a0:	e7db      	b.n	800655a <_RemoveHoles+0x11a>
 80065a2:	200f      	movs	r0, #15
 80065a4:	9001      	str	r0, [sp, #4]
 80065a6:	e7c5      	b.n	8006534 <_RemoveHoles+0xf4>
 80065a8:	f04f 0c0e 	mov.w	ip, #14
 80065ac:	f8cd c004 	str.w	ip, [sp, #4]
 80065b0:	e7c0      	b.n	8006534 <_RemoveHoles+0xf4>
 80065b2:	f04f 0e0c 	mov.w	lr, #12
 80065b6:	f8cd e004 	str.w	lr, [sp, #4]
 80065ba:	e7bb      	b.n	8006534 <_RemoveHoles+0xf4>
 80065bc:	200d      	movs	r0, #13
 80065be:	9001      	str	r0, [sp, #4]
 80065c0:	e7b8      	b.n	8006534 <_RemoveHoles+0xf4>
 80065c2:	f04f 0e08 	mov.w	lr, #8
 80065c6:	f8cd e004 	str.w	lr, [sp, #4]
 80065ca:	e7b3      	b.n	8006534 <_RemoveHoles+0xf4>
 80065cc:	2009      	movs	r0, #9
 80065ce:	9001      	str	r0, [sp, #4]
 80065d0:	e7b0      	b.n	8006534 <_RemoveHoles+0xf4>
 80065d2:	f04f 0c0a 	mov.w	ip, #10
 80065d6:	f8cd c004 	str.w	ip, [sp, #4]
 80065da:	e7ab      	b.n	8006534 <_RemoveHoles+0xf4>
 80065dc:	200b      	movs	r0, #11
 80065de:	9001      	str	r0, [sp, #4]
 80065e0:	e7a8      	b.n	8006534 <_RemoveHoles+0xf4>
 80065e2:	2003      	movs	r0, #3
 80065e4:	9001      	str	r0, [sp, #4]
 80065e6:	e7a5      	b.n	8006534 <_RemoveHoles+0xf4>
 80065e8:	f04f 0e04 	mov.w	lr, #4
 80065ec:	f8cd e004 	str.w	lr, [sp, #4]
 80065f0:	e7a0      	b.n	8006534 <_RemoveHoles+0xf4>
 80065f2:	2005      	movs	r0, #5
 80065f4:	9001      	str	r0, [sp, #4]
 80065f6:	e79d      	b.n	8006534 <_RemoveHoles+0xf4>
 80065f8:	f04f 0c06 	mov.w	ip, #6
 80065fc:	f8cd c004 	str.w	ip, [sp, #4]
 8006600:	e798      	b.n	8006534 <_RemoveHoles+0xf4>
 8006602:	2007      	movs	r0, #7
 8006604:	9001      	str	r0, [sp, #4]
 8006606:	e795      	b.n	8006534 <_RemoveHoles+0xf4>
 8006608:	2001      	movs	r0, #1
 800660a:	9001      	str	r0, [sp, #4]
 800660c:	e792      	b.n	8006534 <_RemoveHoles+0xf4>
 800660e:	f04f 0c02 	mov.w	ip, #2
 8006612:	f8cd c004 	str.w	ip, [sp, #4]
 8006616:	e78d      	b.n	8006534 <_RemoveHoles+0xf4>
 8006618:	1fffdafc 	.word	0x1fffdafc

0800661c <_Alloc>:
 800661c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006620:	4cb2      	ldr	r4, [pc, #712]	; (80068ec <_Alloc+0x2d0>)
 8006622:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006626:	4605      	mov	r5, r0
 8006628:	b90b      	cbnz	r3, 800662e <_Alloc+0x12>
 800662a:	f000 f9f3 	bl	8006a14 <_InitOnce.part.0>
 800662e:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8006630:	42b5      	cmp	r5, r6
 8006632:	d302      	bcc.n	800663a <_Alloc+0x1e>
 8006634:	1ce8      	adds	r0, r5, #3
 8006636:	f020 0603 	bic.w	r6, r0, #3
 800663a:	6821      	ldr	r1, [r4, #0]
 800663c:	4dab      	ldr	r5, [pc, #684]	; (80068ec <_Alloc+0x2d0>)
 800663e:	360c      	adds	r6, #12
 8006640:	42b1      	cmp	r1, r6
 8006642:	d203      	bcs.n	800664c <_Alloc+0x30>
 8006644:	2500      	movs	r5, #0
 8006646:	4628      	mov	r0, r5
 8006648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800664c:	6868      	ldr	r0, [r5, #4]
 800664e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006650:	4290      	cmp	r0, r2
 8006652:	d971      	bls.n	8006738 <_Alloc+0x11c>
 8006654:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006656:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006658:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800665c:	1e43      	subs	r3, r0, #1
 800665e:	eb02 0108 	add.w	r1, r2, r8
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	6848      	ldr	r0, [r1, #4]
 8006666:	2301      	movs	r3, #1
 8006668:	6260      	str	r0, [r4, #36]	; 0x24
 800666a:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 800666e:	2d00      	cmp	r5, #0
 8006670:	d0e8      	beq.n	8006644 <_Alloc+0x28>
 8006672:	f8df 9278 	ldr.w	r9, [pc, #632]	; 80068ec <_Alloc+0x2d0>
 8006676:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
 800667a:	42be      	cmp	r6, r7
 800667c:	d268      	bcs.n	8006750 <_Alloc+0x134>
 800667e:	f8d9 20b0 	ldr.w	r2, [r9, #176]	; 0xb0
 8006682:	4296      	cmp	r6, r2
 8006684:	f080 80e2 	bcs.w	800684c <_Alloc+0x230>
 8006688:	f8d9 10a8 	ldr.w	r1, [r9, #168]	; 0xa8
 800668c:	428e      	cmp	r6, r1
 800668e:	f080 80df 	bcs.w	8006850 <_Alloc+0x234>
 8006692:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8006696:	4286      	cmp	r6, r0
 8006698:	f080 80dc 	bcs.w	8006854 <_Alloc+0x238>
 800669c:	f8d9 3098 	ldr.w	r3, [r9, #152]	; 0x98
 80066a0:	429e      	cmp	r6, r3
 80066a2:	f080 80d9 	bcs.w	8006858 <_Alloc+0x23c>
 80066a6:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 80066aa:	4296      	cmp	r6, r2
 80066ac:	f080 80d6 	bcs.w	800685c <_Alloc+0x240>
 80066b0:	f8d9 1088 	ldr.w	r1, [r9, #136]	; 0x88
 80066b4:	428e      	cmp	r6, r1
 80066b6:	f080 80d3 	bcs.w	8006860 <_Alloc+0x244>
 80066ba:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 80066be:	4286      	cmp	r6, r0
 80066c0:	f080 80d2 	bcs.w	8006868 <_Alloc+0x24c>
 80066c4:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
 80066c8:	429e      	cmp	r6, r3
 80066ca:	f080 80cb 	bcs.w	8006864 <_Alloc+0x248>
 80066ce:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
 80066d2:	4296      	cmp	r6, r2
 80066d4:	f080 80d1 	bcs.w	800687a <_Alloc+0x25e>
 80066d8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80066da:	428e      	cmp	r6, r1
 80066dc:	f080 80cb 	bcs.w	8006876 <_Alloc+0x25a>
 80066e0:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 80066e4:	4286      	cmp	r6, r0
 80066e6:	f080 80ca 	bcs.w	800687e <_Alloc+0x262>
 80066ea:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 80066ee:	429e      	cmp	r6, r3
 80066f0:	f080 80c7 	bcs.w	8006882 <_Alloc+0x266>
 80066f4:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 80066f8:	4296      	cmp	r6, r2
 80066fa:	f080 80c4 	bcs.w	8006886 <_Alloc+0x26a>
 80066fe:	f8d9 1048 	ldr.w	r1, [r9, #72]	; 0x48
 8006702:	428e      	cmp	r6, r1
 8006704:	f080 80c1 	bcs.w	800688a <_Alloc+0x26e>
 8006708:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 800670c:	4286      	cmp	r6, r0
 800670e:	f080 80be 	bcs.w	800688e <_Alloc+0x272>
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff fe94 	bl	8006440 <_RemoveHoles>
 8006718:	2800      	cmp	r0, #0
 800671a:	d0ac      	beq.n	8006676 <_Alloc+0x5a>
 800671c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800671e:	6860      	ldr	r0, [r4, #4]
 8006720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006722:	eb02 0608 	add.w	r6, r2, r8
 8006726:	2300      	movs	r3, #0
 8006728:	3001      	adds	r0, #1
 800672a:	6060      	str	r0, [r4, #4]
 800672c:	6071      	str	r1, [r6, #4]
 800672e:	f802 3008 	strb.w	r3, [r2, r8]
 8006732:	6265      	str	r5, [r4, #36]	; 0x24
 8006734:	461d      	mov	r5, r3
 8006736:	e786      	b.n	8006646 <_Alloc+0x2a>
 8006738:	1e53      	subs	r3, r2, #1
 800673a:	632b      	str	r3, [r5, #48]	; 0x30
 800673c:	f000 f8d8 	bl	80068f0 <_EnlargeBlocks>
 8006740:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006742:	1c4a      	adds	r2, r1, #1
 8006744:	632a      	str	r2, [r5, #48]	; 0x30
 8006746:	2800      	cmp	r0, #0
 8006748:	f47f af7c 	bne.w	8006644 <_Alloc+0x28>
 800674c:	6868      	ldr	r0, [r5, #4]
 800674e:	e781      	b.n	8006654 <_Alloc+0x38>
 8006750:	200f      	movs	r0, #15
 8006752:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
 8006756:	2100      	movs	r1, #0
 8006758:	eb0c 0301 	add.w	r3, ip, r1
 800675c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800675e:	b162      	cbz	r2, 800677a <_Alloc+0x15e>
 8006760:	6893      	ldr	r3, [r2, #8]
 8006762:	b153      	cbz	r3, 800677a <_Alloc+0x15e>
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4296      	cmp	r6, r2
 8006768:	d804      	bhi.n	8006774 <_Alloc+0x158>
 800676a:	e00b      	b.n	8006784 <_Alloc+0x168>
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	4296      	cmp	r6, r2
 8006772:	d907      	bls.n	8006784 <_Alloc+0x168>
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f8      	bne.n	800676c <_Alloc+0x150>
 800677a:	3001      	adds	r0, #1
 800677c:	3108      	adds	r1, #8
 800677e:	280f      	cmp	r0, #15
 8006780:	d9ea      	bls.n	8006758 <_Alloc+0x13c>
 8006782:	e7c6      	b.n	8006712 <_Alloc+0xf6>
 8006784:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006786:	ebc6 0c02 	rsb	ip, r6, r2
 800678a:	f101 000c 	add.w	r0, r1, #12
 800678e:	4584      	cmp	ip, r0
 8006790:	bf2c      	ite	cs
 8006792:	4630      	movcs	r0, r6
 8006794:	4610      	movcc	r0, r2
 8006796:	42ba      	cmp	r2, r7
 8006798:	f080 8081 	bcs.w	800689e <_Alloc+0x282>
 800679c:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 80067a0:	4e52      	ldr	r6, [pc, #328]	; (80068ec <_Alloc+0x2d0>)
 80067a2:	42ba      	cmp	r2, r7
 80067a4:	d278      	bcs.n	8006898 <_Alloc+0x27c>
 80067a6:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 80067aa:	42ba      	cmp	r2, r7
 80067ac:	d271      	bcs.n	8006892 <_Alloc+0x276>
 80067ae:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 80067b2:	42ba      	cmp	r2, r7
 80067b4:	f080 8088 	bcs.w	80068c8 <_Alloc+0x2ac>
 80067b8:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 80067bc:	42ba      	cmp	r2, r7
 80067be:	f080 808f 	bcs.w	80068e0 <_Alloc+0x2c4>
 80067c2:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 80067c6:	42ba      	cmp	r2, r7
 80067c8:	f080 8087 	bcs.w	80068da <_Alloc+0x2be>
 80067cc:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 80067d0:	42ba      	cmp	r2, r7
 80067d2:	d27f      	bcs.n	80068d4 <_Alloc+0x2b8>
 80067d4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 80067d8:	42ba      	cmp	r2, r7
 80067da:	d278      	bcs.n	80068ce <_Alloc+0x2b2>
 80067dc:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 80067de:	42ba      	cmp	r2, r7
 80067e0:	d269      	bcs.n	80068b6 <_Alloc+0x29a>
 80067e2:	6f36      	ldr	r6, [r6, #112]	; 0x70
 80067e4:	42b2      	cmp	r2, r6
 80067e6:	d263      	bcs.n	80068b0 <_Alloc+0x294>
 80067e8:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 80067ea:	4f40      	ldr	r7, [pc, #256]	; (80068ec <_Alloc+0x2d0>)
 80067ec:	42b2      	cmp	r2, r6
 80067ee:	d25c      	bcs.n	80068aa <_Alloc+0x28e>
 80067f0:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80067f2:	42b2      	cmp	r2, r6
 80067f4:	d256      	bcs.n	80068a4 <_Alloc+0x288>
 80067f6:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80067f8:	42b2      	cmp	r2, r6
 80067fa:	d262      	bcs.n	80068c2 <_Alloc+0x2a6>
 80067fc:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80067fe:	42b2      	cmp	r2, r6
 8006800:	d25c      	bcs.n	80068bc <_Alloc+0x2a0>
 8006802:	6cbf      	ldr	r7, [r7, #72]	; 0x48
 8006804:	42ba      	cmp	r2, r7
 8006806:	d26e      	bcs.n	80068e6 <_Alloc+0x2ca>
 8006808:	4291      	cmp	r1, r2
 800680a:	bf8c      	ite	hi
 800680c:	f04f 3cff 	movhi.w	ip, #4294967295
 8006810:	f04f 0c00 	movls.w	ip, #0
 8006814:	6827      	ldr	r7, [r4, #0]
 8006816:	689e      	ldr	r6, [r3, #8]
 8006818:	68d9      	ldr	r1, [r3, #12]
 800681a:	1abf      	subs	r7, r7, r2
 800681c:	6027      	str	r7, [r4, #0]
 800681e:	b106      	cbz	r6, 8006822 <_Alloc+0x206>
 8006820:	6071      	str	r1, [r6, #4]
 8006822:	b319      	cbz	r1, 800686c <_Alloc+0x250>
 8006824:	600e      	str	r6, [r1, #0]
 8006826:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8006828:	1819      	adds	r1, r3, r0
 800682a:	44a0      	add	r8, r4
 800682c:	2400      	movs	r4, #0
 800682e:	4290      	cmp	r0, r2
 8006830:	f8c8 3004 	str.w	r3, [r8, #4]
 8006834:	601d      	str	r5, [r3, #0]
 8006836:	6058      	str	r0, [r3, #4]
 8006838:	609c      	str	r4, [r3, #8]
 800683a:	611b      	str	r3, [r3, #16]
 800683c:	f841 0c04 	str.w	r0, [r1, #-4]
 8006840:	f6bf af01 	bge.w	8006646 <_Alloc+0x2a>
 8006844:	1a10      	subs	r0, r2, r0
 8006846:	f7ff fc53 	bl	80060f0 <_AddFreeMemory>
 800684a:	e6fc      	b.n	8006646 <_Alloc+0x2a>
 800684c:	200e      	movs	r0, #14
 800684e:	e780      	b.n	8006752 <_Alloc+0x136>
 8006850:	200d      	movs	r0, #13
 8006852:	e77e      	b.n	8006752 <_Alloc+0x136>
 8006854:	200c      	movs	r0, #12
 8006856:	e77c      	b.n	8006752 <_Alloc+0x136>
 8006858:	200b      	movs	r0, #11
 800685a:	e77a      	b.n	8006752 <_Alloc+0x136>
 800685c:	200a      	movs	r0, #10
 800685e:	e778      	b.n	8006752 <_Alloc+0x136>
 8006860:	2009      	movs	r0, #9
 8006862:	e776      	b.n	8006752 <_Alloc+0x136>
 8006864:	2007      	movs	r0, #7
 8006866:	e774      	b.n	8006752 <_Alloc+0x136>
 8006868:	2008      	movs	r0, #8
 800686a:	e772      	b.n	8006752 <_Alloc+0x136>
 800686c:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8006870:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8006874:	e7d7      	b.n	8006826 <_Alloc+0x20a>
 8006876:	2005      	movs	r0, #5
 8006878:	e76b      	b.n	8006752 <_Alloc+0x136>
 800687a:	2006      	movs	r0, #6
 800687c:	e769      	b.n	8006752 <_Alloc+0x136>
 800687e:	2004      	movs	r0, #4
 8006880:	e767      	b.n	8006752 <_Alloc+0x136>
 8006882:	2003      	movs	r0, #3
 8006884:	e765      	b.n	8006752 <_Alloc+0x136>
 8006886:	2002      	movs	r0, #2
 8006888:	e763      	b.n	8006752 <_Alloc+0x136>
 800688a:	2001      	movs	r0, #1
 800688c:	e761      	b.n	8006752 <_Alloc+0x136>
 800688e:	2000      	movs	r0, #0
 8006890:	e75f      	b.n	8006752 <_Alloc+0x136>
 8006892:	f04f 0c0d 	mov.w	ip, #13
 8006896:	e7bd      	b.n	8006814 <_Alloc+0x1f8>
 8006898:	f04f 0c0e 	mov.w	ip, #14
 800689c:	e7ba      	b.n	8006814 <_Alloc+0x1f8>
 800689e:	f04f 0c0f 	mov.w	ip, #15
 80068a2:	e7b7      	b.n	8006814 <_Alloc+0x1f8>
 80068a4:	f04f 0c04 	mov.w	ip, #4
 80068a8:	e7b4      	b.n	8006814 <_Alloc+0x1f8>
 80068aa:	f04f 0c05 	mov.w	ip, #5
 80068ae:	e7b1      	b.n	8006814 <_Alloc+0x1f8>
 80068b0:	f04f 0c06 	mov.w	ip, #6
 80068b4:	e7ae      	b.n	8006814 <_Alloc+0x1f8>
 80068b6:	f04f 0c07 	mov.w	ip, #7
 80068ba:	e7ab      	b.n	8006814 <_Alloc+0x1f8>
 80068bc:	f04f 0c02 	mov.w	ip, #2
 80068c0:	e7a8      	b.n	8006814 <_Alloc+0x1f8>
 80068c2:	f04f 0c03 	mov.w	ip, #3
 80068c6:	e7a5      	b.n	8006814 <_Alloc+0x1f8>
 80068c8:	f04f 0c0c 	mov.w	ip, #12
 80068cc:	e7a2      	b.n	8006814 <_Alloc+0x1f8>
 80068ce:	f04f 0c08 	mov.w	ip, #8
 80068d2:	e79f      	b.n	8006814 <_Alloc+0x1f8>
 80068d4:	f04f 0c09 	mov.w	ip, #9
 80068d8:	e79c      	b.n	8006814 <_Alloc+0x1f8>
 80068da:	f04f 0c0a 	mov.w	ip, #10
 80068de:	e799      	b.n	8006814 <_Alloc+0x1f8>
 80068e0:	f04f 0c0b 	mov.w	ip, #11
 80068e4:	e796      	b.n	8006814 <_Alloc+0x1f8>
 80068e6:	f04f 0c01 	mov.w	ip, #1
 80068ea:	e793      	b.n	8006814 <_Alloc+0x1f8>
 80068ec:	1fffdafc 	.word	0x1fffdafc

080068f0 <_EnlargeBlocks>:
 80068f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f4:	4c45      	ldr	r4, [pc, #276]	; (8006a0c <_EnlargeBlocks+0x11c>)
 80068f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80068f8:	b98b      	cbnz	r3, 800691e <_EnlargeBlocks+0x2e>
 80068fa:	4945      	ldr	r1, [pc, #276]	; (8006a10 <_EnlargeBlocks+0x120>)
 80068fc:	688a      	ldr	r2, [r1, #8]
 80068fe:	684d      	ldr	r5, [r1, #4]
 8006900:	f102 0308 	add.w	r3, r2, #8
 8006904:	fbb5 f0f3 	udiv	r0, r5, r3
 8006908:	f100 0802 	add.w	r8, r0, #2
 800690c:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 8006910:	f7ff fe84 	bl	800661c <_Alloc>
 8006914:	4605      	mov	r5, r0
 8006916:	b970      	cbnz	r0, 8006936 <_EnlargeBlocks+0x46>
 8006918:	2001      	movs	r0, #1
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	6920      	ldr	r0, [r4, #16]
 8006920:	f100 0804 	add.w	r8, r0, #4
 8006924:	eb08 08d0 	add.w	r8, r8, r0, lsr #3
 8006928:	ea4f 00c8 	mov.w	r0, r8, lsl #3
 800692c:	f7ff fe76 	bl	800661c <_Alloc>
 8006930:	4605      	mov	r5, r0
 8006932:	2800      	cmp	r0, #0
 8006934:	d0f0      	beq.n	8006918 <_EnlargeBlocks+0x28>
 8006936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006938:	6926      	ldr	r6, [r4, #16]
 800693a:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 800693e:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	f102 0908 	add.w	r9, r2, #8
 8006948:	4648      	mov	r0, r9
 800694a:	00f2      	lsls	r2, r6, #3
 800694c:	f004 fecc 	bl	800b6e8 <memcpy>
 8006950:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006954:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8006958:	f108 37ff 	add.w	r7, r8, #4294967295
 800695c:	45bc      	cmp	ip, r7
 800695e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8006960:	d23e      	bcs.n	80069e0 <_EnlargeBlocks+0xf0>
 8006962:	f10c 0301 	add.w	r3, ip, #1
 8006966:	eb09 06cc 	add.w	r6, r9, ip, lsl #3
 800696a:	ea6f 010c 	mvn.w	r1, ip
 800696e:	19cd      	adds	r5, r1, r7
 8006970:	2208      	movs	r2, #8
 8006972:	42bb      	cmp	r3, r7
 8006974:	6073      	str	r3, [r6, #4]
 8006976:	f005 0001 	and.w	r0, r5, #1
 800697a:	d011      	beq.n	80069a0 <_EnlargeBlocks+0xb0>
 800697c:	b120      	cbz	r0, 8006988 <_EnlargeBlocks+0x98>
 800697e:	3301      	adds	r3, #1
 8006980:	2210      	movs	r2, #16
 8006982:	42bb      	cmp	r3, r7
 8006984:	60f3      	str	r3, [r6, #12]
 8006986:	d00b      	beq.n	80069a0 <_EnlargeBlocks+0xb0>
 8006988:	f102 0108 	add.w	r1, r2, #8
 800698c:	1c5d      	adds	r5, r3, #1
 800698e:	18b2      	adds	r2, r6, r2
 8006990:	3302      	adds	r3, #2
 8006992:	1870      	adds	r0, r6, r1
 8006994:	42bb      	cmp	r3, r7
 8006996:	6055      	str	r5, [r2, #4]
 8006998:	f101 0208 	add.w	r2, r1, #8
 800699c:	6043      	str	r3, [r0, #4]
 800699e:	d1f3      	bne.n	8006988 <_EnlargeBlocks+0x98>
 80069a0:	eb09 06c3 	add.w	r6, r9, r3, lsl #3
 80069a4:	2500      	movs	r5, #0
 80069a6:	6075      	str	r5, [r6, #4]
 80069a8:	6863      	ldr	r3, [r4, #4]
 80069aa:	4e18      	ldr	r6, [pc, #96]	; (8006a0c <_EnlargeBlocks+0x11c>)
 80069ac:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
 80069b0:	ebcc 0103 	rsb	r1, ip, r3
 80069b4:	eb01 0208 	add.w	r2, r1, r8
 80069b8:	6062      	str	r2, [r4, #4]
 80069ba:	f8c4 8010 	str.w	r8, [r4, #16]
 80069be:	f1ba 0f00 	cmp.w	sl, #0
 80069c2:	d102      	bne.n	80069ca <_EnlargeBlocks+0xda>
 80069c4:	4650      	mov	r0, sl
 80069c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ca:	f819 003a 	ldrb.w	r0, [r9, sl, lsl #3]
 80069ce:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 80069d2:	44a1      	add	r9, r4
 80069d4:	b110      	cbz	r0, 80069dc <_EnlargeBlocks+0xec>
 80069d6:	2801      	cmp	r0, #1
 80069d8:	d904      	bls.n	80069e4 <_EnlargeBlocks+0xf4>
 80069da:	4628      	mov	r0, r5
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	4663      	mov	r3, ip
 80069e2:	e7dd      	b.n	80069a0 <_EnlargeBlocks+0xb0>
 80069e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069e8:	6848      	ldr	r0, [r1, #4]
 80069ea:	f7ff fb81 	bl	80060f0 <_AddFreeMemory>
 80069ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80069f0:	6870      	ldr	r0, [r6, #4]
 80069f2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80069f4:	191c      	adds	r4, r3, r4
 80069f6:	1c41      	adds	r1, r0, #1
 80069f8:	6071      	str	r1, [r6, #4]
 80069fa:	4628      	mov	r0, r5
 80069fc:	6062      	str	r2, [r4, #4]
 80069fe:	f803 503a 	strb.w	r5, [r3, sl, lsl #3]
 8006a02:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8006a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0a:	bf00      	nop
 8006a0c:	1fffdafc 	.word	0x1fffdafc
 8006a10:	1fffc940 	.word	0x1fffc940

08006a14 <_InitOnce.part.0>:
 8006a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	4fb8      	ldr	r7, [pc, #736]	; (8006cfc <_InitOnce.part.0+0x2e8>)
 8006a1a:	4cb9      	ldr	r4, [pc, #740]	; (8006d00 <_InitOnce.part.0+0x2ec>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	683e      	ldr	r6, [r7, #0]
 8006a20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a24:	bf34      	ite	cc
 8006a26:	469e      	movcc	lr, r3
 8006a28:	f44f 5e20 	movcs.w	lr, #10240	; 0x2800
 8006a2c:	ea4f 0c9e 	mov.w	ip, lr, lsr #2
 8006a30:	f248 0281 	movw	r2, #32897	; 0x8081
 8006a34:	2001      	movs	r0, #1
 8006a36:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 8006a3a:	4665      	mov	r5, ip
 8006a3c:	f04f 0a00 	mov.w	sl, #0
 8006a40:	f2c8 0280 	movt	r2, #32896	; 0x8080
 8006a44:	f1bc 0f00 	cmp.w	ip, #0
 8006a48:	f000 826e 	beq.w	8006f28 <_InitOnce.part.0+0x514>
 8006a4c:	fba2 010a 	umull	r0, r1, r2, sl
 8006a50:	09cb      	lsrs	r3, r1, #7
 8006a52:	ebc3 2003 	rsb	r0, r3, r3, lsl #8
 8006a56:	46b0      	mov	r8, r6
 8006a58:	ebc0 010a 	rsb	r1, r0, sl
 8006a5c:	ebc5 030a 	rsb	r3, r5, sl
 8006a60:	43d8      	mvns	r0, r3
 8006a62:	f848 1b04 	str.w	r1, [r8], #4
 8006a66:	f10a 0301 	add.w	r3, sl, #1
 8006a6a:	f248 0981 	movw	r9, #32897	; 0x8081
 8006a6e:	429d      	cmp	r5, r3
 8006a70:	f000 0101 	and.w	r1, r0, #1
 8006a74:	f2c8 0980 	movt	r9, #32896	; 0x8080
 8006a78:	f108 0804 	add.w	r8, r8, #4
 8006a7c:	d02c      	beq.n	8006ad8 <_InitOnce.part.0+0xc4>
 8006a7e:	b161      	cbz	r1, 8006a9a <_InitOnce.part.0+0x86>
 8006a80:	fba2 0103 	umull	r0, r1, r2, r3
 8006a84:	09c8      	lsrs	r0, r1, #7
 8006a86:	ebc0 2100 	rsb	r1, r0, r0, lsl #8
 8006a8a:	1a58      	subs	r0, r3, r1
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	429d      	cmp	r5, r3
 8006a90:	f848 0c04 	str.w	r0, [r8, #-4]
 8006a94:	f108 0804 	add.w	r8, r8, #4
 8006a98:	d01e      	beq.n	8006ad8 <_InitOnce.part.0+0xc4>
 8006a9a:	1c58      	adds	r0, r3, #1
 8006a9c:	fba2 1b03 	umull	r1, fp, r2, r3
 8006aa0:	fba2 1900 	umull	r1, r9, r2, r0
 8006aa4:	ea4f 1bdb 	mov.w	fp, fp, lsr #7
 8006aa8:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8006aac:	4641      	mov	r1, r8
 8006aae:	ebc9 2909 	rsb	r9, r9, r9, lsl #8
 8006ab2:	ebcb 2b0b 	rsb	fp, fp, fp, lsl #8
 8006ab6:	ebcb 0b03 	rsb	fp, fp, r3
 8006aba:	ebc9 0300 	rsb	r3, r9, r0
 8006abe:	f848 bc04 	str.w	fp, [r8, #-4]
 8006ac2:	f841 3b04 	str.w	r3, [r1], #4
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	f248 0981 	movw	r9, #32897	; 0x8081
 8006acc:	429d      	cmp	r5, r3
 8006ace:	f2c8 0980 	movt	r9, #32896	; 0x8080
 8006ad2:	f101 0804 	add.w	r8, r1, #4
 8006ad6:	d1e0      	bne.n	8006a9a <_InitOnce.part.0+0x86>
 8006ad8:	fba9 300a 	umull	r3, r0, r9, sl
 8006adc:	ea4f 11d0 	mov.w	r1, r0, lsr #7
 8006ae0:	ebc1 2901 	rsb	r9, r1, r1, lsl #8
 8006ae4:	6833      	ldr	r3, [r6, #0]
 8006ae6:	ebc9 090a 	rsb	r9, r9, sl
 8006aea:	454b      	cmp	r3, r9
 8006aec:	d115      	bne.n	8006b1a <_InitOnce.part.0+0x106>
 8006aee:	f10a 0a01 	add.w	sl, sl, #1
 8006af2:	ebca 0005 	rsb	r0, sl, r5
 8006af6:	07c0      	lsls	r0, r0, #31
 8006af8:	4631      	mov	r1, r6
 8006afa:	4653      	mov	r3, sl
 8006afc:	d56b      	bpl.n	8006bd6 <_InitOnce.part.0+0x1c2>
 8006afe:	fba2 b30a 	umull	fp, r3, r2, sl
 8006b02:	4631      	mov	r1, r6
 8006b04:	09d8      	lsrs	r0, r3, #7
 8006b06:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
 8006b0a:	f851 8f04 	ldr.w	r8, [r1, #4]!
 8006b0e:	ebc3 000a 	rsb	r0, r3, sl
 8006b12:	4580      	cmp	r8, r0
 8006b14:	f10a 0301 	add.w	r3, sl, #1
 8006b18:	d05d      	beq.n	8006bd6 <_InitOnce.part.0+0x1c2>
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	4877      	ldr	r0, [pc, #476]	; (8006cfc <_InitOnce.part.0+0x2e8>)
 8006b1e:	b911      	cbnz	r1, 8006b26 <_InitOnce.part.0+0x112>
 8006b20:	6845      	ldr	r5, [r0, #4]
 8006b22:	08ab      	lsrs	r3, r5, #2
 8006b24:	6083      	str	r3, [r0, #8]
 8006b26:	4a77      	ldr	r2, [pc, #476]	; (8006d04 <_InitOnce.part.0+0x2f0>)
 8006b28:	4877      	ldr	r0, [pc, #476]	; (8006d08 <_InitOnce.part.0+0x2f4>)
 8006b2a:	60fa      	str	r2, [r7, #12]
 8006b2c:	f7ff f816 	bl	8005b5c <GUI__RegisterExit>
 8006b30:	225a      	movs	r2, #90	; 0x5a
 8006b32:	6222      	str	r2, [r4, #32]
 8006b34:	2210      	movs	r2, #16
 8006b36:	6422      	str	r2, [r4, #64]	; 0x40
 8006b38:	2220      	movs	r2, #32
 8006b3a:	64a2      	str	r2, [r4, #72]	; 0x48
 8006b3c:	2240      	movs	r2, #64	; 0x40
 8006b3e:	6522      	str	r2, [r4, #80]	; 0x50
 8006b40:	2280      	movs	r2, #128	; 0x80
 8006b42:	65a2      	str	r2, [r4, #88]	; 0x58
 8006b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b48:	6622      	str	r2, [r4, #96]	; 0x60
 8006b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4e:	66a2      	str	r2, [r4, #104]	; 0x68
 8006b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b54:	6722      	str	r2, [r4, #112]	; 0x70
 8006b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b5a:	67a2      	str	r2, [r4, #120]	; 0x78
 8006b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b60:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 8006b64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b68:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8006b6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b70:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006b74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8006b7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 8006b88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b8c:	f1a0 0514 	sub.w	r5, r0, #20
 8006b90:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 8006b94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b98:	194b      	adds	r3, r1, r5
 8006b9a:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8006b9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ba2:	2501      	movs	r5, #1
 8006ba4:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 8006ba8:	2202      	movs	r2, #2
 8006baa:	6122      	str	r2, [r4, #16]
 8006bac:	6363      	str	r3, [r4, #52]	; 0x34
 8006bae:	63a1      	str	r1, [r4, #56]	; 0x38
 8006bb0:	60e0      	str	r0, [r4, #12]
 8006bb2:	605d      	str	r5, [r3, #4]
 8006bb4:	6265      	str	r5, [r4, #36]	; 0x24
 8006bb6:	6065      	str	r5, [r4, #4]
 8006bb8:	f7ff fa9a 	bl	80060f0 <_AddFreeMemory>
 8006bbc:	f7ff fe98 	bl	80068f0 <_EnlargeBlocks>
 8006bc0:	6325      	str	r5, [r4, #48]	; 0x30
 8006bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc6:	f851 9f04 	ldr.w	r9, [r1, #4]!
 8006bca:	45c1      	cmp	r9, r8
 8006bcc:	d1a5      	bne.n	8006b1a <_InitOnce.part.0+0x106>
 8006bce:	f851 8f04 	ldr.w	r8, [r1, #4]!
 8006bd2:	4580      	cmp	r8, r0
 8006bd4:	d1a1      	bne.n	8006b1a <_InitOnce.part.0+0x106>
 8006bd6:	fba2 8003 	umull	r8, r0, r2, r3
 8006bda:	09c0      	lsrs	r0, r0, #7
 8006bdc:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8006be0:	ebc0 0803 	rsb	r8, r0, r3
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	f103 0301 	add.w	r3, r3, #1
 8006bea:	fba2 9003 	umull	r9, r0, r2, r3
 8006bee:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 8006bf2:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8006bf6:	ebc0 0003 	rsb	r0, r0, r3
 8006bfa:	f103 0301 	add.w	r3, r3, #1
 8006bfe:	d1e2      	bne.n	8006bc6 <_InitOnce.part.0+0x1b2>
 8006c00:	3501      	adds	r5, #1
 8006c02:	f1ba 0f02 	cmp.w	sl, #2
 8006c06:	f47f af1d 	bne.w	8006a44 <_InitOnce.part.0+0x30>
 8006c0a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8006c0e:	f248 0281 	movw	r2, #32897	; 0x8081
 8006c12:	4665      	mov	r5, ip
 8006c14:	f04f 0b00 	mov.w	fp, #0
 8006c18:	f2c8 0280 	movt	r2, #32896	; 0x8080
 8006c1c:	f1bc 0f00 	cmp.w	ip, #0
 8006c20:	f000 8185 	beq.w	8006f2e <_InitOnce.part.0+0x51a>
 8006c24:	fba2 a10b 	umull	sl, r1, r2, fp
 8006c28:	09cb      	lsrs	r3, r1, #7
 8006c2a:	ebc3 2003 	rsb	r0, r3, r3, lsl #8
 8006c2e:	46b2      	mov	sl, r6
 8006c30:	ebc0 010b 	rsb	r1, r0, fp
 8006c34:	ebc5 030b 	rsb	r3, r5, fp
 8006c38:	43d8      	mvns	r0, r3
 8006c3a:	f82a 1b02 	strh.w	r1, [sl], #2
 8006c3e:	f10b 0301 	add.w	r3, fp, #1
 8006c42:	f248 0981 	movw	r9, #32897	; 0x8081
 8006c46:	429d      	cmp	r5, r3
 8006c48:	f000 0101 	and.w	r1, r0, #1
 8006c4c:	f2c8 0980 	movt	r9, #32896	; 0x8080
 8006c50:	f10a 0802 	add.w	r8, sl, #2
 8006c54:	d02c      	beq.n	8006cb0 <_InitOnce.part.0+0x29c>
 8006c56:	b161      	cbz	r1, 8006c72 <_InitOnce.part.0+0x25e>
 8006c58:	fba2 a003 	umull	sl, r0, r2, r3
 8006c5c:	09c1      	lsrs	r1, r0, #7
 8006c5e:	ebc1 2001 	rsb	r0, r1, r1, lsl #8
 8006c62:	1a19      	subs	r1, r3, r0
 8006c64:	3301      	adds	r3, #1
 8006c66:	429d      	cmp	r5, r3
 8006c68:	f828 1c02 	strh.w	r1, [r8, #-2]
 8006c6c:	f108 0802 	add.w	r8, r8, #2
 8006c70:	d01e      	beq.n	8006cb0 <_InitOnce.part.0+0x29c>
 8006c72:	1c58      	adds	r0, r3, #1
 8006c74:	fba2 1a03 	umull	r1, sl, r2, r3
 8006c78:	fba2 1900 	umull	r1, r9, r2, r0
 8006c7c:	ea4f 1ada 	mov.w	sl, sl, lsr #7
 8006c80:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8006c84:	4641      	mov	r1, r8
 8006c86:	ebc9 2909 	rsb	r9, r9, r9, lsl #8
 8006c8a:	ebca 2a0a 	rsb	sl, sl, sl, lsl #8
 8006c8e:	ebca 0a03 	rsb	sl, sl, r3
 8006c92:	ebc9 0000 	rsb	r0, r9, r0
 8006c96:	f828 ac02 	strh.w	sl, [r8, #-2]
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	f821 0b02 	strh.w	r0, [r1], #2
 8006ca0:	f248 0981 	movw	r9, #32897	; 0x8081
 8006ca4:	429d      	cmp	r5, r3
 8006ca6:	f2c8 0980 	movt	r9, #32896	; 0x8080
 8006caa:	f101 0802 	add.w	r8, r1, #2
 8006cae:	d1e0      	bne.n	8006c72 <_InitOnce.part.0+0x25e>
 8006cb0:	fba9 310b 	umull	r3, r1, r9, fp
 8006cb4:	ea4f 13d1 	mov.w	r3, r1, lsr #7
 8006cb8:	ebc3 2903 	rsb	r9, r3, r3, lsl #8
 8006cbc:	ebc9 000b 	rsb	r0, r9, fp
 8006cc0:	8831      	ldrh	r1, [r6, #0]
 8006cc2:	b283      	uxth	r3, r0
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	f47f af28 	bne.w	8006b1a <_InitOnce.part.0+0x106>
 8006cca:	f10b 0b01 	add.w	fp, fp, #1
 8006cce:	ebcb 0005 	rsb	r0, fp, r5
 8006cd2:	07c0      	lsls	r0, r0, #31
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	d522      	bpl.n	8006d20 <_InitOnce.part.0+0x30c>
 8006cda:	fba2 030b 	umull	r0, r3, r2, fp
 8006cde:	09d8      	lsrs	r0, r3, #7
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	ebc0 2300 	rsb	r3, r0, r0, lsl #8
 8006ce6:	ebc3 000b 	rsb	r0, r3, fp
 8006cea:	f831 8f02 	ldrh.w	r8, [r1, #2]!
 8006cee:	b280      	uxth	r0, r0
 8006cf0:	4580      	cmp	r8, r0
 8006cf2:	f10b 0301 	add.w	r3, fp, #1
 8006cf6:	d013      	beq.n	8006d20 <_InitOnce.part.0+0x30c>
 8006cf8:	e70f      	b.n	8006b1a <_InitOnce.part.0+0x106>
 8006cfa:	bf00      	nop
 8006cfc:	1fffc940 	.word	0x1fffc940
 8006d00:	1fffdafc 	.word	0x1fffdafc
 8006d04:	080060b5 	.word	0x080060b5
 8006d08:	1fffc94c 	.word	0x1fffc94c
 8006d0c:	f831 9f02 	ldrh.w	r9, [r1, #2]!
 8006d10:	45c1      	cmp	r9, r8
 8006d12:	f47f af02 	bne.w	8006b1a <_InitOnce.part.0+0x106>
 8006d16:	f831 8f02 	ldrh.w	r8, [r1, #2]!
 8006d1a:	4580      	cmp	r8, r0
 8006d1c:	f47f aefd 	bne.w	8006b1a <_InitOnce.part.0+0x106>
 8006d20:	fba2 8003 	umull	r8, r0, r2, r3
 8006d24:	09c0      	lsrs	r0, r0, #7
 8006d26:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8006d2a:	ebc0 0803 	rsb	r8, r0, r3
 8006d2e:	429d      	cmp	r5, r3
 8006d30:	f103 0301 	add.w	r3, r3, #1
 8006d34:	fba2 9003 	umull	r9, r0, r2, r3
 8006d38:	ea4f 10d0 	mov.w	r0, r0, lsr #7
 8006d3c:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 8006d40:	ebc0 0003 	rsb	r0, r0, r3
 8006d44:	fa1f f888 	uxth.w	r8, r8
 8006d48:	b280      	uxth	r0, r0
 8006d4a:	f103 0301 	add.w	r3, r3, #1
 8006d4e:	d1dd      	bne.n	8006d0c <_InitOnce.part.0+0x2f8>
 8006d50:	3501      	adds	r5, #1
 8006d52:	f1bb 0f02 	cmp.w	fp, #2
 8006d56:	f47f af61 	bne.w	8006c1c <_InitOnce.part.0+0x208>
 8006d5a:	f248 0181 	movw	r1, #32897	; 0x8081
 8006d5e:	eb0e 0206 	add.w	r2, lr, r6
 8006d62:	2500      	movs	r5, #0
 8006d64:	f2c8 0180 	movt	r1, #32896	; 0x8080
 8006d68:	f102 3cff 	add.w	ip, r2, #4294967295
 8006d6c:	f1be 0f00 	cmp.w	lr, #0
 8006d70:	f000 80e5 	beq.w	8006f3e <_InitOnce.part.0+0x52a>
 8006d74:	43e8      	mvns	r0, r5
 8006d76:	eb05 0a0e 	add.w	sl, r5, lr
 8006d7a:	ebc5 0806 	rsb	r8, r5, r6
 8006d7e:	fba1 b905 	umull	fp, r9, r1, r5
 8006d82:	1c6b      	adds	r3, r5, #1
 8006d84:	eb00 020a 	add.w	r2, r0, sl
 8006d88:	eb05 19d9 	add.w	r9, r5, r9, lsr #7
 8006d8c:	f248 0081 	movw	r0, #32897	; 0x8081
 8006d90:	4553      	cmp	r3, sl
 8006d92:	f808 9005 	strb.w	r9, [r8, r5]
 8006d96:	f002 0201 	and.w	r2, r2, #1
 8006d9a:	f2c8 0080 	movt	r0, #32896	; 0x8080
 8006d9e:	d01d      	beq.n	8006ddc <_InitOnce.part.0+0x3c8>
 8006da0:	b142      	cbz	r2, 8006db4 <_InitOnce.part.0+0x3a0>
 8006da2:	fba1 b203 	umull	fp, r2, r1, r3
 8006da6:	eb03 12d2 	add.w	r2, r3, r2, lsr #7
 8006daa:	f808 2003 	strb.w	r2, [r8, r3]
 8006dae:	3301      	adds	r3, #1
 8006db0:	4553      	cmp	r3, sl
 8006db2:	d013      	beq.n	8006ddc <_InitOnce.part.0+0x3c8>
 8006db4:	fba1 9003 	umull	r9, r0, r1, r3
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	eb03 10d0 	add.w	r0, r3, r0, lsr #7
 8006dbe:	f808 0003 	strb.w	r0, [r8, r3]
 8006dc2:	fba1 b902 	umull	fp, r9, r1, r2
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	f248 0081 	movw	r0, #32897	; 0x8081
 8006dcc:	eb02 19d9 	add.w	r9, r2, r9, lsr #7
 8006dd0:	4553      	cmp	r3, sl
 8006dd2:	f808 9002 	strb.w	r9, [r8, r2]
 8006dd6:	f2c8 0080 	movt	r0, #32896	; 0x8080
 8006dda:	d1eb      	bne.n	8006db4 <_InitOnce.part.0+0x3a0>
 8006ddc:	fba0 2305 	umull	r2, r3, r0, r5
 8006de0:	eb05 10d3 	add.w	r0, r5, r3, lsr #7
 8006de4:	7832      	ldrb	r2, [r6, #0]
 8006de6:	f000 03ff 	and.w	r3, r0, #255	; 0xff
 8006dea:	429a      	cmp	r2, r3
 8006dec:	f47f ae95 	bne.w	8006b1a <_InitOnce.part.0+0x106>
 8006df0:	ebc6 020c 	rsb	r2, r6, ip
 8006df4:	07d2      	lsls	r2, r2, #31
 8006df6:	4633      	mov	r3, r6
 8006df8:	ebc6 0005 	rsb	r0, r6, r5
 8006dfc:	d528      	bpl.n	8006e50 <_InitOnce.part.0+0x43c>
 8006dfe:	4633      	mov	r3, r6
 8006e00:	f813 8f01 	ldrb.w	r8, [r3, #1]!
 8006e04:	18c2      	adds	r2, r0, r3
 8006e06:	fba1 b902 	umull	fp, r9, r1, r2
 8006e0a:	eb02 12d9 	add.w	r2, r2, r9, lsr #7
 8006e0e:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8006e12:	4590      	cmp	r8, r2
 8006e14:	f47f ae81 	bne.w	8006b1a <_InitOnce.part.0+0x106>
 8006e18:	4563      	cmp	r3, ip
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	d01b      	beq.n	8006e56 <_InitOnce.part.0+0x442>
 8006e1e:	f812 8f01 	ldrb.w	r8, [r2, #1]!
 8006e22:	4613      	mov	r3, r2
 8006e24:	1882      	adds	r2, r0, r2
 8006e26:	fba1 a902 	umull	sl, r9, r1, r2
 8006e2a:	eb02 12d9 	add.w	r2, r2, r9, lsr #7
 8006e2e:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8006e32:	4590      	cmp	r8, r2
 8006e34:	f47f ae71 	bne.w	8006b1a <_InitOnce.part.0+0x106>
 8006e38:	f813 8f01 	ldrb.w	r8, [r3, #1]!
 8006e3c:	18c2      	adds	r2, r0, r3
 8006e3e:	fba1 a902 	umull	sl, r9, r1, r2
 8006e42:	eb02 12d9 	add.w	r2, r2, r9, lsr #7
 8006e46:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8006e4a:	4590      	cmp	r8, r2
 8006e4c:	f47f ae65 	bne.w	8006b1a <_InitOnce.part.0+0x106>
 8006e50:	4563      	cmp	r3, ip
 8006e52:	461a      	mov	r2, r3
 8006e54:	d1e3      	bne.n	8006e1e <_InitOnce.part.0+0x40a>
 8006e56:	3501      	adds	r5, #1
 8006e58:	2d02      	cmp	r5, #2
 8006e5a:	d187      	bne.n	8006d6c <_InitOnce.part.0+0x358>
 8006e5c:	4271      	negs	r1, r6
 8006e5e:	f001 0003 	and.w	r0, r1, #3
 8006e62:	4570      	cmp	r0, lr
 8006e64:	bf28      	it	cs
 8006e66:	4670      	movcs	r0, lr
 8006e68:	f1be 0f03 	cmp.w	lr, #3
 8006e6c:	bf98      	it	ls
 8006e6e:	4670      	movls	r0, lr
 8006e70:	d860      	bhi.n	8006f34 <_InitOnce.part.0+0x520>
 8006e72:	4633      	mov	r3, r6
 8006e74:	2500      	movs	r5, #0
 8006e76:	2201      	movs	r2, #1
 8006e78:	f803 5b01 	strb.w	r5, [r3], #1
 8006e7c:	1e41      	subs	r1, r0, #1
 8006e7e:	4282      	cmp	r2, r0
 8006e80:	ea01 0102 	and.w	r1, r1, r2
 8006e84:	469b      	mov	fp, r3
 8006e86:	d20f      	bcs.n	8006ea8 <_InitOnce.part.0+0x494>
 8006e88:	b129      	cbz	r1, 8006e96 <_InitOnce.part.0+0x482>
 8006e8a:	f803 5b01 	strb.w	r5, [r3], #1
 8006e8e:	2202      	movs	r2, #2
 8006e90:	4282      	cmp	r2, r0
 8006e92:	469b      	mov	fp, r3
 8006e94:	d208      	bcs.n	8006ea8 <_InitOnce.part.0+0x494>
 8006e96:	4619      	mov	r1, r3
 8006e98:	3202      	adds	r2, #2
 8006e9a:	f801 5b01 	strb.w	r5, [r1], #1
 8006e9e:	705d      	strb	r5, [r3, #1]
 8006ea0:	1c4b      	adds	r3, r1, #1
 8006ea2:	4282      	cmp	r2, r0
 8006ea4:	469b      	mov	fp, r3
 8006ea6:	d3f6      	bcc.n	8006e96 <_InitOnce.part.0+0x482>
 8006ea8:	4586      	cmp	lr, r0
 8006eaa:	f43f ae36 	beq.w	8006b1a <_InitOnce.part.0+0x106>
 8006eae:	ebc0 090e 	rsb	r9, r0, lr
 8006eb2:	ea4f 0599 	mov.w	r5, r9, lsr #2
 8006eb6:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8006eba:	b1e5      	cbz	r5, 8006ef6 <_InitOnce.part.0+0x4e2>
 8006ebc:	1836      	adds	r6, r6, r0
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	1e6b      	subs	r3, r5, #1
 8006ec4:	42a9      	cmp	r1, r5
 8006ec6:	f846 0b04 	str.w	r0, [r6], #4
 8006eca:	ea03 0301 	and.w	r3, r3, r1
 8006ece:	d20d      	bcs.n	8006eec <_InitOnce.part.0+0x4d8>
 8006ed0:	b123      	cbz	r3, 8006edc <_InitOnce.part.0+0x4c8>
 8006ed2:	2102      	movs	r1, #2
 8006ed4:	42a9      	cmp	r1, r5
 8006ed6:	f846 0b04 	str.w	r0, [r6], #4
 8006eda:	d207      	bcs.n	8006eec <_InitOnce.part.0+0x4d8>
 8006edc:	4633      	mov	r3, r6
 8006ede:	3102      	adds	r1, #2
 8006ee0:	f843 0b04 	str.w	r0, [r3], #4
 8006ee4:	6070      	str	r0, [r6, #4]
 8006ee6:	1d1e      	adds	r6, r3, #4
 8006ee8:	42a9      	cmp	r1, r5
 8006eea:	d3f7      	bcc.n	8006edc <_InitOnce.part.0+0x4c8>
 8006eec:	45c1      	cmp	r9, r8
 8006eee:	44c3      	add	fp, r8
 8006ef0:	4442      	add	r2, r8
 8006ef2:	f43f ae12 	beq.w	8006b1a <_InitOnce.part.0+0x106>
 8006ef6:	43d5      	mvns	r5, r2
 8006ef8:	ebc2 010b 	rsb	r1, r2, fp
 8006efc:	1c53      	adds	r3, r2, #1
 8006efe:	2000      	movs	r0, #0
 8006f00:	4475      	add	r5, lr
 8006f02:	459e      	cmp	lr, r3
 8006f04:	5488      	strb	r0, [r1, r2]
 8006f06:	f005 0201 	and.w	r2, r5, #1
 8006f0a:	f67f ae06 	bls.w	8006b1a <_InitOnce.part.0+0x106>
 8006f0e:	b122      	cbz	r2, 8006f1a <_InitOnce.part.0+0x506>
 8006f10:	54c8      	strb	r0, [r1, r3]
 8006f12:	3301      	adds	r3, #1
 8006f14:	459e      	cmp	lr, r3
 8006f16:	f67f ae00 	bls.w	8006b1a <_InitOnce.part.0+0x106>
 8006f1a:	1c5d      	adds	r5, r3, #1
 8006f1c:	54c8      	strb	r0, [r1, r3]
 8006f1e:	3302      	adds	r3, #2
 8006f20:	459e      	cmp	lr, r3
 8006f22:	5548      	strb	r0, [r1, r5]
 8006f24:	d8f9      	bhi.n	8006f1a <_InitOnce.part.0+0x506>
 8006f26:	e5f8      	b.n	8006b1a <_InitOnce.part.0+0x106>
 8006f28:	f10a 0a01 	add.w	sl, sl, #1
 8006f2c:	e668      	b.n	8006c00 <_InitOnce.part.0+0x1ec>
 8006f2e:	f10b 0b01 	add.w	fp, fp, #1
 8006f32:	e70d      	b.n	8006d50 <_InitOnce.part.0+0x33c>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d19c      	bne.n	8006e72 <_InitOnce.part.0+0x45e>
 8006f38:	46b3      	mov	fp, r6
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	e7b7      	b.n	8006eae <_InitOnce.part.0+0x49a>
 8006f3e:	f1c5 0101 	rsb	r1, r5, #1
 8006f42:	3501      	adds	r5, #1
 8006f44:	2d02      	cmp	r5, #2
 8006f46:	f001 0301 	and.w	r3, r1, #1
 8006f4a:	f43f ade6 	beq.w	8006b1a <_InitOnce.part.0+0x106>
 8006f4e:	b11b      	cbz	r3, 8006f58 <_InitOnce.part.0+0x544>
 8006f50:	3501      	adds	r5, #1
 8006f52:	2d02      	cmp	r5, #2
 8006f54:	f43f ade1 	beq.w	8006b1a <_InitOnce.part.0+0x106>
 8006f58:	3502      	adds	r5, #2
 8006f5a:	2d02      	cmp	r5, #2
 8006f5c:	f43f addd 	beq.w	8006b1a <_InitOnce.part.0+0x106>
 8006f60:	e7fa      	b.n	8006f58 <_InitOnce.part.0+0x544>
 8006f62:	bf00      	nop

08006f64 <GUI_ALLOC_FreeFixedBlock>:
 8006f64:	b128      	cbz	r0, 8006f72 <GUI_ALLOC_FreeFixedBlock+0xe>
 8006f66:	4a03      	ldr	r2, [pc, #12]	; (8006f74 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8006f68:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006f6a:	6003      	str	r3, [r0, #0]
 8006f6c:	b103      	cbz	r3, 8006f70 <GUI_ALLOC_FreeFixedBlock+0xc>
 8006f6e:	6058      	str	r0, [r3, #4]
 8006f70:	63d0      	str	r0, [r2, #60]	; 0x3c
 8006f72:	4770      	bx	lr
 8006f74:	1fffdafc 	.word	0x1fffdafc

08006f78 <GUI_ALLOC_GetFixedBlock>:
 8006f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7c:	4e63      	ldr	r6, [pc, #396]	; (800710c <GUI_ALLOC_GetFixedBlock+0x194>)
 8006f7e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8006f82:	4605      	mov	r5, r0
 8006f84:	b90b      	cbnz	r3, 8006f8a <GUI_ALLOC_GetFixedBlock+0x12>
 8006f86:	f7ff fd45 	bl	8006a14 <_InitOnce.part.0>
 8006f8a:	1ce8      	adds	r0, r5, #3
 8006f8c:	f020 0103 	bic.w	r1, r0, #3
 8006f90:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8006f92:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8006f94:	1d0d      	adds	r5, r1, #4
 8006f96:	42a5      	cmp	r5, r4
 8006f98:	bf38      	it	cc
 8006f9a:	4625      	movcc	r5, r4
 8006f9c:	b160      	cbz	r0, 8006fb8 <GUI_ALLOC_GetFixedBlock+0x40>
 8006f9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006fa2:	429d      	cmp	r5, r3
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	d104      	bne.n	8006fb2 <GUI_ALLOC_GetFixedBlock+0x3a>
 8006fa8:	e014      	b.n	8006fd4 <GUI_ALLOC_GetFixedBlock+0x5c>
 8006faa:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006fae:	428d      	cmp	r5, r1
 8006fb0:	d010      	beq.n	8006fd4 <GUI_ALLOC_GetFixedBlock+0x5c>
 8006fb2:	6824      	ldr	r4, [r4, #0]
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d1f8      	bne.n	8006faa <GUI_ALLOC_GetFixedBlock+0x32>
 8006fb8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8006fba:	68f0      	ldr	r0, [r6, #12]
 8006fbc:	1814      	adds	r4, r2, r0
 8006fbe:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006fc2:	1a61      	subs	r1, r4, r1
 8006fc4:	680b      	ldr	r3, [r1, #0]
 8006fc6:	b9b3      	cbnz	r3, 8006ff6 <GUI_ALLOC_GetFixedBlock+0x7e>
 8006fc8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8006fcc:	4545      	cmp	r5, r8
 8006fce:	dd1d      	ble.n	800700c <GUI_ALLOC_GetFixedBlock+0x94>
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	e008      	b.n	8006fe6 <GUI_ALLOC_GetFixedBlock+0x6e>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	b10a      	cbz	r2, 8006fdc <GUI_ALLOC_GetFixedBlock+0x64>
 8006fd8:	6863      	ldr	r3, [r4, #4]
 8006fda:	6053      	str	r3, [r2, #4]
 8006fdc:	6861      	ldr	r1, [r4, #4]
 8006fde:	b101      	cbz	r1, 8006fe2 <GUI_ALLOC_GetFixedBlock+0x6a>
 8006fe0:	600a      	str	r2, [r1, #0]
 8006fe2:	42a0      	cmp	r0, r4
 8006fe4:	d002      	beq.n	8006fec <GUI_ALLOC_GetFixedBlock+0x74>
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	63f0      	str	r0, [r6, #60]	; 0x3c
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	f7ff fa22 	bl	8006440 <_RemoveHoles>
 8006ffc:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8007000:	1aa1      	subs	r1, r4, r2
 8007002:	6808      	ldr	r0, [r1, #0]
 8007004:	2800      	cmp	r0, #0
 8007006:	d0df      	beq.n	8006fc8 <GUI_ALLOC_GetFixedBlock+0x50>
 8007008:	2400      	movs	r4, #0
 800700a:	e7ec      	b.n	8006fe6 <GUI_ALLOC_GetFixedBlock+0x6e>
 800700c:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 8007010:	4b3e      	ldr	r3, [pc, #248]	; (800710c <GUI_ALLOC_GetFixedBlock+0x194>)
 8007012:	ebc5 0008 	rsb	r0, r5, r8
 8007016:	1d04      	adds	r4, r0, #4
 8007018:	45b8      	cmp	r8, r7
 800701a:	440c      	add	r4, r1
 800701c:	d274      	bcs.n	8007108 <GUI_ALLOC_GetFixedBlock+0x190>
 800701e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007022:	4590      	cmp	r8, r2
 8007024:	d26e      	bcs.n	8007104 <GUI_ALLOC_GetFixedBlock+0x18c>
 8007026:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 800702a:	45b8      	cmp	r8, r7
 800702c:	d268      	bcs.n	8007100 <GUI_ALLOC_GetFixedBlock+0x188>
 800702e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007032:	4590      	cmp	r8, r2
 8007034:	d262      	bcs.n	80070fc <GUI_ALLOC_GetFixedBlock+0x184>
 8007036:	f8d3 7098 	ldr.w	r7, [r3, #152]	; 0x98
 800703a:	45b8      	cmp	r8, r7
 800703c:	d25c      	bcs.n	80070f8 <GUI_ALLOC_GetFixedBlock+0x180>
 800703e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007042:	4590      	cmp	r8, r2
 8007044:	d256      	bcs.n	80070f4 <GUI_ALLOC_GetFixedBlock+0x17c>
 8007046:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 800704a:	45b8      	cmp	r8, r7
 800704c:	d250      	bcs.n	80070f0 <GUI_ALLOC_GetFixedBlock+0x178>
 800704e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007052:	4590      	cmp	r8, r2
 8007054:	d24a      	bcs.n	80070ec <GUI_ALLOC_GetFixedBlock+0x174>
 8007056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007058:	4598      	cmp	r8, r3
 800705a:	d245      	bcs.n	80070e8 <GUI_ALLOC_GetFixedBlock+0x170>
 800705c:	6f37      	ldr	r7, [r6, #112]	; 0x70
 800705e:	4a2b      	ldr	r2, [pc, #172]	; (800710c <GUI_ALLOC_GetFixedBlock+0x194>)
 8007060:	45b8      	cmp	r8, r7
 8007062:	d23f      	bcs.n	80070e4 <GUI_ALLOC_GetFixedBlock+0x16c>
 8007064:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8007066:	4598      	cmp	r8, r3
 8007068:	d23a      	bcs.n	80070e0 <GUI_ALLOC_GetFixedBlock+0x168>
 800706a:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800706c:	45b8      	cmp	r8, r7
 800706e:	d235      	bcs.n	80070dc <GUI_ALLOC_GetFixedBlock+0x164>
 8007070:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007072:	4598      	cmp	r8, r3
 8007074:	d230      	bcs.n	80070d8 <GUI_ALLOC_GetFixedBlock+0x160>
 8007076:	6d17      	ldr	r7, [r2, #80]	; 0x50
 8007078:	45b8      	cmp	r8, r7
 800707a:	d22b      	bcs.n	80070d4 <GUI_ALLOC_GetFixedBlock+0x15c>
 800707c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800707e:	4598      	cmp	r8, r3
 8007080:	d226      	bcs.n	80070d0 <GUI_ALLOC_GetFixedBlock+0x158>
 8007082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007084:	4590      	cmp	r8, r2
 8007086:	bf34      	ite	cc
 8007088:	f04f 32ff 	movcc.w	r2, #4294967295
 800708c:	2200      	movcs	r2, #0
 800708e:	6833      	ldr	r3, [r6, #0]
 8007090:	688f      	ldr	r7, [r1, #8]
 8007092:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8007096:	ebc8 0803 	rsb	r8, r8, r3
 800709a:	f8c6 8000 	str.w	r8, [r6]
 800709e:	b10f      	cbz	r7, 80070a4 <GUI_ALLOC_GetFixedBlock+0x12c>
 80070a0:	f8c7 c004 	str.w	ip, [r7, #4]
 80070a4:	f1bc 0f00 	cmp.w	ip, #0
 80070a8:	d00e      	beq.n	80070c8 <GUI_ALLOC_GetFixedBlock+0x150>
 80070aa:	f8cc 7000 	str.w	r7, [ip]
 80070ae:	68f2      	ldr	r2, [r6, #12]
 80070b0:	6973      	ldr	r3, [r6, #20]
 80070b2:	1b52      	subs	r2, r2, r5
 80070b4:	18eb      	adds	r3, r5, r3
 80070b6:	60f2      	str	r2, [r6, #12]
 80070b8:	6173      	str	r3, [r6, #20]
 80070ba:	b910      	cbnz	r0, 80070c2 <GUI_ALLOC_GetFixedBlock+0x14a>
 80070bc:	f844 5c04 	str.w	r5, [r4, #-4]
 80070c0:	e791      	b.n	8006fe6 <GUI_ALLOC_GetFixedBlock+0x6e>
 80070c2:	f7ff f815 	bl	80060f0 <_AddFreeMemory>
 80070c6:	e7f9      	b.n	80070bc <GUI_ALLOC_GetFixedBlock+0x144>
 80070c8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80070cc:	6457      	str	r7, [r2, #68]	; 0x44
 80070ce:	e7ee      	b.n	80070ae <GUI_ALLOC_GetFixedBlock+0x136>
 80070d0:	2201      	movs	r2, #1
 80070d2:	e7dc      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070d4:	2202      	movs	r2, #2
 80070d6:	e7da      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070d8:	2203      	movs	r2, #3
 80070da:	e7d8      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070dc:	2204      	movs	r2, #4
 80070de:	e7d6      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070e0:	2205      	movs	r2, #5
 80070e2:	e7d4      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070e4:	2206      	movs	r2, #6
 80070e6:	e7d2      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070e8:	2207      	movs	r2, #7
 80070ea:	e7d0      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070ec:	2208      	movs	r2, #8
 80070ee:	e7ce      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070f0:	2209      	movs	r2, #9
 80070f2:	e7cc      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070f4:	220a      	movs	r2, #10
 80070f6:	e7ca      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070f8:	220b      	movs	r2, #11
 80070fa:	e7c8      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 80070fc:	220c      	movs	r2, #12
 80070fe:	e7c6      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 8007100:	220d      	movs	r2, #13
 8007102:	e7c4      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 8007104:	220e      	movs	r2, #14
 8007106:	e7c2      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 8007108:	220f      	movs	r2, #15
 800710a:	e7c0      	b.n	800708e <GUI_ALLOC_GetFixedBlock+0x116>
 800710c:	1fffdafc 	.word	0x1fffdafc

08007110 <GUI_ALLOC_AllocNoInit>:
 8007110:	b900      	cbnz	r0, 8007114 <GUI_ALLOC_AllocNoInit+0x4>
 8007112:	4770      	bx	lr
 8007114:	f7ff ba82 	b.w	800661c <_Alloc>

08007118 <GUI_ALLOC_LockH>:
 8007118:	4a07      	ldr	r2, [pc, #28]	; (8007138 <GUI_ALLOC_LockH+0x20>)
 800711a:	69d1      	ldr	r1, [r2, #28]
 800711c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800711e:	3101      	adds	r1, #1
 8007120:	61d1      	str	r1, [r2, #28]
 8007122:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 8007126:	3201      	adds	r2, #1
 8007128:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 800712c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 8007130:	b108      	cbz	r0, 8007136 <GUI_ALLOC_LockH+0x1e>
 8007132:	6848      	ldr	r0, [r1, #4]
 8007134:	3008      	adds	r0, #8
 8007136:	4770      	bx	lr
 8007138:	1fffdafc 	.word	0x1fffdafc

0800713c <GUI_ALLOC_UnlockH>:
 800713c:	b430      	push	{r4, r5}
 800713e:	4602      	mov	r2, r0
 8007140:	4b0a      	ldr	r3, [pc, #40]	; (800716c <GUI_ALLOC_UnlockH+0x30>)
 8007142:	6800      	ldr	r0, [r0, #0]
 8007144:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007146:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800714a:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
 800714e:	2c01      	cmp	r4, #1
 8007150:	d903      	bls.n	800715a <GUI_ALLOC_UnlockH+0x1e>
 8007152:	69dd      	ldr	r5, [r3, #28]
 8007154:	b10d      	cbz	r5, 800715a <GUI_ALLOC_UnlockH+0x1e>
 8007156:	3d01      	subs	r5, #1
 8007158:	61dd      	str	r5, [r3, #28]
 800715a:	2300      	movs	r3, #0
 800715c:	3c01      	subs	r4, #1
 800715e:	f801 4030 	strb.w	r4, [r1, r0, lsl #3]
 8007162:	4618      	mov	r0, r3
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	bc30      	pop	{r4, r5}
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	1fffdafc 	.word	0x1fffdafc

08007170 <GUI_ALLOC_AssignMemory>:
 8007170:	f64c 1340 	movw	r3, #51520	; 0xc940
 8007174:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8007178:	f021 0103 	bic.w	r1, r1, #3
 800717c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop

08007184 <GUI_ALLOC_SetAvBlockSize>:
 8007184:	2810      	cmp	r0, #16
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <GUI_ALLOC_SetAvBlockSize+0x1c>)
 8007188:	d906      	bls.n	8007198 <GUI_ALLOC_SetAvBlockSize+0x14>
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	0851      	lsrs	r1, r2, #1
 800718e:	4288      	cmp	r0, r1
 8007190:	bf28      	it	cs
 8007192:	4608      	movcs	r0, r1
 8007194:	6098      	str	r0, [r3, #8]
 8007196:	4770      	bx	lr
 8007198:	2010      	movs	r0, #16
 800719a:	6098      	str	r0, [r3, #8]
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	1fffc940 	.word	0x1fffc940

080071a4 <GUI_ALLOC_Free>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4604      	mov	r4, r0
 80071a8:	b900      	cbnz	r0, 80071ac <GUI_ALLOC_Free+0x8>
 80071aa:	bd70      	pop	{r4, r5, r6, pc}
 80071ac:	4d0c      	ldr	r5, [pc, #48]	; (80071e0 <GUI_ALLOC_Free+0x3c>)
 80071ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80071b0:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 80071b4:	00c6      	lsls	r6, r0, #3
 80071b6:	1998      	adds	r0, r3, r6
 80071b8:	2a00      	cmp	r2, #0
 80071ba:	d0f6      	beq.n	80071aa <GUI_ALLOC_Free+0x6>
 80071bc:	2a01      	cmp	r2, #1
 80071be:	d8f4      	bhi.n	80071aa <GUI_ALLOC_Free+0x6>
 80071c0:	6841      	ldr	r1, [r0, #4]
 80071c2:	6848      	ldr	r0, [r1, #4]
 80071c4:	f7fe ff94 	bl	80060f0 <_AddFreeMemory>
 80071c8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80071ca:	6869      	ldr	r1, [r5, #4]
 80071cc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80071ce:	199e      	adds	r6, r3, r6
 80071d0:	1c48      	adds	r0, r1, #1
 80071d2:	2100      	movs	r1, #0
 80071d4:	6068      	str	r0, [r5, #4]
 80071d6:	6072      	str	r2, [r6, #4]
 80071d8:	f803 1034 	strb.w	r1, [r3, r4, lsl #3]
 80071dc:	626c      	str	r4, [r5, #36]	; 0x24
 80071de:	e7e4      	b.n	80071aa <GUI_ALLOC_Free+0x6>
 80071e0:	1fffdafc 	.word	0x1fffdafc

080071e4 <LCD_Index2Color_M565>:
 80071e4:	f24e 23c4 	movw	r3, #58052	; 0xe2c4
 80071e8:	b410      	push	{r4}
 80071ea:	f6c0 0300 	movt	r3, #2048	; 0x800
 80071ee:	f3c0 24c4 	ubfx	r4, r0, #11, #5
 80071f2:	f000 011f 	and.w	r1, r0, #31
 80071f6:	f24e 2284 	movw	r2, #57988	; 0xe284
 80071fa:	f3c0 1045 	ubfx	r0, r0, #5, #6
 80071fe:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007202:	5c59      	ldrb	r1, [r3, r1]
 8007204:	5d1b      	ldrb	r3, [r3, r4]
 8007206:	5c12      	ldrb	r2, [r2, r0]
 8007208:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 800720c:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8007210:	bc10      	pop	{r4}
 8007212:	4770      	bx	lr

08007214 <_Color2Index_M565>:
 8007214:	f24e 33e4 	movw	r3, #58340	; 0xe3e4
 8007218:	b410      	push	{r4}
 800721a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800721e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8007222:	b2c1      	uxtb	r1, r0
 8007224:	f24e 22e4 	movw	r2, #58084	; 0xe2e4
 8007228:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800722c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007230:	5c59      	ldrb	r1, [r3, r1]
 8007232:	5d1b      	ldrb	r3, [r3, r4]
 8007234:	5c12      	ldrb	r2, [r2, r0]
 8007236:	eb03 20c1 	add.w	r0, r3, r1, lsl #11
 800723a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800723e:	bc10      	pop	{r4}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop

08007244 <_GetIndexMask_M565>:
 8007244:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop

0800724c <_Color2IndexBulk>:
 800724c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007250:	4c35      	ldr	r4, [pc, #212]	; (8007328 <_Color2IndexBulk+0xdc>)
 8007252:	6824      	ldr	r4, [r4, #0]
 8007254:	460e      	mov	r6, r1
 8007256:	4615      	mov	r5, r2
 8007258:	461f      	mov	r7, r3
 800725a:	b114      	cbz	r4, 8007262 <_Color2IndexBulk+0x16>
 800725c:	47a0      	blx	r4
 800725e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007262:	f850 1b04 	ldr.w	r1, [r0], #4
 8007266:	4c31      	ldr	r4, [pc, #196]	; (800732c <_Color2IndexBulk+0xe0>)
 8007268:	4b31      	ldr	r3, [pc, #196]	; (8007330 <_Color2IndexBulk+0xe4>)
 800726a:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 800726e:	fa5f f881 	uxtb.w	r8, r1
 8007272:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8007276:	f814 1008 	ldrb.w	r1, [r4, r8]
 800727a:	f814 800c 	ldrb.w	r8, [r4, ip]
 800727e:	f813 c002 	ldrb.w	ip, [r3, r2]
 8007282:	1e6a      	subs	r2, r5, #1
 8007284:	eb08 25c1 	add.w	r5, r8, r1, lsl #11
 8007288:	eb05 114c 	add.w	r1, r5, ip, lsl #5
 800728c:	4615      	mov	r5, r2
 800728e:	8031      	strh	r1, [r6, #0]
 8007290:	f002 0201 	and.w	r2, r2, #1
 8007294:	19f1      	adds	r1, r6, r7
 8007296:	2d00      	cmp	r5, #0
 8007298:	d041      	beq.n	800731e <_Color2IndexBulk+0xd2>
 800729a:	b1a2      	cbz	r2, 80072c6 <_Color2IndexBulk+0x7a>
 800729c:	f850 6b04 	ldr.w	r6, [r0], #4
 80072a0:	fa5f f886 	uxtb.w	r8, r6
 80072a4:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80072a8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80072ac:	f814 2008 	ldrb.w	r2, [r4, r8]
 80072b0:	f814 c00c 	ldrb.w	ip, [r4, ip]
 80072b4:	5d9e      	ldrb	r6, [r3, r6]
 80072b6:	eb0c 22c2 	add.w	r2, ip, r2, lsl #11
 80072ba:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 80072be:	3d01      	subs	r5, #1
 80072c0:	800a      	strh	r2, [r1, #0]
 80072c2:	4439      	add	r1, r7
 80072c4:	d02d      	beq.n	8007322 <_Color2IndexBulk+0xd6>
 80072c6:	4602      	mov	r2, r0
 80072c8:	6840      	ldr	r0, [r0, #4]
 80072ca:	f852 6b04 	ldr.w	r6, [r2], #4
 80072ce:	fa5f f886 	uxtb.w	r8, r6
 80072d2:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 80072d6:	fa5f f980 	uxtb.w	r9, r0
 80072da:	f3c0 4c07 	ubfx	ip, r0, #16, #8
 80072de:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80072e2:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80072e6:	f814 8008 	ldrb.w	r8, [r4, r8]
 80072ea:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80072ee:	f814 000c 	ldrb.w	r0, [r4, ip]
 80072f2:	5d9e      	ldrb	r6, [r3, r6]
 80072f4:	f814 9009 	ldrb.w	r9, [r4, r9]
 80072f8:	f813 c00b 	ldrb.w	ip, [r3, fp]
 80072fc:	eb0a 28c8 	add.w	r8, sl, r8, lsl #11
 8007300:	eb00 29c9 	add.w	r9, r0, r9, lsl #11
 8007304:	eb08 1046 	add.w	r0, r8, r6, lsl #5
 8007308:	8008      	strh	r0, [r1, #0]
 800730a:	eb09 164c 	add.w	r6, r9, ip, lsl #5
 800730e:	1d10      	adds	r0, r2, #4
 8007310:	3d02      	subs	r5, #2
 8007312:	53ce      	strh	r6, [r1, r7]
 8007314:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8007318:	d1d5      	bne.n	80072c6 <_Color2IndexBulk+0x7a>
 800731a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007326:	bf00      	nop
 8007328:	1fffc954 	.word	0x1fffc954
 800732c:	0800e3e4 	.word	0x0800e3e4
 8007330:	0800e2e4 	.word	0x0800e2e4

08007334 <_Index2ColorBulk>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4c2a      	ldr	r4, [pc, #168]	; (80073e4 <_Index2ColorBulk+0xb0>)
 800733a:	6864      	ldr	r4, [r4, #4]
 800733c:	4607      	mov	r7, r0
 800733e:	460e      	mov	r6, r1
 8007340:	461d      	mov	r5, r3
 8007342:	b114      	cbz	r4, 800734a <_Index2ColorBulk+0x16>
 8007344:	47a0      	blx	r4
 8007346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734a:	f102 32ff 	add.w	r2, r2, #4294967295
 800734e:	fb02 0003 	mla	r0, r2, r3, r0
 8007352:	425b      	negs	r3, r3
 8007354:	07d5      	lsls	r5, r2, #31
 8007356:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800735a:	4c23      	ldr	r4, [pc, #140]	; (80073e8 <_Index2ColorBulk+0xb4>)
 800735c:	4e23      	ldr	r6, [pc, #140]	; (80073ec <_Index2ColorBulk+0xb8>)
 800735e:	d52a      	bpl.n	80073b6 <_Index2ColorBulk+0x82>
 8007360:	8805      	ldrh	r5, [r0, #0]
 8007362:	f005 081f 	and.w	r8, r5, #31
 8007366:	ea4f 2cd5 	mov.w	ip, r5, lsr #11
 800736a:	f3c5 1745 	ubfx	r7, r5, #5, #6
 800736e:	f814 5008 	ldrb.w	r5, [r4, r8]
 8007372:	f814 800c 	ldrb.w	r8, [r4, ip]
 8007376:	5df7      	ldrb	r7, [r6, r7]
 8007378:	eb08 4505 	add.w	r5, r8, r5, lsl #16
 800737c:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8007380:	f841 7904 	str.w	r7, [r1], #-4
 8007384:	18c0      	adds	r0, r0, r3
 8007386:	3a01      	subs	r2, #1
 8007388:	e015      	b.n	80073b6 <_Index2ColorBulk+0x82>
 800738a:	5ac0      	ldrh	r0, [r0, r3]
 800738c:	ea4f 28d0 	mov.w	r8, r0, lsr #11
 8007390:	f000 091f 	and.w	r9, r0, #31
 8007394:	f3c0 1c45 	ubfx	ip, r0, #5, #6
 8007398:	f814 8008 	ldrb.w	r8, [r4, r8]
 800739c:	f814 0009 	ldrb.w	r0, [r4, r9]
 80073a0:	f816 c00c 	ldrb.w	ip, [r6, ip]
 80073a4:	eb08 4000 	add.w	r0, r8, r0, lsl #16
 80073a8:	eb00 200c 	add.w	r0, r0, ip, lsl #8
 80073ac:	f841 0c04 	str.w	r0, [r1, #-4]
 80073b0:	3a02      	subs	r2, #2
 80073b2:	18f8      	adds	r0, r7, r3
 80073b4:	1f29      	subs	r1, r5, #4
 80073b6:	8805      	ldrh	r5, [r0, #0]
 80073b8:	f005 0c1f 	and.w	ip, r5, #31
 80073bc:	0aef      	lsrs	r7, r5, #11
 80073be:	f3c5 1545 	ubfx	r5, r5, #5, #6
 80073c2:	f814 800c 	ldrb.w	r8, [r4, ip]
 80073c6:	5de7      	ldrb	r7, [r4, r7]
 80073c8:	f816 c005 	ldrb.w	ip, [r6, r5]
 80073cc:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 80073d0:	460d      	mov	r5, r1
 80073d2:	eb07 270c 	add.w	r7, r7, ip, lsl #8
 80073d6:	f845 7904 	str.w	r7, [r5], #-4
 80073da:	18c7      	adds	r7, r0, r3
 80073dc:	2a00      	cmp	r2, #0
 80073de:	d1d4      	bne.n	800738a <_Index2ColorBulk+0x56>
 80073e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e4:	1fffc954 	.word	0x1fffc954
 80073e8:	0800e2c4 	.word	0x0800e2c4
 80073ec:	0800e284 	.word	0x0800e284

080073f0 <_GetDevData>:
 80073f0:	f24d 00bc 	movw	r0, #53436	; 0xd0bc
 80073f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80073f8:	2901      	cmp	r1, #1
 80073fa:	bf18      	it	ne
 80073fc:	2000      	movne	r0, #0
 80073fe:	4770      	bx	lr

08007400 <_GetDevFunc>:
 8007400:	f24a 204d 	movw	r0, #41549	; 0xa24d
 8007404:	f6c0 0000 	movt	r0, #2048	; 0x800
 8007408:	2916      	cmp	r1, #22
 800740a:	bf18      	it	ne
 800740c:	2000      	movne	r0, #0
 800740e:	4770      	bx	lr

08007410 <_SetOrg>:
 8007410:	6800      	ldr	r0, [r0, #0]
 8007412:	b508      	push	{r3, lr}
 8007414:	b110      	cbz	r0, 800741c <_SetOrg+0xc>
 8007416:	68c3      	ldr	r3, [r0, #12]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	4798      	blx	r3
 800741c:	bd08      	pop	{r3, pc}
 800741e:	bf00      	nop

08007420 <_GetDevProp>:
 8007420:	6800      	ldr	r0, [r0, #0]
 8007422:	b508      	push	{r3, lr}
 8007424:	b118      	cbz	r0, 800742e <_GetDevProp+0xe>
 8007426:	68c3      	ldr	r3, [r0, #12]
 8007428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800742a:	4790      	blx	r2
 800742c:	bd08      	pop	{r3, pc}
 800742e:	f04f 30ff 	mov.w	r0, #4294967295
 8007432:	bd08      	pop	{r3, pc}

08007434 <_GetRect>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	6880      	ldr	r0, [r0, #8]
 800743a:	460c      	mov	r4, r1
 800743c:	f7ff fe6c 	bl	8007118 <GUI_ALLOC_LockH>
 8007440:	4603      	mov	r3, r0
 8007442:	a802      	add	r0, sp, #8
 8007444:	8899      	ldrh	r1, [r3, #4]
 8007446:	88da      	ldrh	r2, [r3, #6]
 8007448:	891d      	ldrh	r5, [r3, #8]
 800744a:	895e      	ldrh	r6, [r3, #10]
 800744c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007450:	194d      	adds	r5, r1, r5
 8007452:	1993      	adds	r3, r2, r6
 8007454:	3d01      	subs	r5, #1
 8007456:	3b01      	subs	r3, #1
 8007458:	8021      	strh	r1, [r4, #0]
 800745a:	8062      	strh	r2, [r4, #2]
 800745c:	80a5      	strh	r5, [r4, #4]
 800745e:	80e3      	strh	r3, [r4, #6]
 8007460:	f7ff fe6c 	bl	800713c <GUI_ALLOC_UnlockH>
 8007464:	b002      	add	sp, #8
 8007466:	bd70      	pop	{r4, r5, r6, pc}

08007468 <_DrawBitmap>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	f64c 0608 	movw	r6, #51208	; 0xc808
 8007470:	f6c1 76ff 	movt	r6, #8191	; 0x1fff
 8007474:	b09f      	sub	sp, #124	; 0x7c
 8007476:	6834      	ldr	r4, [r6, #0]
 8007478:	9013      	str	r0, [sp, #76]	; 0x4c
 800747a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800747c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800747e:	930a      	str	r3, [sp, #40]	; 0x28
 8007480:	460c      	mov	r4, r1
 8007482:	4616      	mov	r6, r2
 8007484:	f7ff fe48 	bl	8007118 <GUI_ALLOC_LockH>
 8007488:	901b      	str	r0, [sp, #108]	; 0x6c
 800748a:	6940      	ldr	r0, [r0, #20]
 800748c:	2800      	cmp	r0, #0
 800748e:	f040 8291 	bne.w	80079b4 <_DrawBitmap+0x54c>
 8007492:	af1e      	add	r7, sp, #120	; 0x78
 8007494:	901c      	str	r0, [sp, #112]	; 0x70
 8007496:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800749a:	68d9      	ldr	r1, [r3, #12]
 800749c:	9711      	str	r7, [sp, #68]	; 0x44
 800749e:	4638      	mov	r0, r7
 80074a0:	910c      	str	r1, [sp, #48]	; 0x30
 80074a2:	f7ff fe4b 	bl	800713c <GUI_ALLOC_UnlockH>
 80074a6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80074a8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80074aa:	18a4      	adds	r4, r4, r2
 80074ac:	9409      	str	r4, [sp, #36]	; 0x24
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f000 87af 	beq.w	8008412 <_DrawBitmap+0xfaa>
 80074b4:	f64c 0e08 	movw	lr, #51208	; 0xc808
 80074b8:	f6c1 7eff 	movt	lr, #8191	; 0x1fff
 80074bc:	f8de 3000 	ldr.w	r3, [lr]
 80074c0:	7c1f      	ldrb	r7, [r3, #16]
 80074c2:	07bc      	lsls	r4, r7, #30
 80074c4:	f000 830c 	beq.w	8007ae0 <_DrawBitmap+0x678>
 80074c8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80074ca:	f7ff fe25 	bl	8007118 <GUI_ALLOC_LockH>
 80074ce:	4602      	mov	r2, r0
 80074d0:	a81e      	add	r0, sp, #120	; 0x78
 80074d2:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 80074d6:	68d1      	ldr	r1, [r2, #12]
 80074d8:	f9b2 9004 	ldrsh.w	r9, [r2, #4]
 80074dc:	f840 2d04 	str.w	r2, [r0, #-4]!
 80074e0:	f102 0718 	add.w	r7, r2, #24
 80074e4:	1b33      	subs	r3, r6, r4
 80074e6:	fb01 7203 	mla	r2, r1, r3, r7
 80074ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ec:	ebc9 0901 	rsb	r9, r9, r1
 80074f0:	eb02 0749 	add.w	r7, r2, r9, lsl #1
 80074f4:	9705      	str	r7, [sp, #20]
 80074f6:	f7ff fe21 	bl	800713c <GUI_ALLOC_UnlockH>
 80074fa:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 80074fc:	2f10      	cmp	r7, #16
 80074fe:	f000 825c 	beq.w	80079ba <_DrawBitmap+0x552>
 8007502:	2f17      	cmp	r7, #23
 8007504:	f340 8092 	ble.w	800762c <_DrawBitmap+0x1c4>
 8007508:	2d00      	cmp	r5, #0
 800750a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800750c:	f340 8087 	ble.w	800761e <_DrawBitmap+0x1b6>
 8007510:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 8007512:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8007516:	f107 0804 	add.w	r8, r7, #4
 800751a:	1975      	adds	r5, r6, r5
 800751c:	9506      	str	r5, [sp, #24]
 800751e:	f8cd 8010 	str.w	r8, [sp, #16]
 8007522:	9a04      	ldr	r2, [sp, #16]
 8007524:	2a04      	cmp	r2, #4
 8007526:	d06b      	beq.n	8007600 <_DrawBitmap+0x198>
 8007528:	9805      	ldr	r0, [sp, #20]
 800752a:	2800      	cmp	r0, #0
 800752c:	d068      	beq.n	8007600 <_DrawBitmap+0x198>
 800752e:	2c00      	cmp	r4, #0
 8007530:	f000 811a 	beq.w	8007768 <_DrawBitmap+0x300>
 8007534:	68a7      	ldr	r7, [r4, #8]
 8007536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007538:	687d      	ldr	r5, [r7, #4]
 800753a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800753c:	4632      	mov	r2, r6
 800753e:	4620      	mov	r0, r4
 8007540:	47a8      	blx	r5
 8007542:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007546:	f8dd b010 	ldr.w	fp, [sp, #16]
 800754a:	6811      	ldr	r1, [r2, #0]
 800754c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8007550:	4788      	blx	r1
 8007552:	9d05      	ldr	r5, [sp, #20]
 8007554:	68a3      	ldr	r3, [r4, #8]
 8007556:	f825 0b02 	strh.w	r0, [r5], #2
 800755a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007560:	f100 37ff 	add.w	r7, r0, #4294967295
 8007564:	4632      	mov	r2, r6
 8007566:	4620      	mov	r0, r4
 8007568:	4798      	blx	r3
 800756a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800756c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007570:	46ba      	mov	sl, r7
 8007572:	f007 0b01 	and.w	fp, r7, #1
 8007576:	f108 0804 	add.w	r8, r8, #4
 800757a:	1c57      	adds	r7, r2, #1
 800757c:	f1ba 0f00 	cmp.w	sl, #0
 8007580:	d03d      	beq.n	80075fe <_DrawBitmap+0x196>
 8007582:	f1bb 0f00 	cmp.w	fp, #0
 8007586:	d013      	beq.n	80075b0 <_DrawBitmap+0x148>
 8007588:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800758c:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8007590:	680b      	ldr	r3, [r1, #0]
 8007592:	4798      	blx	r3
 8007594:	68a2      	ldr	r2, [r4, #8]
 8007596:	f825 0b02 	strh.w	r0, [r5], #2
 800759a:	4639      	mov	r1, r7
 800759c:	6813      	ldr	r3, [r2, #0]
 800759e:	4620      	mov	r0, r4
 80075a0:	4632      	mov	r2, r6
 80075a2:	4798      	blx	r3
 80075a4:	3701      	adds	r7, #1
 80075a6:	f1ba 0a01 	subs.w	sl, sl, #1
 80075aa:	f108 0804 	add.w	r8, r8, #4
 80075ae:	d026      	beq.n	80075fe <_DrawBitmap+0x196>
 80075b0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80075b4:	f858 0c04 	ldr.w	r0, [r8, #-4]
 80075b8:	680a      	ldr	r2, [r1, #0]
 80075ba:	4790      	blx	r2
 80075bc:	46ab      	mov	fp, r5
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	f82b 0b02 	strh.w	r0, [fp], #2
 80075c4:	4639      	mov	r1, r7
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4632      	mov	r2, r6
 80075ca:	4620      	mov	r0, r4
 80075cc:	4798      	blx	r3
 80075ce:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80075d2:	f858 0b04 	ldr.w	r0, [r8], #4
 80075d6:	680a      	ldr	r2, [r1, #0]
 80075d8:	4790      	blx	r2
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	8068      	strh	r0, [r5, #2]
 80075de:	1c7d      	adds	r5, r7, #1
 80075e0:	4629      	mov	r1, r5
 80075e2:	681f      	ldr	r7, [r3, #0]
 80075e4:	4620      	mov	r0, r4
 80075e6:	4632      	mov	r2, r6
 80075e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ec:	47b8      	blx	r7
 80075ee:	1c6f      	adds	r7, r5, #1
 80075f0:	f1ba 0a01 	subs.w	sl, sl, #1
 80075f4:	f10b 0502 	add.w	r5, fp, #2
 80075f8:	f108 0804 	add.w	r8, r8, #4
 80075fc:	d1d8      	bne.n	80075b0 <_DrawBitmap+0x148>
 80075fe:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007600:	9805      	ldr	r0, [sp, #20]
 8007602:	f8dd e010 	ldr.w	lr, [sp, #16]
 8007606:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007608:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800760a:	9d06      	ldr	r5, [sp, #24]
 800760c:	3601      	adds	r6, #1
 800760e:	19c1      	adds	r1, r0, r7
 8007610:	eb0e 0c02 	add.w	ip, lr, r2
 8007614:	42ae      	cmp	r6, r5
 8007616:	9105      	str	r1, [sp, #20]
 8007618:	f8cd c010 	str.w	ip, [sp, #16]
 800761c:	d181      	bne.n	8007522 <_DrawBitmap+0xba>
 800761e:	b114      	cbz	r4, 8007626 <_DrawBitmap+0x1be>
 8007620:	a81c      	add	r0, sp, #112	; 0x70
 8007622:	f7ff fd8b 	bl	800713c <GUI_ALLOC_UnlockH>
 8007626:	b01f      	add	sp, #124	; 0x7c
 8007628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	2f08      	cmp	r7, #8
 800762e:	f000 86ff 	beq.w	8008430 <_DrawBitmap+0xfc8>
 8007632:	48a0      	ldr	r0, [pc, #640]	; (80078b4 <_DrawBitmap+0x44c>)
 8007634:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8007636:	2f00      	cmp	r7, #0
 8007638:	bf08      	it	eq
 800763a:	4607      	moveq	r7, r0
 800763c:	2d00      	cmp	r5, #0
 800763e:	970d      	str	r7, [sp, #52]	; 0x34
 8007640:	f340 8249 	ble.w	8007ad6 <_DrawBitmap+0x66e>
 8007644:	9604      	str	r6, [sp, #16]
 8007646:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8007648:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 800764a:	f8dd e010 	ldr.w	lr, [sp, #16]
 800764e:	0071      	lsls	r1, r6, #1
 8007650:	f1c6 0204 	rsb	r2, r6, #4
 8007654:	f1c6 0302 	rsb	r3, r6, #2
 8007658:	ea4f 0c86 	mov.w	ip, r6, lsl #2
 800765c:	9e05      	ldr	r6, [sp, #20]
 800765e:	9114      	str	r1, [sp, #80]	; 0x50
 8007660:	1c78      	adds	r0, r7, #1
 8007662:	1cb1      	adds	r1, r6, #2
 8007664:	4475      	add	r5, lr
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	b2db      	uxtb	r3, r3
 800766a:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800766e:	900e      	str	r0, [sp, #56]	; 0x38
 8007670:	910f      	str	r1, [sp, #60]	; 0x3c
 8007672:	9512      	str	r5, [sp, #72]	; 0x48
 8007674:	9216      	str	r2, [sp, #88]	; 0x58
 8007676:	9317      	str	r3, [sp, #92]	; 0x5c
 8007678:	e019      	b.n	80076ae <_DrawBitmap+0x246>
 800767a:	2804      	cmp	r0, #4
 800767c:	f000 811c 	beq.w	80078b8 <_DrawBitmap+0x450>
 8007680:	2801      	cmp	r0, #1
 8007682:	f000 80ab 	beq.w	80077dc <_DrawBitmap+0x374>
 8007686:	9804      	ldr	r0, [sp, #16]
 8007688:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 800768a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800768c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800768e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	198f      	adds	r7, r1, r6
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	972b      	str	r7, [sp, #172]	; 0xac
 8007698:	f8dd c010 	ldr.w	ip, [sp, #16]
 800769c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800769e:	19af      	adds	r7, r5, r6
 80076a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076a2:	970e      	str	r7, [sp, #56]	; 0x38
 80076a4:	1956      	adds	r6, r2, r5
 80076a6:	4584      	cmp	ip, r0
 80076a8:	960f      	str	r6, [sp, #60]	; 0x3c
 80076aa:	f000 8214 	beq.w	8007ad6 <_DrawBitmap+0x66e>
 80076ae:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80076b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80076b2:	2802      	cmp	r0, #2
 80076b4:	f1a7 0c02 	sub.w	ip, r7, #2
 80076b8:	d1df      	bne.n	800767a <_DrawBitmap+0x212>
 80076ba:	f64c 0408 	movw	r4, #51208	; 0xc808
 80076be:	f6c1 74ff 	movt	r4, #8191	; 0x1fff
 80076c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80076c4:	6820      	ldr	r0, [r4, #0]
 80076c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076ca:	7c03      	ldrb	r3, [r0, #16]
 80076cc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80076ce:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80076d0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80076d2:	f003 0103 	and.w	r1, r3, #3
 80076d6:	fa02 f206 	lsl.w	r2, r2, r6
 80076da:	2901      	cmp	r1, #1
 80076dc:	b2d5      	uxtb	r5, r2
 80076de:	f000 8640 	beq.w	8008362 <_DrawBitmap+0xefa>
 80076e2:	f080 8206 	bcs.w	8007af2 <_DrawBitmap+0x68a>
 80076e6:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 80076e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80076ea:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80076ee:	42b4      	cmp	r4, r6
 80076f0:	bfc8      	it	gt
 80076f2:	b2f4      	uxtbgt	r4, r6
 80076f4:	09a9      	lsrs	r1, r5, #6
 80076f6:	4663      	mov	r3, ip
 80076f8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80076fc:	1e60      	subs	r0, r4, #1
 80076fe:	00ad      	lsls	r5, r5, #2
 8007700:	f823 1b02 	strh.w	r1, [r3], #2
 8007704:	f000 0101 	and.w	r1, r0, #1
 8007708:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800770c:	ebc4 0606 	rsb	r6, r4, r6
 8007710:	b2ea      	uxtb	r2, r5
 8007712:	d01e      	beq.n	8007752 <_DrawBitmap+0x2ea>
 8007714:	b151      	cbz	r1, 800772c <_DrawBitmap+0x2c4>
 8007716:	0995      	lsrs	r5, r2, #6
 8007718:	3801      	subs	r0, #1
 800771a:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 800771e:	0092      	lsls	r2, r2, #2
 8007720:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8007724:	f823 1b02 	strh.w	r1, [r3], #2
 8007728:	b2d2      	uxtb	r2, r2
 800772a:	d012      	beq.n	8007752 <_DrawBitmap+0x2ea>
 800772c:	0995      	lsrs	r5, r2, #6
 800772e:	0091      	lsls	r1, r2, #2
 8007730:	b2ca      	uxtb	r2, r1
 8007732:	f858 9025 	ldr.w	r9, [r8, r5, lsl #2]
 8007736:	4619      	mov	r1, r3
 8007738:	0995      	lsrs	r5, r2, #6
 800773a:	f821 9b02 	strh.w	r9, [r1], #2
 800773e:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8007742:	3802      	subs	r0, #2
 8007744:	0092      	lsls	r2, r2, #2
 8007746:	805d      	strh	r5, [r3, #2]
 8007748:	1c8b      	adds	r3, r1, #2
 800774a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	d1ec      	bne.n	800772c <_DrawBitmap+0x2c4>
 8007752:	1e63      	subs	r3, r4, #1
 8007754:	b2d9      	uxtb	r1, r3
 8007756:	1c4d      	adds	r5, r1, #1
 8007758:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
 800775c:	2e00      	cmp	r6, #0
 800775e:	d092      	beq.n	8007686 <_DrawBitmap+0x21e>
 8007760:	f817 5f01 	ldrb.w	r5, [r7, #1]!
 8007764:	2404      	movs	r4, #4
 8007766:	e7c2      	b.n	80076ee <_DrawBitmap+0x286>
 8007768:	f8d9 4010 	ldr.w	r4, [r9, #16]
 800776c:	9d04      	ldr	r5, [sp, #16]
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8007774:	4788      	blx	r1
 8007776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007778:	9c05      	ldr	r4, [sp, #20]
 800777a:	1e5f      	subs	r7, r3, #1
 800777c:	46ba      	mov	sl, r7
 800777e:	f007 0201 	and.w	r2, r7, #1
 8007782:	f824 0b02 	strh.w	r0, [r4], #2
 8007786:	1d2f      	adds	r7, r5, #4
 8007788:	f1ba 0f00 	cmp.w	sl, #0
 800778c:	f43f af37 	beq.w	80075fe <_DrawBitmap+0x196>
 8007790:	b162      	cbz	r2, 80077ac <_DrawBitmap+0x344>
 8007792:	f8d9 5010 	ldr.w	r5, [r9, #16]
 8007796:	f857 0c04 	ldr.w	r0, [r7, #-4]
 800779a:	6829      	ldr	r1, [r5, #0]
 800779c:	4788      	blx	r1
 800779e:	3704      	adds	r7, #4
 80077a0:	f1ba 0a01 	subs.w	sl, sl, #1
 80077a4:	f824 0b02 	strh.w	r0, [r4], #2
 80077a8:	f43f af29 	beq.w	80075fe <_DrawBitmap+0x196>
 80077ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077b0:	f857 0c04 	ldr.w	r0, [r7, #-4]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4790      	blx	r2
 80077b8:	4625      	mov	r5, r4
 80077ba:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80077be:	f825 0b02 	strh.w	r0, [r5], #2
 80077c2:	680b      	ldr	r3, [r1, #0]
 80077c4:	f857 0b04 	ldr.w	r0, [r7], #4
 80077c8:	4798      	blx	r3
 80077ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077ce:	8060      	strh	r0, [r4, #2]
 80077d0:	3704      	adds	r7, #4
 80077d2:	1cac      	adds	r4, r5, #2
 80077d4:	f1ba 0a01 	subs.w	sl, sl, #1
 80077d8:	d1e8      	bne.n	80077ac <_DrawBitmap+0x344>
 80077da:	e710      	b.n	80075fe <_DrawBitmap+0x196>
 80077dc:	f64c 0408 	movw	r4, #51208	; 0xc808
 80077e0:	f6c1 74ff 	movt	r4, #8191	; 0x1fff
 80077e4:	f24e 1978 	movw	r9, #57720	; 0xe178
 80077e8:	6826      	ldr	r6, [r4, #0]
 80077ea:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80077ec:	f8cd c008 	str.w	ip, [sp, #8]
 80077f0:	f7ff fc92 	bl	8007118 <GUI_ALLOC_LockH>
 80077f4:	6821      	ldr	r1, [r4, #0]
 80077f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80077f8:	7c0b      	ldrb	r3, [r1, #16]
 80077fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077fe:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8007800:	901b      	str	r0, [sp, #108]	; 0x6c
 8007802:	f6c0 0900 	movt	r9, #2048	; 0x800
 8007806:	f003 0003 	and.w	r0, r3, #3
 800780a:	f819 4002 	ldrb.w	r4, [r9, r2]
 800780e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8007810:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007812:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007816:	2802      	cmp	r0, #2
 8007818:	f1c1 0908 	rsb	r9, r1, #8
 800781c:	fa44 f401 	asr.w	r4, r4, r1
 8007820:	f000 84e5 	beq.w	80081ee <_DrawBitmap+0xd86>
 8007824:	2803      	cmp	r0, #3
 8007826:	f000 83d7 	beq.w	8007fd8 <_DrawBitmap+0xb70>
 800782a:	2801      	cmp	r0, #1
 800782c:	f000 83d4 	beq.w	8007fd8 <_DrawBitmap+0xb70>
 8007830:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8007832:	46a8      	mov	r8, r5
 8007834:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007836:	46ce      	mov	lr, r9
 8007838:	4637      	mov	r7, r6
 800783a:	f004 0601 	and.w	r6, r4, #1
 800783e:	4577      	cmp	r7, lr
 8007840:	bf38      	it	cc
 8007842:	46be      	movcc	lr, r7
 8007844:	f10e 33ff 	add.w	r3, lr, #4294967295
 8007848:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800784c:	4662      	mov	r2, ip
 800784e:	4619      	mov	r1, r3
 8007850:	f003 0601 	and.w	r6, r3, #1
 8007854:	ebce 0707 	rsb	r7, lr, r7
 8007858:	f822 0b02 	strh.w	r0, [r2], #2
 800785c:	0863      	lsrs	r3, r4, #1
 800785e:	b1c9      	cbz	r1, 8007894 <_DrawBitmap+0x42c>
 8007860:	b146      	cbz	r6, 8007874 <_DrawBitmap+0x40c>
 8007862:	f003 0001 	and.w	r0, r3, #1
 8007866:	08a3      	lsrs	r3, r4, #2
 8007868:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
 800786c:	3901      	subs	r1, #1
 800786e:	f822 6b02 	strh.w	r6, [r2], #2
 8007872:	d00f      	beq.n	8007894 <_DrawBitmap+0x42c>
 8007874:	f003 0401 	and.w	r4, r3, #1
 8007878:	4610      	mov	r0, r2
 800787a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 800787e:	f3c3 0440 	ubfx	r4, r3, #1, #1
 8007882:	f820 6b02 	strh.w	r6, [r0], #2
 8007886:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 800788a:	089b      	lsrs	r3, r3, #2
 800788c:	8054      	strh	r4, [r2, #2]
 800788e:	1c82      	adds	r2, r0, #2
 8007890:	3902      	subs	r1, #2
 8007892:	d1ef      	bne.n	8007874 <_DrawBitmap+0x40c>
 8007894:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
 8007898:	2f00      	cmp	r7, #0
 800789a:	f000 8087 	beq.w	80079ac <_DrawBitmap+0x544>
 800789e:	f24e 1378 	movw	r3, #57720	; 0xe178
 80078a2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80078a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80078aa:	f04f 0e08 	mov.w	lr, #8
 80078ae:	5c9c      	ldrb	r4, [r3, r2]
 80078b0:	e7c3      	b.n	800783a <_DrawBitmap+0x3d2>
 80078b2:	bf00      	nop
 80078b4:	0800d0f0 	.word	0x0800d0f0
 80078b8:	f64c 0508 	movw	r5, #51208	; 0xc808
 80078bc:	f6c1 75ff 	movt	r5, #8191	; 0x1fff
 80078c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80078c2:	6828      	ldr	r0, [r5, #0]
 80078c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80078c6:	7c03      	ldrb	r3, [r0, #16]
 80078c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078cc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80078d0:	f003 0603 	and.w	r6, r3, #3
 80078d4:	fa02 f201 	lsl.w	r2, r2, r1
 80078d8:	2e01      	cmp	r6, #1
 80078da:	fa5f f982 	uxtb.w	r9, r2
 80078de:	f000 832d 	beq.w	8007f3c <_DrawBitmap+0xad4>
 80078e2:	f080 8205 	bcs.w	8007cf0 <_DrawBitmap+0x888>
 80078e6:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 80078e8:	2f00      	cmp	r7, #0
 80078ea:	f040 8315 	bne.w	8007f18 <_DrawBitmap+0xab0>
 80078ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078f0:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80078f2:	2901      	cmp	r1, #1
 80078f4:	dd4f      	ble.n	8007996 <_DrawBitmap+0x52e>
 80078f6:	ea4f 1419 	mov.w	r4, r9, lsr #4
 80078fa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80078fc:	4662      	mov	r2, ip
 80078fe:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8007902:	f009 090f 	and.w	r9, r9, #15
 8007906:	f822 3b04 	strh.w	r3, [r2], #4
 800790a:	f857 0029 	ldr.w	r0, [r7, r9, lsl #2]
 800790e:	462b      	mov	r3, r5
 8007910:	f822 0c02 	strh.w	r0, [r2, #-2]
 8007914:	104e      	asrs	r6, r1, #1
 8007916:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 800791a:	19a8      	adds	r0, r5, r6
 800791c:	43ed      	mvns	r5, r5
 800791e:	182c      	adds	r4, r5, r0
 8007920:	3204      	adds	r2, #4
 8007922:	4283      	cmp	r3, r0
 8007924:	f001 0101 	and.w	r1, r1, #1
 8007928:	f004 0401 	and.w	r4, r4, #1
 800792c:	d031      	beq.n	8007992 <_DrawBitmap+0x52a>
 800792e:	b18c      	cbz	r4, 8007954 <_DrawBitmap+0x4ec>
 8007930:	ea4f 1719 	mov.w	r7, r9, lsr #4
 8007934:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007936:	f009 090f 	and.w	r9, r9, #15
 800793a:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800793e:	f855 7029 	ldr.w	r7, [r5, r9, lsl #2]
 8007942:	f822 4c04 	strh.w	r4, [r2, #-4]
 8007946:	f822 7c02 	strh.w	r7, [r2, #-2]
 800794a:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 800794e:	3204      	adds	r2, #4
 8007950:	4283      	cmp	r3, r0
 8007952:	d01e      	beq.n	8007992 <_DrawBitmap+0x52a>
 8007954:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007956:	ea4f 1519 	mov.w	r5, r9, lsr #4
 800795a:	f009 090f 	and.w	r9, r9, #15
 800795e:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 8007962:	f854 5029 	ldr.w	r5, [r4, r9, lsl #2]
 8007966:	f822 7c04 	strh.w	r7, [r2, #-4]
 800796a:	f822 5c02 	strh.w	r5, [r2, #-2]
 800796e:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8007972:	092f      	lsrs	r7, r5, #4
 8007974:	f005 050f 	and.w	r5, r5, #15
 8007978:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800797c:	f822 7b04 	strh.w	r7, [r2], #4
 8007980:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
 8007984:	f822 7c02 	strh.w	r7, [r2, #-2]
 8007988:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 800798c:	3204      	adds	r2, #4
 800798e:	4283      	cmp	r3, r0
 8007990:	d1e1      	bne.n	8007956 <_DrawBitmap+0x4ee>
 8007992:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
 8007996:	2900      	cmp	r1, #0
 8007998:	f43f ae75 	beq.w	8007686 <_DrawBitmap+0x21e>
 800799c:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80079a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a2:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80079a6:	f8ac 0000 	strh.w	r0, [ip]
 80079aa:	e66c      	b.n	8007686 <_DrawBitmap+0x21e>
 80079ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80079ae:	f7ff fbc5 	bl	800713c <GUI_ALLOC_UnlockH>
 80079b2:	e668      	b.n	8007686 <_DrawBitmap+0x21e>
 80079b4:	f7ff fbb0 	bl	8007118 <GUI_ALLOC_LockH>
 80079b8:	e56b      	b.n	8007492 <_DrawBitmap+0x2a>
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	f340 8786 	ble.w	80088cc <_DrawBitmap+0x1464>
 80079c0:	43f4      	mvns	r4, r6
 80079c2:	19ad      	adds	r5, r5, r6
 80079c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80079c8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80079ca:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80079ce:	1963      	adds	r3, r4, r5
 80079d0:	f003 0701 	and.w	r7, r3, #1
 80079d4:	ea4f 0449 	mov.w	r4, r9, lsl #1
 80079d8:	b1a0      	cbz	r0, 8007a04 <_DrawBitmap+0x59c>
 80079da:	9805      	ldr	r0, [sp, #20]
 80079dc:	b190      	cbz	r0, 8007a04 <_DrawBitmap+0x59c>
 80079de:	992b      	ldr	r1, [sp, #172]	; 0xac
 80079e0:	4622      	mov	r2, r4
 80079e2:	f003 fe81 	bl	800b6e8 <memcpy>
 80079e6:	f1ba 0f00 	cmp.w	sl, #0
 80079ea:	f000 8767 	beq.w	80088bc <_DrawBitmap+0x1454>
 80079ee:	f8da 1008 	ldr.w	r1, [sl, #8]
 80079f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80079f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079fa:	4650      	mov	r0, sl
 80079fc:	4632      	mov	r2, r6
 80079fe:	47c0      	blx	r8
 8007a00:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8007a04:	f106 0801 	add.w	r8, r6, #1
 8007a08:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007a0a:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a10:	45a8      	cmp	r8, r5
 8007a12:	4416      	add	r6, r2
 8007a14:	eb03 0900 	add.w	r9, r3, r0
 8007a18:	d058      	beq.n	8007acc <_DrawBitmap+0x664>
 8007a1a:	2f00      	cmp	r7, #0
 8007a1c:	f000 8504 	beq.w	8008428 <_DrawBitmap+0xfc0>
 8007a20:	b1ae      	cbz	r6, 8007a4e <_DrawBitmap+0x5e6>
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	d012      	beq.n	8007a4e <_DrawBitmap+0x5e6>
 8007a28:	4648      	mov	r0, r9
 8007a2a:	4631      	mov	r1, r6
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	f003 fe5b 	bl	800b6e8 <memcpy>
 8007a32:	f1ba 0f00 	cmp.w	sl, #0
 8007a36:	f000 8745 	beq.w	80088c4 <_DrawBitmap+0x145c>
 8007a3a:	f8da 7008 	ldr.w	r7, [sl, #8]
 8007a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a40:	687f      	ldr	r7, [r7, #4]
 8007a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a44:	4650      	mov	r0, sl
 8007a46:	4642      	mov	r2, r8
 8007a48:	47b8      	blx	r7
 8007a4a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8007a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a50:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8007a52:	f108 0801 	add.w	r8, r8, #1
 8007a56:	45a8      	cmp	r8, r5
 8007a58:	440e      	add	r6, r1
 8007a5a:	4491      	add	r9, r2
 8007a5c:	bf18      	it	ne
 8007a5e:	4693      	movne	fp, r2
 8007a60:	d034      	beq.n	8007acc <_DrawBitmap+0x664>
 8007a62:	4643      	mov	r3, r8
 8007a64:	464f      	mov	r7, r9
 8007a66:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
 8007a6a:	46a8      	mov	r8, r5
 8007a6c:	4655      	mov	r5, sl
 8007a6e:	469a      	mov	sl, r3
 8007a70:	b176      	cbz	r6, 8007a90 <_DrawBitmap+0x628>
 8007a72:	b16f      	cbz	r7, 8007a90 <_DrawBitmap+0x628>
 8007a74:	4638      	mov	r0, r7
 8007a76:	4631      	mov	r1, r6
 8007a78:	4622      	mov	r2, r4
 8007a7a:	f003 fe35 	bl	800b6e8 <memcpy>
 8007a7e:	b135      	cbz	r5, 8007a8e <_DrawBitmap+0x626>
 8007a80:	68a9      	ldr	r1, [r5, #8]
 8007a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a84:	4628      	mov	r0, r5
 8007a86:	4652      	mov	r2, sl
 8007a88:	684d      	ldr	r5, [r1, #4]
 8007a8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a8c:	47a8      	blx	r5
 8007a8e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007a90:	eb16 0609 	adds.w	r6, r6, r9
 8007a94:	445f      	add	r7, fp
 8007a96:	f10a 0a01 	add.w	sl, sl, #1
 8007a9a:	d010      	beq.n	8007abe <_DrawBitmap+0x656>
 8007a9c:	b17f      	cbz	r7, 8007abe <_DrawBitmap+0x656>
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	f003 fe20 	bl	800b6e8 <memcpy>
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	f000 8245 	beq.w	8007f38 <_DrawBitmap+0xad0>
 8007aae:	68aa      	ldr	r2, [r5, #8]
 8007ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	6855      	ldr	r5, [r2, #4]
 8007ab8:	4652      	mov	r2, sl
 8007aba:	47a8      	blx	r5
 8007abc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007abe:	f10a 0a01 	add.w	sl, sl, #1
 8007ac2:	45c2      	cmp	sl, r8
 8007ac4:	444e      	add	r6, r9
 8007ac6:	445f      	add	r7, fp
 8007ac8:	d1d2      	bne.n	8007a70 <_DrawBitmap+0x608>
 8007aca:	46aa      	mov	sl, r5
 8007acc:	f1ba 0f00 	cmp.w	sl, #0
 8007ad0:	f47f ada6 	bne.w	8007620 <_DrawBitmap+0x1b8>
 8007ad4:	e5a7      	b.n	8007626 <_DrawBitmap+0x1be>
 8007ad6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f47f ada1 	bne.w	8007620 <_DrawBitmap+0x1b8>
 8007ade:	e5a2      	b.n	8007626 <_DrawBitmap+0x1be>
 8007ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae2:	9500      	str	r5, [sp, #0]
 8007ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	f003 fb46 	bl	800b178 <GUI_USAGE_AddRect>
 8007aec:	487f      	ldr	r0, [pc, #508]	; (8007cec <_DrawBitmap+0x884>)
 8007aee:	6803      	ldr	r3, [r0, #0]
 8007af0:	e4ea      	b.n	80074c8 <_DrawBitmap+0x60>
 8007af2:	2902      	cmp	r1, #2
 8007af4:	f47f adc7 	bne.w	8007686 <_DrawBitmap+0x21e>
 8007af8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007afc:	982b      	ldr	r0, [sp, #172]	; 0xac
 8007afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b00:	9007      	str	r0, [sp, #28]
 8007b02:	4554      	cmp	r4, sl
 8007b04:	bfc8      	it	gt
 8007b06:	fa5f f48a 	uxtbgt.w	r4, sl
 8007b0a:	9205      	str	r2, [sp, #20]
 8007b0c:	f8cd c018 	str.w	ip, [sp, #24]
 8007b10:	ebc4 0a0a 	rsb	sl, r4, sl
 8007b14:	2f00      	cmp	r7, #0
 8007b16:	f000 8096 	beq.w	8007c46 <_DrawBitmap+0x7de>
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	f104 3bff 	add.w	fp, r4, #4294967295
 8007b20:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007b24:	f103 0802 	add.w	r8, r3, #2
 8007b28:	f00b 0b01 	and.w	fp, fp, #1
 8007b2c:	d00b      	beq.n	8007b46 <_DrawBitmap+0x6de>
 8007b2e:	09a9      	lsrs	r1, r5, #6
 8007b30:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007b32:	68b8      	ldr	r0, [r7, #8]
 8007b34:	f856 2021 	ldr.w	r2, [r6, r1, lsl #2]
 8007b38:	6803      	ldr	r3, [r0, #0]
 8007b3a:	9905      	ldr	r1, [sp, #20]
 8007b3c:	f828 2c02 	strh.w	r2, [r8, #-2]
 8007b40:	4638      	mov	r0, r7
 8007b42:	9a04      	ldr	r2, [sp, #16]
 8007b44:	4798      	blx	r3
 8007b46:	9905      	ldr	r1, [sp, #20]
 8007b48:	f104 3cff 	add.w	ip, r4, #4294967295
 8007b4c:	00ad      	lsls	r5, r5, #2
 8007b4e:	1c4e      	adds	r6, r1, #1
 8007b50:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8007b54:	b2ed      	uxtb	r5, r5
 8007b56:	f108 0802 	add.w	r8, r8, #2
 8007b5a:	d057      	beq.n	8007c0c <_DrawBitmap+0x7a4>
 8007b5c:	f1bb 0f00 	cmp.w	fp, #0
 8007b60:	d019      	beq.n	8007b96 <_DrawBitmap+0x72e>
 8007b62:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007b66:	d00c      	beq.n	8007b82 <_DrawBitmap+0x71a>
 8007b68:	09a8      	lsrs	r0, r5, #6
 8007b6a:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f85e 2020 	ldr.w	r2, [lr, r0, lsl #2]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f828 2c02 	strh.w	r2, [r8, #-2]
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	4798      	blx	r3
 8007b82:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b86:	00ad      	lsls	r5, r5, #2
 8007b88:	3601      	adds	r6, #1
 8007b8a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8007b8e:	b2ed      	uxtb	r5, r5
 8007b90:	f108 0802 	add.w	r8, r8, #2
 8007b94:	d03a      	beq.n	8007c0c <_DrawBitmap+0x7a4>
 8007b96:	4631      	mov	r1, r6
 8007b98:	9e04      	ldr	r6, [sp, #16]
 8007b9a:	9410      	str	r4, [sp, #64]	; 0x40
 8007b9c:	464c      	mov	r4, r9
 8007b9e:	09ab      	lsrs	r3, r5, #6
 8007ba0:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007ba4:	f101 0901 	add.w	r9, r1, #1
 8007ba8:	f108 0b02 	add.w	fp, r8, #2
 8007bac:	4638      	mov	r0, r7
 8007bae:	4632      	mov	r2, r6
 8007bb0:	d00a      	beq.n	8007bc8 <_DrawBitmap+0x760>
 8007bb2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8007bb6:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8007bba:	f828 ec02 	strh.w	lr, [r8, #-2]
 8007bbe:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8007bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007bc6:	4798      	blx	r3
 8007bc8:	00a9      	lsls	r1, r5, #2
 8007bca:	b2cd      	uxtb	r5, r1
 8007bcc:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bd0:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007bd4:	fa5f f884 	uxtb.w	r8, r4
 8007bd8:	d00c      	beq.n	8007bf4 <_DrawBitmap+0x78c>
 8007bda:	09a8      	lsrs	r0, r5, #6
 8007bdc:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 8007be6:	681c      	ldr	r4, [r3, #0]
 8007be8:	f82b 2c02 	strh.w	r2, [fp, #-2]
 8007bec:	4638      	mov	r0, r7
 8007bee:	4649      	mov	r1, r9
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	47a0      	blx	r4
 8007bf4:	f108 30ff 	add.w	r0, r8, #4294967295
 8007bf8:	00ad      	lsls	r5, r5, #2
 8007bfa:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8007bfe:	f109 0101 	add.w	r1, r9, #1
 8007c02:	b2ed      	uxtb	r5, r5
 8007c04:	f10b 0802 	add.w	r8, fp, #2
 8007c08:	d1c9      	bne.n	8007b9e <_DrawBitmap+0x736>
 8007c0a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007c0c:	1e66      	subs	r6, r4, #1
 8007c0e:	9b05      	ldr	r3, [sp, #20]
 8007c10:	9806      	ldr	r0, [sp, #24]
 8007c12:	b2f4      	uxtb	r4, r6
 8007c14:	1c61      	adds	r1, r4, #1
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 8007c1c:	1916      	adds	r6, r2, r4
 8007c1e:	9506      	str	r5, [sp, #24]
 8007c20:	9605      	str	r6, [sp, #20]
 8007c22:	f1ba 0f00 	cmp.w	sl, #0
 8007c26:	f43f ad2e 	beq.w	8007686 <_DrawBitmap+0x21e>
 8007c2a:	9c07      	ldr	r4, [sp, #28]
 8007c2c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8007c30:	9407      	str	r4, [sp, #28]
 8007c32:	2404      	movs	r4, #4
 8007c34:	4554      	cmp	r4, sl
 8007c36:	bfc8      	it	gt
 8007c38:	fa5f f48a 	uxtbgt.w	r4, sl
 8007c3c:	ebc4 0a0a 	rsb	sl, r4, sl
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	f47f af6a 	bne.w	8007b1a <_DrawBitmap+0x6b2>
 8007c46:	9b06      	ldr	r3, [sp, #24]
 8007c48:	1e61      	subs	r1, r4, #1
 8007c4a:	1c98      	adds	r0, r3, #2
 8007c4c:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007c50:	f001 0101 	and.w	r1, r1, #1
 8007c54:	d005      	beq.n	8007c62 <_DrawBitmap+0x7fa>
 8007c56:	09aa      	lsrs	r2, r5, #6
 8007c58:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007c5a:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 8007c5e:	f820 3c02 	strh.w	r3, [r0, #-2]
 8007c62:	1e62      	subs	r2, r4, #1
 8007c64:	00ad      	lsls	r5, r5, #2
 8007c66:	1c83      	adds	r3, r0, #2
 8007c68:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007c6c:	b2ed      	uxtb	r5, r5
 8007c6e:	d031      	beq.n	8007cd4 <_DrawBitmap+0x86c>
 8007c70:	b181      	cbz	r1, 8007c94 <_DrawBitmap+0x82c>
 8007c72:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007c76:	d006      	beq.n	8007c86 <_DrawBitmap+0x81e>
 8007c78:	09a8      	lsrs	r0, r5, #6
 8007c7a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8007c7e:	f85c 1020 	ldr.w	r1, [ip, r0, lsl #2]
 8007c82:	f823 1c02 	strh.w	r1, [r3, #-2]
 8007c86:	3a01      	subs	r2, #1
 8007c88:	00ae      	lsls	r6, r5, #2
 8007c8a:	3302      	adds	r3, #2
 8007c8c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007c90:	b2f5      	uxtb	r5, r6
 8007c92:	d01f      	beq.n	8007cd4 <_DrawBitmap+0x86c>
 8007c94:	00a8      	lsls	r0, r5, #2
 8007c96:	3a01      	subs	r2, #1
 8007c98:	09ae      	lsrs	r6, r5, #6
 8007c9a:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8007c9e:	b2c1      	uxtb	r1, r0
 8007ca0:	b2d2      	uxtb	r2, r2
 8007ca2:	f103 0002 	add.w	r0, r3, #2
 8007ca6:	d005      	beq.n	8007cb4 <_DrawBitmap+0x84c>
 8007ca8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8007cac:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 8007cb0:	f823 5c02 	strh.w	r5, [r3, #-2]
 8007cb4:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8007cb8:	d005      	beq.n	8007cc6 <_DrawBitmap+0x85e>
 8007cba:	098b      	lsrs	r3, r1, #6
 8007cbc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007cbe:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
 8007cc2:	f820 5c02 	strh.w	r5, [r0, #-2]
 8007cc6:	3a01      	subs	r2, #1
 8007cc8:	0089      	lsls	r1, r1, #2
 8007cca:	1c83      	adds	r3, r0, #2
 8007ccc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007cd0:	b2cd      	uxtb	r5, r1
 8007cd2:	d1df      	bne.n	8007c94 <_DrawBitmap+0x82c>
 8007cd4:	1e60      	subs	r0, r4, #1
 8007cd6:	9d05      	ldr	r5, [sp, #20]
 8007cd8:	9a06      	ldr	r2, [sp, #24]
 8007cda:	b2c6      	uxtb	r6, r0
 8007cdc:	1c71      	adds	r1, r6, #1
 8007cde:	1c6b      	adds	r3, r5, #1
 8007ce0:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8007ce4:	199e      	adds	r6, r3, r6
 8007ce6:	9006      	str	r0, [sp, #24]
 8007ce8:	9605      	str	r6, [sp, #20]
 8007cea:	e79a      	b.n	8007c22 <_DrawBitmap+0x7ba>
 8007cec:	1fffc808 	.word	0x1fffc808
 8007cf0:	2e02      	cmp	r6, #2
 8007cf2:	f47f acc8 	bne.w	8007686 <_DrawBitmap+0x21e>
 8007cf6:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8007cf8:	2f00      	cmp	r7, #0
 8007cfa:	f000 84b3 	beq.w	8008664 <_DrawBitmap+0x11fc>
 8007cfe:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8007d02:	f040 8526 	bne.w	8008752 <_DrawBitmap+0x12ea>
 8007d06:	982b      	ldr	r0, [sp, #172]	; 0xac
 8007d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007d0c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8007d10:	f890 9001 	ldrb.w	r9, [r0, #1]
 8007d14:	f101 0b01 	add.w	fp, r1, #1
 8007d18:	1e79      	subs	r1, r7, #1
 8007d1a:	2901      	cmp	r1, #1
 8007d1c:	f340 80e3 	ble.w	8007ee6 <_DrawBitmap+0xa7e>
 8007d20:	1e8e      	subs	r6, r1, #2
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	f000 8559 	beq.w	80087dc <_DrawBitmap+0x1374>
 8007d2a:	0874      	lsrs	r4, r6, #1
 8007d2c:	0062      	lsls	r2, r4, #1
 8007d2e:	eb02 030b 	add.w	r3, r2, fp
 8007d32:	1c9f      	adds	r7, r3, #2
 8007d34:	ebcb 0103 	rsb	r1, fp, r3
 8007d38:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 8007d3c:	9610      	str	r6, [sp, #64]	; 0x40
 8007d3e:	9705      	str	r7, [sp, #20]
 8007d40:	9407      	str	r4, [sp, #28]
 8007d42:	9208      	str	r2, [sp, #32]
 8007d44:	f10c 0604 	add.w	r6, ip, #4
 8007d48:	f3c1 0740 	ubfx	r7, r1, #1, #1
 8007d4c:	d012      	beq.n	8007d74 <_DrawBitmap+0x90c>
 8007d4e:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8007d52:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8007d56:	f8da 4008 	ldr.w	r4, [sl, #8]
 8007d5a:	f85e 2020 	ldr.w	r2, [lr, r0, lsl #2]
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	f826 2c04 	strh.w	r2, [r6, #-4]
 8007d64:	4650      	mov	r0, sl
 8007d66:	f8cd c008 	str.w	ip, [sp, #8]
 8007d6a:	4659      	mov	r1, fp
 8007d6c:	9a04      	ldr	r2, [sp, #16]
 8007d6e:	4798      	blx	r3
 8007d70:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007d74:	f019 090f 	ands.w	r9, r9, #15
 8007d78:	d010      	beq.n	8007d9c <_DrawBitmap+0x934>
 8007d7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d7c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8007d80:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	f826 0c02 	strh.w	r0, [r6, #-2]
 8007d8a:	f10b 0101 	add.w	r1, fp, #1
 8007d8e:	f8cd c008 	str.w	ip, [sp, #8]
 8007d92:	4650      	mov	r0, sl
 8007d94:	9a04      	ldr	r2, [sp, #16]
 8007d96:	4798      	blx	r3
 8007d98:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007d9c:	9a05      	ldr	r2, [sp, #20]
 8007d9e:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 8007da2:	f10b 0402 	add.w	r4, fp, #2
 8007da6:	3604      	adds	r6, #4
 8007da8:	4294      	cmp	r4, r2
 8007daa:	f000 808f 	beq.w	8007ecc <_DrawBitmap+0xa64>
 8007dae:	b377      	cbz	r7, 8007e0e <_DrawBitmap+0x9a6>
 8007db0:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 8007db4:	d011      	beq.n	8007dda <_DrawBitmap+0x972>
 8007db6:	ea4f 1119 	mov.w	r1, r9, lsr #4
 8007dba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007dbc:	f8da 0008 	ldr.w	r0, [sl, #8]
 8007dc0:	f857 2021 	ldr.w	r2, [r7, r1, lsl #2]
 8007dc4:	6803      	ldr	r3, [r0, #0]
 8007dc6:	f826 2c04 	strh.w	r2, [r6, #-4]
 8007dca:	4650      	mov	r0, sl
 8007dcc:	f8cd c008 	str.w	ip, [sp, #8]
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	9a04      	ldr	r2, [sp, #16]
 8007dd4:	4798      	blx	r3
 8007dd6:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007dda:	f019 090f 	ands.w	r9, r9, #15
 8007dde:	d00f      	beq.n	8007e00 <_DrawBitmap+0x998>
 8007de0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007de2:	f8da 7008 	ldr.w	r7, [sl, #8]
 8007de6:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	f826 0c02 	strh.w	r0, [r6, #-2]
 8007df0:	1c61      	adds	r1, r4, #1
 8007df2:	f8cd c008 	str.w	ip, [sp, #8]
 8007df6:	4650      	mov	r0, sl
 8007df8:	9a04      	ldr	r2, [sp, #16]
 8007dfa:	4798      	blx	r3
 8007dfc:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007e00:	9a05      	ldr	r2, [sp, #20]
 8007e02:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 8007e06:	3402      	adds	r4, #2
 8007e08:	3604      	adds	r6, #4
 8007e0a:	4294      	cmp	r4, r2
 8007e0c:	d05e      	beq.n	8007ecc <_DrawBitmap+0xa64>
 8007e0e:	9f04      	ldr	r7, [sp, #16]
 8007e10:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8007e14:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 8007e18:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
 8007e1c:	46cc      	mov	ip, r9
 8007e1e:	f01c 0ff0 	tst.w	ip, #240	; 0xf0
 8007e22:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8007e26:	f104 0902 	add.w	r9, r4, #2
 8007e2a:	f106 0b04 	add.w	fp, r6, #4
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4650      	mov	r0, sl
 8007e32:	463a      	mov	r2, r7
 8007e34:	d00c      	beq.n	8007e50 <_DrawBitmap+0x9e8>
 8007e36:	f858 e023 	ldr.w	lr, [r8, r3, lsl #2]
 8007e3a:	f826 ec04 	strh.w	lr, [r6, #-4]
 8007e3e:	f8da e008 	ldr.w	lr, [sl, #8]
 8007e42:	f8de 3000 	ldr.w	r3, [lr]
 8007e46:	f8cd c008 	str.w	ip, [sp, #8]
 8007e4a:	4798      	blx	r3
 8007e4c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007e50:	f01c 0c0f 	ands.w	ip, ip, #15
 8007e54:	f104 0101 	add.w	r1, r4, #1
 8007e58:	4650      	mov	r0, sl
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	d007      	beq.n	8007e6e <_DrawBitmap+0xa06>
 8007e5e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007e62:	f858 402c 	ldr.w	r4, [r8, ip, lsl #2]
 8007e66:	f826 4c02 	strh.w	r4, [r6, #-2]
 8007e6a:	681e      	ldr	r6, [r3, #0]
 8007e6c:	47b0      	blx	r6
 8007e6e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007e72:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 8007e76:	d00b      	beq.n	8007e90 <_DrawBitmap+0xa28>
 8007e78:	0931      	lsrs	r1, r6, #4
 8007e7a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8007e7e:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 8007e82:	6804      	ldr	r4, [r0, #0]
 8007e84:	f82b 2c04 	strh.w	r2, [fp, #-4]
 8007e88:	4650      	mov	r0, sl
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	463a      	mov	r2, r7
 8007e8e:	47a0      	blx	r4
 8007e90:	f016 030f 	ands.w	r3, r6, #15
 8007e94:	f109 0402 	add.w	r4, r9, #2
 8007e98:	f10b 0604 	add.w	r6, fp, #4
 8007e9c:	4650      	mov	r0, sl
 8007e9e:	f109 0101 	add.w	r1, r9, #1
 8007ea2:	463a      	mov	r2, r7
 8007ea4:	d008      	beq.n	8007eb8 <_DrawBitmap+0xa50>
 8007ea6:	f858 9023 	ldr.w	r9, [r8, r3, lsl #2]
 8007eaa:	f82b 9c02 	strh.w	r9, [fp, #-2]
 8007eae:	f8da b008 	ldr.w	fp, [sl, #8]
 8007eb2:	f8db 3000 	ldr.w	r3, [fp]
 8007eb6:	4798      	blx	r3
 8007eb8:	9905      	ldr	r1, [sp, #20]
 8007eba:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 8007ebe:	428c      	cmp	r4, r1
 8007ec0:	d1ad      	bne.n	8007e1e <_DrawBitmap+0x9b6>
 8007ec2:	46e1      	mov	r9, ip
 8007ec4:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8007ec8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8007ecc:	9d07      	ldr	r5, [sp, #28]
 8007ece:	9a08      	ldr	r2, [sp, #32]
 8007ed0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007ed2:	9b07      	ldr	r3, [sp, #28]
 8007ed4:	1c6f      	adds	r7, r5, #1
 8007ed6:	f10b 0002 	add.w	r0, fp, #2
 8007eda:	eb0c 0c87 	add.w	ip, ip, r7, lsl #2
 8007ede:	eb00 0b02 	add.w	fp, r0, r2
 8007ee2:	eba6 0143 	sub.w	r1, r6, r3, lsl #1
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	f43f abcd 	beq.w	8007686 <_DrawBitmap+0x21e>
 8007eec:	ea5f 1919 	movs.w	r9, r9, lsr #4
 8007ef0:	f43f abc9 	beq.w	8007686 <_DrawBitmap+0x21e>
 8007ef4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007ef6:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 8007efa:	f8ac 0000 	strh.w	r0, [ip]
 8007efe:	f1ba 0f00 	cmp.w	sl, #0
 8007f02:	f43f abc0 	beq.w	8007686 <_DrawBitmap+0x21e>
 8007f06:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	6813      	ldr	r3, [r2, #0]
 8007f0e:	9a04      	ldr	r2, [sp, #16]
 8007f10:	4659      	mov	r1, fp
 8007f12:	4798      	blx	r3
 8007f14:	f7ff bbb7 	b.w	8007686 <_DrawBitmap+0x21e>
 8007f18:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8007f1c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f20:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
 8007f24:	f8ac 0000 	strh.w	r0, [ip]
 8007f28:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 8007f2c:	3901      	subs	r1, #1
 8007f2e:	f89c 9001 	ldrb.w	r9, [ip, #1]
 8007f32:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8007f36:	e4dc      	b.n	80078f2 <_DrawBitmap+0x48a>
 8007f38:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007f3a:	e5c0      	b.n	8007abe <_DrawBitmap+0x656>
 8007f3c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007f3e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8007f40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f42:	42a1      	cmp	r1, r4
 8007f44:	bfc8      	it	gt
 8007f46:	b2e1      	uxtbgt	r1, r4
 8007f48:	1e4a      	subs	r2, r1, #1
 8007f4a:	f019 0fc0 	tst.w	r9, #192	; 0xc0
 8007f4e:	ebc1 0404 	rsb	r4, r1, r4
 8007f52:	f10c 0702 	add.w	r7, ip, #2
 8007f56:	f002 0601 	and.w	r6, r2, #1
 8007f5a:	d005      	beq.n	8007f68 <_DrawBitmap+0xb00>
 8007f5c:	f837 3c02 	ldrh.w	r3, [r7, #-2]
 8007f60:	f083 00ff 	eor.w	r0, r3, #255	; 0xff
 8007f64:	f827 0c02 	strh.w	r0, [r7, #-2]
 8007f68:	1e48      	subs	r0, r1, #1
 8007f6a:	ea4f 1209 	mov.w	r2, r9, lsl #4
 8007f6e:	1cbb      	adds	r3, r7, #2
 8007f70:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8007f74:	b2d2      	uxtb	r2, r2
 8007f76:	d023      	beq.n	8007fc0 <_DrawBitmap+0xb58>
 8007f78:	b17e      	cbz	r6, 8007f9a <_DrawBitmap+0xb32>
 8007f7a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8007f7e:	d005      	beq.n	8007f8c <_DrawBitmap+0xb24>
 8007f80:	f833 7c02 	ldrh.w	r7, [r3, #-2]
 8007f84:	f087 06ff 	eor.w	r6, r7, #255	; 0xff
 8007f88:	f823 6c02 	strh.w	r6, [r3, #-2]
 8007f8c:	3801      	subs	r0, #1
 8007f8e:	0112      	lsls	r2, r2, #4
 8007f90:	3302      	adds	r3, #2
 8007f92:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	d012      	beq.n	8007fc0 <_DrawBitmap+0xb58>
 8007f9a:	1e47      	subs	r7, r0, #1
 8007f9c:	b2f8      	uxtb	r0, r7
 8007f9e:	1c9e      	adds	r6, r3, #2
 8007fa0:	3801      	subs	r0, #1
 8007fa2:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	d005      	beq.n	8007fb8 <_DrawBitmap+0xb50>
 8007fac:	f833 7c02 	ldrh.w	r7, [r3, #-2]
 8007fb0:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 8007fb4:	f823 7c02 	strh.w	r7, [r3, #-2]
 8007fb8:	1cb3      	adds	r3, r6, #2
 8007fba:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8007fbe:	d1ec      	bne.n	8007f9a <_DrawBitmap+0xb32>
 8007fc0:	3901      	subs	r1, #1
 8007fc2:	b2ca      	uxtb	r2, r1
 8007fc4:	1c53      	adds	r3, r2, #1
 8007fc6:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	f43f ab5b 	beq.w	8007686 <_DrawBitmap+0x21e>
 8007fd0:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 8007fd4:	2102      	movs	r1, #2
 8007fd6:	e7b4      	b.n	8007f42 <_DrawBitmap+0xada>
 8007fd8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fda:	690d      	ldr	r5, [r1, #16]
 8007fdc:	68a8      	ldr	r0, [r5, #8]
 8007fde:	f8cd c008 	str.w	ip, [sp, #8]
 8007fe2:	4780      	blx	r0
 8007fe4:	f8dd c008 	ldr.w	ip, [sp, #8]
 8007fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fec:	f8cd c014 	str.w	ip, [sp, #20]
 8007ff0:	b283      	uxth	r3, r0
 8007ff2:	46b4      	mov	ip, r6
 8007ff4:	9308      	str	r3, [sp, #32]
 8007ff6:	45cc      	cmp	ip, r9
 8007ff8:	bf38      	it	cc
 8007ffa:	46e1      	movcc	r9, ip
 8007ffc:	463b      	mov	r3, r7
 8007ffe:	9206      	str	r2, [sp, #24]
 8008000:	9107      	str	r1, [sp, #28]
 8008002:	ebc9 0c0c 	rsb	ip, r9, ip
 8008006:	2b00      	cmp	r3, #0
 8008008:	d07b      	beq.n	8008102 <_DrawBitmap+0xc9a>
 800800a:	9905      	ldr	r1, [sp, #20]
 800800c:	f109 32ff 	add.w	r2, r9, #4294967295
 8008010:	1c8d      	adds	r5, r1, #2
 8008012:	07e7      	lsls	r7, r4, #31
 8008014:	f002 0601 	and.w	r6, r2, #1
 8008018:	f100 80c0 	bmi.w	800819c <_DrawBitmap+0xd34>
 800801c:	9a07      	ldr	r2, [sp, #28]
 800801e:	0864      	lsrs	r4, r4, #1
 8008020:	3502      	adds	r5, #2
 8008022:	f1b9 0a01 	subs.w	sl, r9, #1
 8008026:	f102 0801 	add.w	r8, r2, #1
 800802a:	d04b      	beq.n	80080c4 <_DrawBitmap+0xc5c>
 800802c:	b14e      	cbz	r6, 8008042 <_DrawBitmap+0xbda>
 800802e:	07e6      	lsls	r6, r4, #31
 8008030:	f100 80c9 	bmi.w	80081c6 <_DrawBitmap+0xd5e>
 8008034:	0864      	lsrs	r4, r4, #1
 8008036:	3502      	adds	r5, #2
 8008038:	f1ba 0a01 	subs.w	sl, sl, #1
 800803c:	f108 0801 	add.w	r8, r8, #1
 8008040:	d040      	beq.n	80080c4 <_DrawBitmap+0xc5c>
 8008042:	4641      	mov	r1, r8
 8008044:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8008048:	4698      	mov	r8, r3
 800804a:	e008      	b.n	800805e <_DrawBitmap+0xbf6>
 800804c:	07f0      	lsls	r0, r6, #31
 800804e:	d420      	bmi.n	8008092 <_DrawBitmap+0xc2a>
 8008050:	0874      	lsrs	r4, r6, #1
 8008052:	1cbd      	adds	r5, r7, #2
 8008054:	f1ba 0a01 	subs.w	sl, sl, #1
 8008058:	f10b 0101 	add.w	r1, fp, #1
 800805c:	d02f      	beq.n	80080be <_DrawBitmap+0xc56>
 800805e:	0866      	lsrs	r6, r4, #1
 8008060:	f014 0f01 	tst.w	r4, #1
 8008064:	f101 0b01 	add.w	fp, r1, #1
 8008068:	f10a 3aff 	add.w	sl, sl, #4294967295
 800806c:	f105 0702 	add.w	r7, r5, #2
 8008070:	d0ec      	beq.n	800804c <_DrawBitmap+0xbe4>
 8008072:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008076:	9a04      	ldr	r2, [sp, #16]
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	4640      	mov	r0, r8
 800807c:	4798      	blx	r3
 800807e:	f835 2c02 	ldrh.w	r2, [r5, #-2]
 8008082:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008086:	07f0      	lsls	r0, r6, #31
 8008088:	ea8c 0102 	eor.w	r1, ip, r2
 800808c:	f825 1c02 	strh.w	r1, [r5, #-2]
 8008090:	d5de      	bpl.n	8008050 <_DrawBitmap+0xbe8>
 8008092:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8008096:	9a04      	ldr	r2, [sp, #16]
 8008098:	682c      	ldr	r4, [r5, #0]
 800809a:	4640      	mov	r0, r8
 800809c:	4659      	mov	r1, fp
 800809e:	47a0      	blx	r4
 80080a0:	f837 0c02 	ldrh.w	r0, [r7, #-2]
 80080a4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80080a8:	0874      	lsrs	r4, r6, #1
 80080aa:	ea8c 0300 	eor.w	r3, ip, r0
 80080ae:	1cbd      	adds	r5, r7, #2
 80080b0:	f1ba 0a01 	subs.w	sl, sl, #1
 80080b4:	f827 3c02 	strh.w	r3, [r7, #-2]
 80080b8:	f10b 0101 	add.w	r1, fp, #1
 80080bc:	d1cf      	bne.n	800805e <_DrawBitmap+0xbf6>
 80080be:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80080c2:	4643      	mov	r3, r8
 80080c4:	9e05      	ldr	r6, [sp, #20]
 80080c6:	9a07      	ldr	r2, [sp, #28]
 80080c8:	eb06 0749 	add.w	r7, r6, r9, lsl #1
 80080cc:	eb09 0102 	add.w	r1, r9, r2
 80080d0:	9705      	str	r7, [sp, #20]
 80080d2:	9107      	str	r1, [sp, #28]
 80080d4:	f1bc 0f00 	cmp.w	ip, #0
 80080d8:	f43f ac68 	beq.w	80079ac <_DrawBitmap+0x544>
 80080dc:	9806      	ldr	r0, [sp, #24]
 80080de:	f24e 1978 	movw	r9, #57720	; 0xe178
 80080e2:	7804      	ldrb	r4, [r0, #0]
 80080e4:	f6c0 0900 	movt	r9, #2048	; 0x800
 80080e8:	f819 4004 	ldrb.w	r4, [r9, r4]
 80080ec:	f04f 0908 	mov.w	r9, #8
 80080f0:	1c45      	adds	r5, r0, #1
 80080f2:	45cc      	cmp	ip, r9
 80080f4:	bf38      	it	cc
 80080f6:	46e1      	movcc	r9, ip
 80080f8:	9506      	str	r5, [sp, #24]
 80080fa:	ebc9 0c0c 	rsb	ip, r9, ip
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d183      	bne.n	800800a <_DrawBitmap+0xba2>
 8008102:	9e05      	ldr	r6, [sp, #20]
 8008104:	f109 37ff 	add.w	r7, r9, #4294967295
 8008108:	1cb2      	adds	r2, r6, #2
 800810a:	07e1      	lsls	r1, r4, #31
 800810c:	f007 0001 	and.w	r0, r7, #1
 8008110:	d506      	bpl.n	8008120 <_DrawBitmap+0xcb8>
 8008112:	f832 1c02 	ldrh.w	r1, [r2, #-2]
 8008116:	9d08      	ldr	r5, [sp, #32]
 8008118:	ea85 0701 	eor.w	r7, r5, r1
 800811c:	f822 7c02 	strh.w	r7, [r2, #-2]
 8008120:	0864      	lsrs	r4, r4, #1
 8008122:	3202      	adds	r2, #2
 8008124:	f1b9 0101 	subs.w	r1, r9, #1
 8008128:	d028      	beq.n	800817c <_DrawBitmap+0xd14>
 800812a:	b160      	cbz	r0, 8008146 <_DrawBitmap+0xcde>
 800812c:	07e0      	lsls	r0, r4, #31
 800812e:	d506      	bpl.n	800813e <_DrawBitmap+0xcd6>
 8008130:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 8008134:	9e08      	ldr	r6, [sp, #32]
 8008136:	ea86 0500 	eor.w	r5, r6, r0
 800813a:	f822 5c02 	strh.w	r5, [r2, #-2]
 800813e:	0864      	lsrs	r4, r4, #1
 8008140:	3202      	adds	r2, #2
 8008142:	3901      	subs	r1, #1
 8008144:	d01a      	beq.n	800817c <_DrawBitmap+0xd14>
 8008146:	9f08      	ldr	r7, [sp, #32]
 8008148:	0866      	lsrs	r6, r4, #1
 800814a:	f014 0f01 	tst.w	r4, #1
 800814e:	f101 31ff 	add.w	r1, r1, #4294967295
 8008152:	f102 0002 	add.w	r0, r2, #2
 8008156:	d005      	beq.n	8008164 <_DrawBitmap+0xcfc>
 8008158:	f832 4c02 	ldrh.w	r4, [r2, #-2]
 800815c:	ea87 0504 	eor.w	r5, r7, r4
 8008160:	f822 5c02 	strh.w	r5, [r2, #-2]
 8008164:	07f2      	lsls	r2, r6, #31
 8008166:	d505      	bpl.n	8008174 <_DrawBitmap+0xd0c>
 8008168:	f830 2c02 	ldrh.w	r2, [r0, #-2]
 800816c:	ea87 0402 	eor.w	r4, r7, r2
 8008170:	f820 4c02 	strh.w	r4, [r0, #-2]
 8008174:	0874      	lsrs	r4, r6, #1
 8008176:	1c82      	adds	r2, r0, #2
 8008178:	3901      	subs	r1, #1
 800817a:	d1e5      	bne.n	8008148 <_DrawBitmap+0xce0>
 800817c:	9f05      	ldr	r7, [sp, #20]
 800817e:	eb07 0649 	add.w	r6, r7, r9, lsl #1
 8008182:	9605      	str	r6, [sp, #20]
 8008184:	f1bc 0f00 	cmp.w	ip, #0
 8008188:	f43f ac10 	beq.w	80079ac <_DrawBitmap+0x544>
 800818c:	9806      	ldr	r0, [sp, #24]
 800818e:	f24e 1478 	movw	r4, #57720	; 0xe178
 8008192:	7805      	ldrb	r5, [r0, #0]
 8008194:	f6c0 0400 	movt	r4, #2048	; 0x800
 8008198:	5d64      	ldrb	r4, [r4, r5]
 800819a:	e7a7      	b.n	80080ec <_DrawBitmap+0xc84>
 800819c:	689f      	ldr	r7, [r3, #8]
 800819e:	9907      	ldr	r1, [sp, #28]
 80081a0:	683f      	ldr	r7, [r7, #0]
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f8cd c008 	str.w	ip, [sp, #8]
 80081ac:	47b8      	blx	r7
 80081ae:	f835 3c02 	ldrh.w	r3, [r5, #-2]
 80081b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081b6:	f8dd c008 	ldr.w	ip, [sp, #8]
 80081ba:	ea88 0003 	eor.w	r0, r8, r3
 80081be:	f825 0c02 	strh.w	r0, [r5, #-2]
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	e72a      	b.n	800801c <_DrawBitmap+0xbb4>
 80081c6:	6899      	ldr	r1, [r3, #8]
 80081c8:	9a04      	ldr	r2, [sp, #16]
 80081ca:	680e      	ldr	r6, [r1, #0]
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f8cd c008 	str.w	ip, [sp, #8]
 80081d4:	4641      	mov	r1, r8
 80081d6:	47b0      	blx	r6
 80081d8:	f835 7c02 	ldrh.w	r7, [r5, #-2]
 80081dc:	9b08      	ldr	r3, [sp, #32]
 80081de:	f8dd c008 	ldr.w	ip, [sp, #8]
 80081e2:	ea83 0007 	eor.w	r0, r3, r7
 80081e6:	f825 0c02 	strh.w	r0, [r5, #-2]
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	e722      	b.n	8008034 <_DrawBitmap+0xbcc>
 80081ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80081f2:	f8b3 b004 	ldrh.w	fp, [r3, #4]
 80081f6:	9206      	str	r2, [sp, #24]
 80081f8:	464d      	mov	r5, r9
 80081fa:	42ae      	cmp	r6, r5
 80081fc:	bf38      	it	cc
 80081fe:	4635      	movcc	r5, r6
 8008200:	46ba      	mov	sl, r7
 8008202:	f8cd b014 	str.w	fp, [sp, #20]
 8008206:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800820a:	46e3      	mov	fp, ip
 800820c:	1b76      	subs	r6, r6, r5
 800820e:	f1ba 0f00 	cmp.w	sl, #0
 8008212:	d055      	beq.n	80082c0 <_DrawBitmap+0xe58>
 8008214:	2c00      	cmp	r4, #0
 8008216:	f000 8094 	beq.w	8008342 <_DrawBitmap+0xeda>
 800821a:	07e9      	lsls	r1, r5, #31
 800821c:	f10b 0902 	add.w	r9, fp, #2
 8008220:	d40b      	bmi.n	800823a <_DrawBitmap+0xdd2>
 8008222:	07e3      	lsls	r3, r4, #31
 8008224:	f100 8091 	bmi.w	800834a <_DrawBitmap+0xee2>
 8008228:	3d01      	subs	r5, #1
 800822a:	0864      	lsrs	r4, r4, #1
 800822c:	46cb      	mov	fp, r9
 800822e:	f108 0801 	add.w	r8, r8, #1
 8008232:	f109 0902 	add.w	r9, r9, #2
 8008236:	f000 8084 	beq.w	8008342 <_DrawBitmap+0xeda>
 800823a:	4657      	mov	r7, sl
 800823c:	9607      	str	r6, [sp, #28]
 800823e:	e013      	b.n	8008268 <_DrawBitmap+0xe00>
 8008240:	f108 0801 	add.w	r8, r8, #1
 8008244:	3d01      	subs	r5, #1
 8008246:	46cb      	mov	fp, r9
 8008248:	4646      	mov	r6, r8
 800824a:	b315      	cbz	r5, 8008292 <_DrawBitmap+0xe2a>
 800824c:	0864      	lsrs	r4, r4, #1
 800824e:	d076      	beq.n	800833e <_DrawBitmap+0xed6>
 8008250:	f014 0f01 	tst.w	r4, #1
 8008254:	46d3      	mov	fp, sl
 8008256:	f105 35ff 	add.w	r5, r5, #4294967295
 800825a:	f10a 0902 	add.w	r9, sl, #2
 800825e:	d161      	bne.n	8008324 <_DrawBitmap+0xebc>
 8008260:	0864      	lsrs	r4, r4, #1
 8008262:	f106 0801 	add.w	r8, r6, #1
 8008266:	d06a      	beq.n	800833e <_DrawBitmap+0xed6>
 8008268:	f014 0f01 	tst.w	r4, #1
 800826c:	f109 0a02 	add.w	sl, r9, #2
 8008270:	d0e6      	beq.n	8008240 <_DrawBitmap+0xdd8>
 8008272:	68be      	ldr	r6, [r7, #8]
 8008274:	9a04      	ldr	r2, [sp, #16]
 8008276:	6833      	ldr	r3, [r6, #0]
 8008278:	4641      	mov	r1, r8
 800827a:	4638      	mov	r0, r7
 800827c:	4798      	blx	r3
 800827e:	9905      	ldr	r1, [sp, #20]
 8008280:	f108 0801 	add.w	r8, r8, #1
 8008284:	3d01      	subs	r5, #1
 8008286:	f829 1c02 	strh.w	r1, [r9, #-2]
 800828a:	46cb      	mov	fp, r9
 800828c:	4646      	mov	r6, r8
 800828e:	2d00      	cmp	r5, #0
 8008290:	d1dc      	bne.n	800824c <_DrawBitmap+0xde4>
 8008292:	9e07      	ldr	r6, [sp, #28]
 8008294:	46ba      	mov	sl, r7
 8008296:	2e00      	cmp	r6, #0
 8008298:	f43f ab88 	beq.w	80079ac <_DrawBitmap+0x544>
 800829c:	9c06      	ldr	r4, [sp, #24]
 800829e:	f24e 1c78 	movw	ip, #57720	; 0xe178
 80082a2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80082a6:	2508      	movs	r5, #8
 80082a8:	f6c0 0c00 	movt	ip, #2048	; 0x800
 80082ac:	42ae      	cmp	r6, r5
 80082ae:	bf38      	it	cc
 80082b0:	4635      	movcc	r5, r6
 80082b2:	9406      	str	r4, [sp, #24]
 80082b4:	1b76      	subs	r6, r6, r5
 80082b6:	f81c 4007 	ldrb.w	r4, [ip, r7]
 80082ba:	f1ba 0f00 	cmp.w	sl, #0
 80082be:	d1a9      	bne.n	8008214 <_DrawBitmap+0xdac>
 80082c0:	2c00      	cmp	r4, #0
 80082c2:	f000 80ae 	beq.w	8008422 <_DrawBitmap+0xfba>
 80082c6:	07ea      	lsls	r2, r5, #31
 80082c8:	f10b 0302 	add.w	r3, fp, #2
 80082cc:	d40c      	bmi.n	80082e8 <_DrawBitmap+0xe80>
 80082ce:	07e7      	lsls	r7, r4, #31
 80082d0:	bf48      	it	mi
 80082d2:	f8dd c014 	ldrmi.w	ip, [sp, #20]
 80082d6:	469b      	mov	fp, r3
 80082d8:	bf48      	it	mi
 80082da:	f823 cc02 	strhmi.w	ip, [r3, #-2]
 80082de:	3d01      	subs	r5, #1
 80082e0:	3302      	adds	r3, #2
 80082e2:	0864      	lsrs	r4, r4, #1
 80082e4:	f000 809d 	beq.w	8008422 <_DrawBitmap+0xfba>
 80082e8:	9f05      	ldr	r7, [sp, #20]
 80082ea:	e00f      	b.n	800830c <_DrawBitmap+0xea4>
 80082ec:	0864      	lsrs	r4, r4, #1
 80082ee:	f000 8098 	beq.w	8008422 <_DrawBitmap+0xfba>
 80082f2:	f014 0f01 	tst.w	r4, #1
 80082f6:	bf18      	it	ne
 80082f8:	f821 7c02 	strhne.w	r7, [r1, #-2]
 80082fc:	0864      	lsrs	r4, r4, #1
 80082fe:	468b      	mov	fp, r1
 8008300:	f105 35ff 	add.w	r5, r5, #4294967295
 8008304:	f101 0302 	add.w	r3, r1, #2
 8008308:	f000 808b 	beq.w	8008422 <_DrawBitmap+0xfba>
 800830c:	f014 0f01 	tst.w	r4, #1
 8008310:	bf18      	it	ne
 8008312:	f823 7c02 	strhne.w	r7, [r3, #-2]
 8008316:	3d01      	subs	r5, #1
 8008318:	f103 0102 	add.w	r1, r3, #2
 800831c:	469b      	mov	fp, r3
 800831e:	2d00      	cmp	r5, #0
 8008320:	d1e4      	bne.n	80082ec <_DrawBitmap+0xe84>
 8008322:	e7b8      	b.n	8008296 <_DrawBitmap+0xe2e>
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	4641      	mov	r1, r8
 8008328:	6813      	ldr	r3, [r2, #0]
 800832a:	9a04      	ldr	r2, [sp, #16]
 800832c:	4638      	mov	r0, r7
 800832e:	4798      	blx	r3
 8008330:	9905      	ldr	r1, [sp, #20]
 8008332:	0864      	lsrs	r4, r4, #1
 8008334:	f82a 1c02 	strh.w	r1, [sl, #-2]
 8008338:	f106 0801 	add.w	r8, r6, #1
 800833c:	d194      	bne.n	8008268 <_DrawBitmap+0xe00>
 800833e:	9e07      	ldr	r6, [sp, #28]
 8008340:	46ba      	mov	sl, r7
 8008342:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 8008346:	44a8      	add	r8, r5
 8008348:	e7a5      	b.n	8008296 <_DrawBitmap+0xe2e>
 800834a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800834e:	4650      	mov	r0, sl
 8008350:	6817      	ldr	r7, [r2, #0]
 8008352:	9a04      	ldr	r2, [sp, #16]
 8008354:	4641      	mov	r1, r8
 8008356:	47b8      	blx	r7
 8008358:	f8dd c014 	ldr.w	ip, [sp, #20]
 800835c:	f829 cc02 	strh.w	ip, [r9, #-2]
 8008360:	e762      	b.n	8008228 <_DrawBitmap+0xdc0>
 8008362:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8008364:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008366:	4284      	cmp	r4, r0
 8008368:	bfc8      	it	gt
 800836a:	b2c4      	uxtbgt	r4, r0
 800836c:	1e67      	subs	r7, r4, #1
 800836e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 8008372:	ebc4 0000 	rsb	r0, r4, r0
 8008376:	f10c 0302 	add.w	r3, ip, #2
 800837a:	f007 0701 	and.w	r7, r7, #1
 800837e:	d005      	beq.n	800838c <_DrawBitmap+0xf24>
 8008380:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8008384:	f082 01ff 	eor.w	r1, r2, #255	; 0xff
 8008388:	f823 1c02 	strh.w	r1, [r3, #-2]
 800838c:	1e61      	subs	r1, r4, #1
 800838e:	00ad      	lsls	r5, r5, #2
 8008390:	3302      	adds	r3, #2
 8008392:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8008396:	b2ea      	uxtb	r2, r5
 8008398:	d02f      	beq.n	80083fa <_DrawBitmap+0xf92>
 800839a:	b17f      	cbz	r7, 80083bc <_DrawBitmap+0xf54>
 800839c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80083a0:	d005      	beq.n	80083ae <_DrawBitmap+0xf46>
 80083a2:	f833 7c02 	ldrh.w	r7, [r3, #-2]
 80083a6:	f087 05ff 	eor.w	r5, r7, #255	; 0xff
 80083aa:	f823 5c02 	strh.w	r5, [r3, #-2]
 80083ae:	3901      	subs	r1, #1
 80083b0:	0092      	lsls	r2, r2, #2
 80083b2:	3302      	adds	r3, #2
 80083b4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	d01e      	beq.n	80083fa <_DrawBitmap+0xf92>
 80083bc:	0097      	lsls	r7, r2, #2
 80083be:	3901      	subs	r1, #1
 80083c0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 80083c4:	b2fd      	uxtb	r5, r7
 80083c6:	b2c9      	uxtb	r1, r1
 80083c8:	f103 0702 	add.w	r7, r3, #2
 80083cc:	d005      	beq.n	80083da <_DrawBitmap+0xf72>
 80083ce:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80083d2:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 80083d6:	f823 2c02 	strh.w	r2, [r3, #-2]
 80083da:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 80083de:	d005      	beq.n	80083ec <_DrawBitmap+0xf84>
 80083e0:	f837 3c02 	ldrh.w	r3, [r7, #-2]
 80083e4:	f083 02ff 	eor.w	r2, r3, #255	; 0xff
 80083e8:	f827 2c02 	strh.w	r2, [r7, #-2]
 80083ec:	3901      	subs	r1, #1
 80083ee:	00ad      	lsls	r5, r5, #2
 80083f0:	1cbb      	adds	r3, r7, #2
 80083f2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80083f6:	b2ea      	uxtb	r2, r5
 80083f8:	d1e0      	bne.n	80083bc <_DrawBitmap+0xf54>
 80083fa:	1e67      	subs	r7, r4, #1
 80083fc:	b2fd      	uxtb	r5, r7
 80083fe:	1c6a      	adds	r2, r5, #1
 8008400:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 8008404:	2800      	cmp	r0, #0
 8008406:	f43f a93e 	beq.w	8007686 <_DrawBitmap+0x21e>
 800840a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
 800840e:	2404      	movs	r4, #4
 8008410:	e7a9      	b.n	8008366 <_DrawBitmap+0xefe>
 8008412:	f64c 0c08 	movw	ip, #51208	; 0xc808
 8008416:	f6c1 7cff 	movt	ip, #8191	; 0x1fff
 800841a:	f8dc 3000 	ldr.w	r3, [ip]
 800841e:	f7ff b853 	b.w	80074c8 <_DrawBitmap+0x60>
 8008422:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 8008426:	e736      	b.n	8008296 <_DrawBitmap+0xe2e>
 8008428:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800842c:	f7ff bb19 	b.w	8007a62 <_DrawBitmap+0x5fa>
 8008430:	2d00      	cmp	r5, #0
 8008432:	f340 8253 	ble.w	80088dc <_DrawBitmap+0x1474>
 8008436:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800843a:	982b      	ldr	r0, [sp, #172]	; 0xac
 800843c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8008440:	9905      	ldr	r1, [sp, #20]
 8008442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008444:	ea4f 044b 	mov.w	r4, fp, lsl #1
 8008448:	eb00 0e0b 	add.w	lr, r0, fp
 800844c:	1973      	adds	r3, r6, r5
 800844e:	1ea5      	subs	r5, r4, #2
 8008450:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8008452:	9507      	str	r5, [sp, #28]
 8008454:	4657      	mov	r7, sl
 8008456:	f101 0902 	add.w	r9, r1, #2
 800845a:	ebc2 0b00 	rsb	fp, r2, r0
 800845e:	9305      	str	r3, [sp, #20]
 8008460:	f8cd e010 	str.w	lr, [sp, #16]
 8008464:	46d0      	mov	r8, sl
 8008466:	4605      	mov	r5, r0
 8008468:	f1a9 0002 	sub.w	r0, r9, #2
 800846c:	2c00      	cmp	r4, #0
 800846e:	f000 80b1 	beq.w	80085d4 <_DrawBitmap+0x116c>
 8008472:	f64c 0308 	movw	r3, #51208	; 0xc808
 8008476:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800847a:	6819      	ldr	r1, [r3, #0]
 800847c:	7c0a      	ldrb	r2, [r1, #16]
 800847e:	f012 0303 	ands.w	r3, r2, #3
 8008482:	d13a      	bne.n	80084fa <_DrawBitmap+0x1092>
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	7829      	ldrb	r1, [r5, #0]
 8008488:	eb03 0c09 	add.w	ip, r3, r9
 800848c:	ebc0 030c 	rsb	r3, r0, ip
 8008490:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8008494:	1e99      	subs	r1, r3, #2
 8008496:	45e1      	cmp	r9, ip
 8008498:	8002      	strh	r2, [r0, #0]
 800849a:	464b      	mov	r3, r9
 800849c:	f3c1 0040 	ubfx	r0, r1, #1, #1
 80084a0:	4629      	mov	r1, r5
 80084a2:	d017      	beq.n	80084d4 <_DrawBitmap+0x106c>
 80084a4:	b140      	cbz	r0, 80084b8 <_DrawBitmap+0x1050>
 80084a6:	786a      	ldrb	r2, [r5, #1]
 80084a8:	464b      	mov	r3, r9
 80084aa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 80084ae:	f823 1b02 	strh.w	r1, [r3], #2
 80084b2:	1c69      	adds	r1, r5, #1
 80084b4:	4563      	cmp	r3, ip
 80084b6:	d00d      	beq.n	80084d4 <_DrawBitmap+0x106c>
 80084b8:	7848      	ldrb	r0, [r1, #1]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80084c0:	f822 0b02 	strh.w	r0, [r2], #2
 80084c4:	7888      	ldrb	r0, [r1, #2]
 80084c6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80084ca:	8058      	strh	r0, [r3, #2]
 80084cc:	1c93      	adds	r3, r2, #2
 80084ce:	3102      	adds	r1, #2
 80084d0:	4563      	cmp	r3, ip
 80084d2:	d1f1      	bne.n	80084b8 <_DrawBitmap+0x1050>
 80084d4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084da:	185a      	adds	r2, r3, r1
 80084dc:	9b05      	ldr	r3, [sp, #20]
 80084de:	9204      	str	r2, [sp, #16]
 80084e0:	3601      	adds	r6, #1
 80084e2:	186d      	adds	r5, r5, r1
 80084e4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80084e6:	429e      	cmp	r6, r3
 80084e8:	4481      	add	r9, r0
 80084ea:	448b      	add	fp, r1
 80084ec:	d1bc      	bne.n	8008468 <_DrawBitmap+0x1000>
 80084ee:	4647      	mov	r7, r8
 80084f0:	2f00      	cmp	r7, #0
 80084f2:	f47f a895 	bne.w	8007620 <_DrawBitmap+0x1b8>
 80084f6:	f7ff b896 	b.w	8007626 <_DrawBitmap+0x1be>
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d1ea      	bne.n	80084d4 <_DrawBitmap+0x106c>
 80084fe:	2f00      	cmp	r7, #0
 8008500:	d078      	beq.n	80085f4 <_DrawBitmap+0x118c>
 8008502:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008506:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800850a:	f81b 000a 	ldrb.w	r0, [fp, sl]
 800850e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008512:	f001 0a01 	and.w	sl, r1, #1
 8008516:	b148      	cbz	r0, 800852c <_DrawBitmap+0x10c4>
 8008518:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008520:	f829 2c02 	strh.w	r2, [r9, #-2]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4638      	mov	r0, r7
 8008528:	4632      	mov	r2, r6
 800852a:	4798      	blx	r3
 800852c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800852e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	f1b1 0c01 	subs.w	ip, r1, #1
 8008536:	f109 0802 	add.w	r8, r9, #2
 800853a:	d048      	beq.n	80085ce <_DrawBitmap+0x1166>
 800853c:	f1ba 0f00 	cmp.w	sl, #0
 8008540:	d019      	beq.n	8008576 <_DrawBitmap+0x110e>
 8008542:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8008546:	b182      	cbz	r2, 800856a <_DrawBitmap+0x1102>
 8008548:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 800854c:	68b9      	ldr	r1, [r7, #8]
 800854e:	f828 0c02 	strh.w	r0, [r8, #-2]
 8008552:	f8d1 a000 	ldr.w	sl, [r1]
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	4619      	mov	r1, r3
 800855a:	f8cd c008 	str.w	ip, [sp, #8]
 800855e:	4638      	mov	r0, r7
 8008560:	4632      	mov	r2, r6
 8008562:	47d0      	blx	sl
 8008564:	f8dd c008 	ldr.w	ip, [sp, #8]
 8008568:	9b03      	ldr	r3, [sp, #12]
 800856a:	3301      	adds	r3, #1
 800856c:	f1bc 0c01 	subs.w	ip, ip, #1
 8008570:	f108 0802 	add.w	r8, r8, #2
 8008574:	d02b      	beq.n	80085ce <_DrawBitmap+0x1166>
 8008576:	950b      	str	r5, [sp, #44]	; 0x2c
 8008578:	4635      	mov	r5, r6
 800857a:	4666      	mov	r6, ip
 800857c:	f103 0a01 	add.w	sl, r3, #1
 8008580:	4619      	mov	r1, r3
 8008582:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8008586:	4638      	mov	r0, r7
 8008588:	462a      	mov	r2, r5
 800858a:	b143      	cbz	r3, 800859e <_DrawBitmap+0x1136>
 800858c:	f854 e023 	ldr.w	lr, [r4, r3, lsl #2]
 8008590:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8008594:	f828 ec02 	strh.w	lr, [r8, #-2]
 8008598:	f8dc 3000 	ldr.w	r3, [ip]
 800859c:	4798      	blx	r3
 800859e:	f81b 200a 	ldrb.w	r2, [fp, sl]
 80085a2:	3e01      	subs	r6, #1
 80085a4:	f108 0802 	add.w	r8, r8, #2
 80085a8:	b14a      	cbz	r2, 80085be <_DrawBitmap+0x1156>
 80085aa:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	f828 0c02 	strh.w	r0, [r8, #-2]
 80085b4:	680b      	ldr	r3, [r1, #0]
 80085b6:	4638      	mov	r0, r7
 80085b8:	4651      	mov	r1, sl
 80085ba:	462a      	mov	r2, r5
 80085bc:	4798      	blx	r3
 80085be:	3e01      	subs	r6, #1
 80085c0:	f10a 0301 	add.w	r3, sl, #1
 80085c4:	f108 0802 	add.w	r8, r8, #2
 80085c8:	d1d8      	bne.n	800857c <_DrawBitmap+0x1114>
 80085ca:	462e      	mov	r6, r5
 80085cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80085ce:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80085d0:	46b8      	mov	r8, r7
 80085d2:	e77f      	b.n	80084d4 <_DrawBitmap+0x106c>
 80085d4:	f64c 0108 	movw	r1, #51208	; 0xc808
 80085d8:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
 80085dc:	680a      	ldr	r2, [r1, #0]
 80085de:	7c13      	ldrb	r3, [r2, #16]
 80085e0:	f013 0103 	ands.w	r1, r3, #3
 80085e4:	d144      	bne.n	8008670 <_DrawBitmap+0x1208>
 80085e6:	4629      	mov	r1, r5
 80085e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ea:	f003 f87d 	bl	800b6e8 <memcpy>
 80085ee:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80085f0:	46b8      	mov	r8, r7
 80085f2:	e76f      	b.n	80084d4 <_DrawBitmap+0x106c>
 80085f4:	462b      	mov	r3, r5
 80085f6:	f8dd c010 	ldr.w	ip, [sp, #16]
 80085fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085fe:	43e8      	mvns	r0, r5
 8008600:	eb00 010c 	add.w	r1, r0, ip
 8008604:	f001 0001 	and.w	r0, r1, #1
 8008608:	bb2a      	cbnz	r2, 8008656 <_DrawBitmap+0x11ee>
 800860a:	4563      	cmp	r3, ip
 800860c:	f109 0202 	add.w	r2, r9, #2
 8008610:	d0de      	beq.n	80085d0 <_DrawBitmap+0x1168>
 8008612:	b158      	cbz	r0, 800862c <_DrawBitmap+0x11c4>
 8008614:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008618:	b119      	cbz	r1, 8008622 <_DrawBitmap+0x11ba>
 800861a:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 800861e:	f822 0c02 	strh.w	r0, [r2, #-2]
 8008622:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008626:	3202      	adds	r2, #2
 8008628:	4543      	cmp	r3, r8
 800862a:	d0d1      	beq.n	80085d0 <_DrawBitmap+0x1168>
 800862c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008630:	1c90      	adds	r0, r2, #2
 8008632:	b119      	cbz	r1, 800863c <_DrawBitmap+0x11d4>
 8008634:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8008638:	f822 1c02 	strh.w	r1, [r2, #-2]
 800863c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008640:	b11a      	cbz	r2, 800864a <_DrawBitmap+0x11e2>
 8008642:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 8008646:	f820 1c02 	strh.w	r1, [r0, #-2]
 800864a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800864e:	1c82      	adds	r2, r0, #2
 8008650:	4563      	cmp	r3, ip
 8008652:	d1eb      	bne.n	800862c <_DrawBitmap+0x11c4>
 8008654:	e7bc      	b.n	80085d0 <_DrawBitmap+0x1168>
 8008656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800865a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800865e:	f829 2c02 	strh.w	r2, [r9, #-2]
 8008662:	e7d2      	b.n	800860a <_DrawBitmap+0x11a2>
 8008664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008666:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8008668:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800866c:	f7ff bb55 	b.w	8007d1a <_DrawBitmap+0x8b2>
 8008670:	2902      	cmp	r1, #2
 8008672:	f47f af2f 	bne.w	80084d4 <_DrawBitmap+0x106c>
 8008676:	2f00      	cmp	r7, #0
 8008678:	d07f      	beq.n	800877a <_DrawBitmap+0x1312>
 800867a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800867e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8008682:	f81b 000a 	ldrb.w	r0, [fp, sl]
 8008686:	f108 32ff 	add.w	r2, r8, #4294967295
 800868a:	f002 0a01 	and.w	sl, r2, #1
 800868e:	b138      	cbz	r0, 80086a0 <_DrawBitmap+0x1238>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008694:	f829 0c02 	strh.w	r0, [r9, #-2]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4638      	mov	r0, r7
 800869c:	4632      	mov	r2, r6
 800869e:	4798      	blx	r3
 80086a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80086a2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80086a6:	1e48      	subs	r0, r1, #1
 80086a8:	f10c 0801 	add.w	r8, ip, #1
 80086ac:	9006      	str	r0, [sp, #24]
 80086ae:	f109 0c02 	add.w	ip, r9, #2
 80086b2:	d08c      	beq.n	80085ce <_DrawBitmap+0x1166>
 80086b4:	f1ba 0f00 	cmp.w	sl, #0
 80086b8:	d017      	beq.n	80086ea <_DrawBitmap+0x1282>
 80086ba:	f81b 3008 	ldrb.w	r3, [fp, r8]
 80086be:	b15b      	cbz	r3, 80086d8 <_DrawBitmap+0x1270>
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	f82c 3c02 	strh.w	r3, [ip, #-2]
 80086c6:	4638      	mov	r0, r7
 80086c8:	6813      	ldr	r3, [r2, #0]
 80086ca:	f8cd c008 	str.w	ip, [sp, #8]
 80086ce:	4641      	mov	r1, r8
 80086d0:	4632      	mov	r2, r6
 80086d2:	4798      	blx	r3
 80086d4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80086d8:	9906      	ldr	r1, [sp, #24]
 80086da:	1e48      	subs	r0, r1, #1
 80086dc:	f108 0801 	add.w	r8, r8, #1
 80086e0:	f10c 0c02 	add.w	ip, ip, #2
 80086e4:	9006      	str	r0, [sp, #24]
 80086e6:	f43f af72 	beq.w	80085ce <_DrawBitmap+0x1166>
 80086ea:	9508      	str	r5, [sp, #32]
 80086ec:	4645      	mov	r5, r8
 80086ee:	46b0      	mov	r8, r6
 80086f0:	4626      	mov	r6, r4
 80086f2:	4664      	mov	r4, ip
 80086f4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80086f8:	f105 0a01 	add.w	sl, r5, #1
 80086fc:	4629      	mov	r1, r5
 80086fe:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8008702:	4638      	mov	r0, r7
 8008704:	4642      	mov	r2, r8
 8008706:	b145      	cbz	r5, 800871a <_DrawBitmap+0x12b2>
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f824 5c02 	strh.w	r5, [r4, #-2]
 800870e:	681d      	ldr	r5, [r3, #0]
 8008710:	f8cd c008 	str.w	ip, [sp, #8]
 8008714:	47a8      	blx	r5
 8008716:	f8dd c008 	ldr.w	ip, [sp, #8]
 800871a:	f81b 100a 	ldrb.w	r1, [fp, sl]
 800871e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008722:	3402      	adds	r4, #2
 8008724:	b159      	cbz	r1, 800873e <_DrawBitmap+0x12d6>
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	f824 1c02 	strh.w	r1, [r4, #-2]
 800872c:	6813      	ldr	r3, [r2, #0]
 800872e:	f8cd c008 	str.w	ip, [sp, #8]
 8008732:	4638      	mov	r0, r7
 8008734:	4651      	mov	r1, sl
 8008736:	4642      	mov	r2, r8
 8008738:	4798      	blx	r3
 800873a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800873e:	3402      	adds	r4, #2
 8008740:	f1bc 0c01 	subs.w	ip, ip, #1
 8008744:	f10a 0501 	add.w	r5, sl, #1
 8008748:	d1d6      	bne.n	80086f8 <_DrawBitmap+0x1290>
 800874a:	4634      	mov	r4, r6
 800874c:	9d08      	ldr	r5, [sp, #32]
 800874e:	4646      	mov	r6, r8
 8008750:	e73d      	b.n	80085ce <_DrawBitmap+0x1166>
 8008752:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8008756:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008758:	f850 2029 	ldr.w	r2, [r0, r9, lsl #2]
 800875c:	f8ac 2000 	strh.w	r2, [ip]
 8008760:	f1ba 0f00 	cmp.w	sl, #0
 8008764:	f43f aacf 	beq.w	8007d06 <_DrawBitmap+0x89e>
 8008768:	f8da 3008 	ldr.w	r3, [sl, #8]
 800876c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800876e:	681e      	ldr	r6, [r3, #0]
 8008770:	9a04      	ldr	r2, [sp, #16]
 8008772:	4650      	mov	r0, sl
 8008774:	47b0      	blx	r6
 8008776:	f7ff bac6 	b.w	8007d06 <_DrawBitmap+0x89e>
 800877a:	462b      	mov	r3, r5
 800877c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008784:	ebc8 0005 	rsb	r0, r8, r5
 8008788:	43c1      	mvns	r1, r0
 800878a:	f001 0001 	and.w	r0, r1, #1
 800878e:	b11a      	cbz	r2, 8008798 <_DrawBitmap+0x1330>
 8008790:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008794:	f829 2c02 	strh.w	r2, [r9, #-2]
 8008798:	4598      	cmp	r8, r3
 800879a:	f109 0202 	add.w	r2, r9, #2
 800879e:	f43f af17 	beq.w	80085d0 <_DrawBitmap+0x1168>
 80087a2:	b150      	cbz	r0, 80087ba <_DrawBitmap+0x1352>
 80087a4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80087a8:	b109      	cbz	r1, 80087ae <_DrawBitmap+0x1346>
 80087aa:	f822 1c02 	strh.w	r1, [r2, #-2]
 80087ae:	f8dd c010 	ldr.w	ip, [sp, #16]
 80087b2:	3202      	adds	r2, #2
 80087b4:	459c      	cmp	ip, r3
 80087b6:	f43f af0b 	beq.w	80085d0 <_DrawBitmap+0x1168>
 80087ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 80087be:	1c91      	adds	r1, r2, #2
 80087c0:	b108      	cbz	r0, 80087c6 <_DrawBitmap+0x135e>
 80087c2:	f822 0c02 	strh.w	r0, [r2, #-2]
 80087c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ca:	b10a      	cbz	r2, 80087d0 <_DrawBitmap+0x1368>
 80087cc:	f821 2c02 	strh.w	r2, [r1, #-2]
 80087d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80087d4:	1c8a      	adds	r2, r1, #2
 80087d6:	4598      	cmp	r8, r3
 80087d8:	d1ef      	bne.n	80087ba <_DrawBitmap+0x1352>
 80087da:	e6f9      	b.n	80085d0 <_DrawBitmap+0x1168>
 80087dc:	0874      	lsrs	r4, r6, #1
 80087de:	1c6f      	adds	r7, r5, #1
 80087e0:	43ea      	mvns	r2, r5
 80087e2:	1938      	adds	r0, r7, r4
 80087e4:	1811      	adds	r1, r2, r0
 80087e6:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 80087ea:	f10c 0304 	add.w	r3, ip, #4
 80087ee:	f001 0201 	and.w	r2, r1, #1
 80087f2:	d006      	beq.n	8008802 <_DrawBitmap+0x139a>
 80087f4:	ea4f 1119 	mov.w	r1, r9, lsr #4
 80087f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80087fa:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80087fe:	f823 1c04 	strh.w	r1, [r3, #-4]
 8008802:	f019 090f 	ands.w	r9, r9, #15
 8008806:	d004      	beq.n	8008812 <_DrawBitmap+0x13aa>
 8008808:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800880a:	f857 1029 	ldr.w	r1, [r7, r9, lsl #2]
 800880e:	f823 1c02 	strh.w	r1, [r3, #-2]
 8008812:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 8008816:	3304      	adds	r3, #4
 8008818:	4285      	cmp	r5, r0
 800881a:	d044      	beq.n	80088a6 <_DrawBitmap+0x143e>
 800881c:	b1b2      	cbz	r2, 800884c <_DrawBitmap+0x13e4>
 800881e:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 8008822:	d006      	beq.n	8008832 <_DrawBitmap+0x13ca>
 8008824:	ea4f 1219 	mov.w	r2, r9, lsr #4
 8008828:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800882a:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
 800882e:	f823 1c04 	strh.w	r1, [r3, #-4]
 8008832:	f019 090f 	ands.w	r9, r9, #15
 8008836:	d004      	beq.n	8008842 <_DrawBitmap+0x13da>
 8008838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800883a:	f852 7029 	ldr.w	r7, [r2, r9, lsl #2]
 800883e:	f823 7c02 	strh.w	r7, [r3, #-2]
 8008842:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 8008846:	3304      	adds	r3, #4
 8008848:	4285      	cmp	r5, r0
 800884a:	d02c      	beq.n	80088a6 <_DrawBitmap+0x143e>
 800884c:	f019 0ff0 	tst.w	r9, #240	; 0xf0
 8008850:	ea4f 1119 	mov.w	r1, r9, lsr #4
 8008854:	f103 0204 	add.w	r2, r3, #4
 8008858:	d004      	beq.n	8008864 <_DrawBitmap+0x13fc>
 800885a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800885c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008860:	f823 1c04 	strh.w	r1, [r3, #-4]
 8008864:	f019 090f 	ands.w	r9, r9, #15
 8008868:	d004      	beq.n	8008874 <_DrawBitmap+0x140c>
 800886a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800886c:	f857 1029 	ldr.w	r1, [r7, r9, lsl #2]
 8008870:	f823 1c02 	strh.w	r1, [r3, #-2]
 8008874:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8008878:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800887c:	d005      	beq.n	800888a <_DrawBitmap+0x1422>
 800887e:	0919      	lsrs	r1, r3, #4
 8008880:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008882:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008886:	f822 1c04 	strh.w	r1, [r2, #-4]
 800888a:	f013 010f 	ands.w	r1, r3, #15
 800888e:	f102 0304 	add.w	r3, r2, #4
 8008892:	d004      	beq.n	800889e <_DrawBitmap+0x1436>
 8008894:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008896:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800889a:	f822 1c02 	strh.w	r1, [r2, #-2]
 800889e:	f815 9f01 	ldrb.w	r9, [r5, #1]!
 80088a2:	4285      	cmp	r5, r0
 80088a4:	d1d2      	bne.n	800884c <_DrawBitmap+0x13e4>
 80088a6:	1c65      	adds	r5, r4, #1
 80088a8:	f10b 0b02 	add.w	fp, fp, #2
 80088ac:	eb0c 0c85 	add.w	ip, ip, r5, lsl #2
 80088b0:	eb0b 0b44 	add.w	fp, fp, r4, lsl #1
 80088b4:	eba6 0144 	sub.w	r1, r6, r4, lsl #1
 80088b8:	f7ff bb15 	b.w	8007ee6 <_DrawBitmap+0xa7e>
 80088bc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80088c0:	f7ff b8a0 	b.w	8007a04 <_DrawBitmap+0x59c>
 80088c4:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80088c8:	f7ff b8c1 	b.w	8007a4e <_DrawBitmap+0x5e6>
 80088cc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80088d0:	f1ba 0f00 	cmp.w	sl, #0
 80088d4:	f47e aea4 	bne.w	8007620 <_DrawBitmap+0x1b8>
 80088d8:	f7fe bea5 	b.w	8007626 <_DrawBitmap+0x1be>
 80088dc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80088de:	2f00      	cmp	r7, #0
 80088e0:	f47e ae9e 	bne.w	8007620 <_DrawBitmap+0x1b8>
 80088e4:	f7fe be9f 	b.w	8007626 <_DrawBitmap+0x1be>

080088e8 <_XorPixel>:
 80088e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088ec:	4c1e      	ldr	r4, [pc, #120]	; (8008968 <_XorPixel+0x80>)
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	b083      	sub	sp, #12
 80088f2:	4681      	mov	r9, r0
 80088f4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80088f6:	4617      	mov	r7, r2
 80088f8:	4688      	mov	r8, r1
 80088fa:	f7fe fc0d 	bl	8007118 <GUI_ALLOC_LockH>
 80088fe:	6821      	ldr	r1, [r4, #0]
 8008900:	9000      	str	r0, [sp, #0]
 8008902:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8008904:	f7fe fc08 	bl	8007118 <GUI_ALLOC_LockH>
 8008908:	ac02      	add	r4, sp, #8
 800890a:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 800890e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008912:	68c2      	ldr	r2, [r0, #12]
 8008914:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8008918:	f100 0318 	add.w	r3, r0, #24
 800891c:	1b79      	subs	r1, r7, r5
 800891e:	4620      	mov	r0, r4
 8008920:	fb02 3501 	mla	r5, r2, r1, r3
 8008924:	f7fe fc0a 	bl	800713c <GUI_ALLOC_UnlockH>
 8008928:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800892c:	ebc6 0608 	rsb	r6, r6, r8
 8008930:	6882      	ldr	r2, [r0, #8]
 8008932:	4790      	blx	r2
 8008934:	9b00      	ldr	r3, [sp, #0]
 8008936:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 800893a:	695a      	ldr	r2, [r3, #20]
 800893c:	4048      	eors	r0, r1
 800893e:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
 8008942:	b15a      	cbz	r2, 800895c <_XorPixel+0x74>
 8008944:	4610      	mov	r0, r2
 8008946:	f7fe fbe7 	bl	8007118 <GUI_ALLOC_LockH>
 800894a:	9001      	str	r0, [sp, #4]
 800894c:	6883      	ldr	r3, [r0, #8]
 800894e:	4641      	mov	r1, r8
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	463a      	mov	r2, r7
 8008954:	4798      	blx	r3
 8008956:	4620      	mov	r0, r4
 8008958:	f7fe fbf0 	bl	800713c <GUI_ALLOC_UnlockH>
 800895c:	4668      	mov	r0, sp
 800895e:	f7fe fbed 	bl	800713c <GUI_ALLOC_UnlockH>
 8008962:	b003      	add	sp, #12
 8008964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008968:	1fffc808 	.word	0x1fffc808

0800896c <_GetPixelIndex>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	f64c 0308 	movw	r3, #51208	; 0xc808
 8008972:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8008976:	b082      	sub	sp, #8
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800897c:	460c      	mov	r4, r1
 800897e:	4616      	mov	r6, r2
 8008980:	f7fe fbca 	bl	8007118 <GUI_ALLOC_LockH>
 8008984:	ab02      	add	r3, sp, #8
 8008986:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800898a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800898e:	68c5      	ldr	r5, [r0, #12]
 8008990:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008994:	1a76      	subs	r6, r6, r1
 8008996:	3018      	adds	r0, #24
 8008998:	fb05 0506 	mla	r5, r5, r6, r0
 800899c:	1aa4      	subs	r4, r4, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fbcc 	bl	800713c <GUI_ALLOC_UnlockH>
 80089a4:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 80089a8:	b002      	add	sp, #8
 80089aa:	bd70      	pop	{r4, r5, r6, pc}

080089ac <_SetPixelIndex>:
 80089ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089b0:	4c1a      	ldr	r4, [pc, #104]	; (8008a1c <_SetPixelIndex+0x70>)
 80089b2:	6820      	ldr	r0, [r4, #0]
 80089b4:	b083      	sub	sp, #12
 80089b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80089b8:	460e      	mov	r6, r1
 80089ba:	4615      	mov	r5, r2
 80089bc:	4699      	mov	r9, r3
 80089be:	f7fe fbab 	bl	8007118 <GUI_ALLOC_LockH>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	9000      	str	r0, [sp, #0]
 80089c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80089c8:	f7fe fba6 	bl	8007118 <GUI_ALLOC_LockH>
 80089cc:	ac02      	add	r4, sp, #8
 80089ce:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80089d2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80089d6:	68c2      	ldr	r2, [r0, #12]
 80089d8:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80089dc:	f100 0118 	add.w	r1, r0, #24
 80089e0:	1beb      	subs	r3, r5, r7
 80089e2:	4620      	mov	r0, r4
 80089e4:	fb02 1703 	mla	r7, r2, r3, r1
 80089e8:	f7fe fba8 	bl	800713c <GUI_ALLOC_UnlockH>
 80089ec:	9800      	ldr	r0, [sp, #0]
 80089ee:	ebc8 0806 	rsb	r8, r8, r6
 80089f2:	6940      	ldr	r0, [r0, #20]
 80089f4:	f827 9018 	strh.w	r9, [r7, r8, lsl #1]
 80089f8:	b150      	cbz	r0, 8008a10 <_SetPixelIndex+0x64>
 80089fa:	f7fe fb8d 	bl	8007118 <GUI_ALLOC_LockH>
 80089fe:	9001      	str	r0, [sp, #4]
 8008a00:	6883      	ldr	r3, [r0, #8]
 8008a02:	4631      	mov	r1, r6
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	462a      	mov	r2, r5
 8008a08:	4798      	blx	r3
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f7fe fb96 	bl	800713c <GUI_ALLOC_UnlockH>
 8008a10:	4668      	mov	r0, sp
 8008a12:	f7fe fb93 	bl	800713c <GUI_ALLOC_UnlockH>
 8008a16:	b003      	add	sp, #12
 8008a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a1c:	1fffc808 	.word	0x1fffc808

08008a20 <_DrawVLine>:
 8008a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	4f6a      	ldr	r7, [pc, #424]	; (8008bd0 <_DrawVLine+0x1b0>)
 8008a26:	683c      	ldr	r4, [r7, #0]
 8008a28:	b084      	sub	sp, #16
 8008a2a:	4681      	mov	r9, r0
 8008a2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008a2e:	460e      	mov	r6, r1
 8008a30:	4614      	mov	r4, r2
 8008a32:	4698      	mov	r8, r3
 8008a34:	f7fe fb70 	bl	8007118 <GUI_ALLOC_LockH>
 8008a38:	9000      	str	r0, [sp, #0]
 8008a3a:	6940      	ldr	r0, [r0, #20]
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d15a      	bne.n	8008af6 <_DrawVLine+0xd6>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	9002      	str	r0, [sp, #8]
 8008a44:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008a46:	f7fe fb67 	bl	8007118 <GUI_ALLOC_LockH>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	a804      	add	r0, sp, #16
 8008a4e:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8008a52:	68d1      	ldr	r1, [r2, #12]
 8008a54:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8008a58:	f840 2d04 	str.w	r2, [r0, #-4]!
 8008a5c:	f102 0318 	add.w	r3, r2, #24
 8008a60:	ebce 0204 	rsb	r2, lr, r4
 8008a64:	fb01 3102 	mla	r1, r1, r2, r3
 8008a68:	1b75      	subs	r5, r6, r5
 8008a6a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8008a6e:	f7fe fb65 	bl	800713c <GUI_ALLOC_UnlockH>
 8008a72:	6838      	ldr	r0, [r7, #0]
 8008a74:	9f00      	ldr	r7, [sp, #0]
 8008a76:	7c03      	ldrb	r3, [r0, #16]
 8008a78:	68ff      	ldr	r7, [r7, #12]
 8008a7a:	07da      	lsls	r2, r3, #31
 8008a7c:	d43e      	bmi.n	8008afc <_DrawVLine+0xdc>
 8008a7e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008a80:	9802      	ldr	r0, [sp, #8]
 8008a82:	6811      	ldr	r1, [r2, #0]
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f000 808c 	beq.w	8008ba2 <_DrawVLine+0x182>
 8008a8a:	ebc4 0208 	rsb	r2, r4, r8
 8008a8e:	07d3      	lsls	r3, r2, #31
 8008a90:	fa1f f981 	uxth.w	r9, r1
 8008a94:	d518      	bpl.n	8008ac8 <_DrawVLine+0xa8>
 8008a96:	6881      	ldr	r1, [r0, #8]
 8008a98:	4622      	mov	r2, r4
 8008a9a:	680b      	ldr	r3, [r1, #0]
 8008a9c:	3401      	adds	r4, #1
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4798      	blx	r3
 8008aa2:	45a0      	cmp	r8, r4
 8008aa4:	f8a5 9000 	strh.w	r9, [r5]
 8008aa8:	443d      	add	r5, r7
 8008aaa:	db19      	blt.n	8008ae0 <_DrawVLine+0xc0>
 8008aac:	9802      	ldr	r0, [sp, #8]
 8008aae:	e00b      	b.n	8008ac8 <_DrawVLine+0xa8>
 8008ab0:	9802      	ldr	r0, [sp, #8]
 8008ab2:	6882      	ldr	r2, [r0, #8]
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4798      	blx	r3
 8008abc:	9802      	ldr	r0, [sp, #8]
 8008abe:	f825 9007 	strh.w	r9, [r5, r7]
 8008ac2:	3401      	adds	r4, #1
 8008ac4:	eb0a 0507 	add.w	r5, sl, r7
 8008ac8:	6883      	ldr	r3, [r0, #8]
 8008aca:	4622      	mov	r2, r4
 8008acc:	4631      	mov	r1, r6
 8008ace:	3401      	adds	r4, #1
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4798      	blx	r3
 8008ad4:	45a0      	cmp	r8, r4
 8008ad6:	eb05 0a07 	add.w	sl, r5, r7
 8008ada:	f8a5 9000 	strh.w	r9, [r5]
 8008ade:	dae7      	bge.n	8008ab0 <_DrawVLine+0x90>
 8008ae0:	4668      	mov	r0, sp
 8008ae2:	f7fe fb2b 	bl	800713c <GUI_ALLOC_UnlockH>
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	b113      	cbz	r3, 8008af0 <_DrawVLine+0xd0>
 8008aea:	a802      	add	r0, sp, #8
 8008aec:	f7fe fb26 	bl	800713c <GUI_ALLOC_UnlockH>
 8008af0:	b004      	add	sp, #16
 8008af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af6:	f7fe fb0f 	bl	8007118 <GUI_ALLOC_LockH>
 8008afa:	e7a1      	b.n	8008a40 <_DrawVLine+0x20>
 8008afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	4780      	blx	r0
 8008b04:	9902      	ldr	r1, [sp, #8]
 8008b06:	ebc4 0208 	rsb	r2, r4, r8
 8008b0a:	fa1f f980 	uxth.w	r9, r0
 8008b0e:	f002 0701 	and.w	r7, r2, #1
 8008b12:	b129      	cbz	r1, 8008b20 <_DrawVLine+0x100>
 8008b14:	688b      	ldr	r3, [r1, #8]
 8008b16:	4608      	mov	r0, r1
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	4798      	blx	r3
 8008b20:	9900      	ldr	r1, [sp, #0]
 8008b22:	8828      	ldrh	r0, [r5, #0]
 8008b24:	68cb      	ldr	r3, [r1, #12]
 8008b26:	3401      	adds	r4, #1
 8008b28:	ea89 0200 	eor.w	r2, r9, r0
 8008b2c:	4544      	cmp	r4, r8
 8008b2e:	802a      	strh	r2, [r5, #0]
 8008b30:	441d      	add	r5, r3
 8008b32:	dcd5      	bgt.n	8008ae0 <_DrawVLine+0xc0>
 8008b34:	b187      	cbz	r7, 8008b58 <_DrawVLine+0x138>
 8008b36:	9802      	ldr	r0, [sp, #8]
 8008b38:	b120      	cbz	r0, 8008b44 <_DrawVLine+0x124>
 8008b3a:	6881      	ldr	r1, [r0, #8]
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	680b      	ldr	r3, [r1, #0]
 8008b40:	4631      	mov	r1, r6
 8008b42:	4798      	blx	r3
 8008b44:	9a00      	ldr	r2, [sp, #0]
 8008b46:	8828      	ldrh	r0, [r5, #0]
 8008b48:	68d1      	ldr	r1, [r2, #12]
 8008b4a:	3401      	adds	r4, #1
 8008b4c:	ea89 0300 	eor.w	r3, r9, r0
 8008b50:	4544      	cmp	r4, r8
 8008b52:	802b      	strh	r3, [r5, #0]
 8008b54:	440d      	add	r5, r1
 8008b56:	dcc3      	bgt.n	8008ae0 <_DrawVLine+0xc0>
 8008b58:	9b02      	ldr	r3, [sp, #8]
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4618      	mov	r0, r3
 8008b60:	b11b      	cbz	r3, 8008b6a <_DrawVLine+0x14a>
 8008b62:	689f      	ldr	r7, [r3, #8]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	4798      	blx	r3
 8008b68:	9b02      	ldr	r3, [sp, #8]
 8008b6a:	9800      	ldr	r0, [sp, #0]
 8008b6c:	f8b5 c000 	ldrh.w	ip, [r5]
 8008b70:	68c7      	ldr	r7, [r0, #12]
 8008b72:	ea89 020c 	eor.w	r2, r9, ip
 8008b76:	3401      	adds	r4, #1
 8008b78:	802a      	strh	r2, [r5, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	19ef      	adds	r7, r5, r7
 8008b80:	4622      	mov	r2, r4
 8008b82:	b113      	cbz	r3, 8008b8a <_DrawVLine+0x16a>
 8008b84:	689d      	ldr	r5, [r3, #8]
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	4798      	blx	r3
 8008b8a:	9800      	ldr	r0, [sp, #0]
 8008b8c:	8839      	ldrh	r1, [r7, #0]
 8008b8e:	68c2      	ldr	r2, [r0, #12]
 8008b90:	3401      	adds	r4, #1
 8008b92:	ea89 0501 	eor.w	r5, r9, r1
 8008b96:	4544      	cmp	r4, r8
 8008b98:	803d      	strh	r5, [r7, #0]
 8008b9a:	eb07 0502 	add.w	r5, r7, r2
 8008b9e:	dddb      	ble.n	8008b58 <_DrawVLine+0x138>
 8008ba0:	e79e      	b.n	8008ae0 <_DrawVLine+0xc0>
 8008ba2:	ebc4 0408 	rsb	r4, r4, r8
 8008ba6:	b288      	uxth	r0, r1
 8008ba8:	4623      	mov	r3, r4
 8008baa:	8028      	strh	r0, [r5, #0]
 8008bac:	f004 0401 	and.w	r4, r4, #1
 8008bb0:	19ed      	adds	r5, r5, r7
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d094      	beq.n	8008ae0 <_DrawVLine+0xc0>
 8008bb6:	b11c      	cbz	r4, 8008bc0 <_DrawVLine+0x1a0>
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	8028      	strh	r0, [r5, #0]
 8008bbc:	443d      	add	r5, r7
 8008bbe:	d08f      	beq.n	8008ae0 <_DrawVLine+0xc0>
 8008bc0:	3b02      	subs	r3, #2
 8008bc2:	8028      	strh	r0, [r5, #0]
 8008bc4:	53e8      	strh	r0, [r5, r7]
 8008bc6:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8008bca:	d1f9      	bne.n	8008bc0 <_DrawVLine+0x1a0>
 8008bcc:	e788      	b.n	8008ae0 <_DrawVLine+0xc0>
 8008bce:	bf00      	nop
 8008bd0:	1fffc808 	.word	0x1fffc808

08008bd4 <_FillRect>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	f64c 0508 	movw	r5, #51208	; 0xc808
 8008bdc:	f6c1 75ff 	movt	r5, #8191	; 0x1fff
 8008be0:	b08b      	sub	sp, #44	; 0x2c
 8008be2:	682c      	ldr	r4, [r5, #0]
 8008be4:	9006      	str	r0, [sp, #24]
 8008be6:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8008be8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008bea:	6835      	ldr	r5, [r6, #0]
 8008bec:	460c      	mov	r4, r1
 8008bee:	469b      	mov	fp, r3
 8008bf0:	4690      	mov	r8, r2
 8008bf2:	f7fe fa91 	bl	8007118 <GUI_ALLOC_LockH>
 8008bf6:	f64c 0208 	movw	r2, #51208	; 0xc808
 8008bfa:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 8008bfe:	9008      	str	r0, [sp, #32]
 8008c00:	6813      	ldr	r3, [r2, #0]
 8008c02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008c04:	f7fe fa88 	bl	8007118 <GUI_ALLOC_LockH>
 8008c08:	af0a      	add	r7, sp, #40	; 0x28
 8008c0a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8008c0e:	68c2      	ldr	r2, [r0, #12]
 8008c10:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8008c14:	f847 0d04 	str.w	r0, [r7, #-4]!
 8008c18:	ebc1 0308 	rsb	r3, r1, r8
 8008c1c:	3018      	adds	r0, #24
 8008c1e:	fb02 0103 	mla	r1, r2, r3, r0
 8008c22:	1ba2      	subs	r2, r4, r6
 8008c24:	4638      	mov	r0, r7
 8008c26:	eb01 0642 	add.w	r6, r1, r2, lsl #1
 8008c2a:	f7fe fa87 	bl	800713c <GUI_ALLOC_UnlockH>
 8008c2e:	9b08      	ldr	r3, [sp, #32]
 8008c30:	68d9      	ldr	r1, [r3, #12]
 8008c32:	6958      	ldr	r0, [r3, #20]
 8008c34:	9105      	str	r1, [sp, #20]
 8008c36:	ebc4 0c0b 	rsb	ip, r4, fp
 8008c3a:	f10c 0b01 	add.w	fp, ip, #1
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f040 80c6 	bne.w	8008dd0 <_FillRect+0x1fc>
 8008c44:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8008c46:	45a0      	cmp	r8, r4
 8008c48:	f300 80b6 	bgt.w	8008db8 <_FillRect+0x1e4>
 8008c4c:	b2a8      	uxth	r0, r5
 8008c4e:	9007      	str	r0, [sp, #28]
 8008c50:	f64c 0508 	movw	r5, #51208	; 0xc808
 8008c54:	f6c1 75ff 	movt	r5, #8191	; 0x1fff
 8008c58:	682c      	ldr	r4, [r5, #0]
 8008c5a:	7c22      	ldrb	r2, [r4, #16]
 8008c5c:	07d1      	lsls	r1, r2, #31
 8008c5e:	f140 80b1 	bpl.w	8008dc4 <_FillRect+0x1f0>
 8008c62:	9b06      	ldr	r3, [sp, #24]
 8008c64:	6919      	ldr	r1, [r3, #16]
 8008c66:	6888      	ldr	r0, [r1, #8]
 8008c68:	4780      	blx	r0
 8008c6a:	f3c6 0140 	ubfx	r1, r6, #1, #1
 8008c6e:	4559      	cmp	r1, fp
 8008c70:	bf28      	it	cs
 8008c72:	4659      	movcs	r1, fp
 8008c74:	f1bb 0f01 	cmp.w	fp, #1
 8008c78:	bf98      	it	ls
 8008c7a:	4659      	movls	r1, fp
 8008c7c:	b283      	uxth	r3, r0
 8008c7e:	2900      	cmp	r1, #0
 8008c80:	f000 80b7 	beq.w	8008df2 <_FillRect+0x21e>
 8008c84:	4632      	mov	r2, r6
 8008c86:	2401      	movs	r4, #1
 8008c88:	f832 5b02 	ldrh.w	r5, [r2], #2
 8008c8c:	1e4f      	subs	r7, r1, #1
 8008c8e:	405d      	eors	r5, r3
 8008c90:	42a1      	cmp	r1, r4
 8008c92:	f822 5c02 	strh.w	r5, [r2, #-2]
 8008c96:	ea07 0704 	and.w	r7, r7, r4
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f10b 35ff 	add.w	r5, fp, #4294967295
 8008ca0:	d91a      	bls.n	8008cd8 <_FillRect+0x104>
 8008ca2:	b14f      	cbz	r7, 8008cb8 <_FillRect+0xe4>
 8008ca4:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008ca8:	2402      	movs	r4, #2
 8008caa:	4058      	eors	r0, r3
 8008cac:	3d01      	subs	r5, #1
 8008cae:	42a1      	cmp	r1, r4
 8008cb0:	f822 0c02 	strh.w	r0, [r2, #-2]
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	d90f      	bls.n	8008cd8 <_FillRect+0x104>
 8008cb8:	8817      	ldrh	r7, [r2, #0]
 8008cba:	4610      	mov	r0, r2
 8008cbc:	405f      	eors	r7, r3
 8008cbe:	f820 7b02 	strh.w	r7, [r0], #2
 8008cc2:	8857      	ldrh	r7, [r2, #2]
 8008cc4:	3402      	adds	r4, #2
 8008cc6:	1c82      	adds	r2, r0, #2
 8008cc8:	3d02      	subs	r5, #2
 8008cca:	ea87 0003 	eor.w	r0, r7, r3
 8008cce:	42a1      	cmp	r1, r4
 8008cd0:	f822 0c02 	strh.w	r0, [r2, #-2]
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	d8ef      	bhi.n	8008cb8 <_FillRect+0xe4>
 8008cd8:	458b      	cmp	fp, r1
 8008cda:	d065      	beq.n	8008da8 <_FillRect+0x1d4>
 8008cdc:	ebc1 020b 	rsb	r2, r1, fp
 8008ce0:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8008ce4:	9204      	str	r2, [sp, #16]
 8008ce6:	ea4f 0a4e 	mov.w	sl, lr, lsl #1
 8008cea:	f1be 0f00 	cmp.w	lr, #0
 8008cee:	d03a      	beq.n	8008d66 <_FillRect+0x192>
 8008cf0:	2700      	movs	r7, #0
 8008cf2:	f856 4011 	ldr.w	r4, [r6, r1, lsl #1]
 8008cf6:	f363 070f 	bfi	r7, r3, #0, #16
 8008cfa:	f363 471f 	bfi	r7, r3, #16, #16
 8008cfe:	ea87 0204 	eor.w	r2, r7, r4
 8008d02:	2401      	movs	r4, #1
 8008d04:	f10e 39ff 	add.w	r9, lr, #4294967295
 8008d08:	eb06 0c41 	add.w	ip, r6, r1, lsl #1
 8008d0c:	4574      	cmp	r4, lr
 8008d0e:	f846 2011 	str.w	r2, [r6, r1, lsl #1]
 8008d12:	ea09 0204 	and.w	r2, r9, r4
 8008d16:	f10c 0104 	add.w	r1, ip, #4
 8008d1a:	d21d      	bcs.n	8008d58 <_FillRect+0x184>
 8008d1c:	b13a      	cbz	r2, 8008d2e <_FillRect+0x15a>
 8008d1e:	680a      	ldr	r2, [r1, #0]
 8008d20:	2402      	movs	r4, #2
 8008d22:	407a      	eors	r2, r7
 8008d24:	4574      	cmp	r4, lr
 8008d26:	468c      	mov	ip, r1
 8008d28:	f841 2b04 	str.w	r2, [r1], #4
 8008d2c:	d214      	bcs.n	8008d58 <_FillRect+0x184>
 8008d2e:	9303      	str	r3, [sp, #12]
 8008d30:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008d34:	460a      	mov	r2, r1
 8008d36:	ea87 0903 	eor.w	r9, r7, r3
 8008d3a:	f842 9b04 	str.w	r9, [r2], #4
 8008d3e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008d42:	3402      	adds	r4, #2
 8008d44:	ea87 0903 	eor.w	r9, r7, r3
 8008d48:	f8c1 9004 	str.w	r9, [r1, #4]
 8008d4c:	1d11      	adds	r1, r2, #4
 8008d4e:	4574      	cmp	r4, lr
 8008d50:	f10c 0c08 	add.w	ip, ip, #8
 8008d54:	d3ec      	bcc.n	8008d30 <_FillRect+0x15c>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	9904      	ldr	r1, [sp, #16]
 8008d5a:	4551      	cmp	r1, sl
 8008d5c:	ebca 0505 	rsb	r5, sl, r5
 8008d60:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 8008d64:	d020      	beq.n	8008da8 <_FillRect+0x1d4>
 8008d66:	8804      	ldrh	r4, [r0, #0]
 8008d68:	4602      	mov	r2, r0
 8008d6a:	405c      	eors	r4, r3
 8008d6c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008d70:	f822 4b02 	strh.w	r4, [r2], #2
 8008d74:	1a28      	subs	r0, r5, r0
 8008d76:	1e81      	subs	r1, r0, #2
 8008d78:	42aa      	cmp	r2, r5
 8008d7a:	f3c1 0440 	ubfx	r4, r1, #1, #1
 8008d7e:	d013      	beq.n	8008da8 <_FillRect+0x1d4>
 8008d80:	b12c      	cbz	r4, 8008d8e <_FillRect+0x1ba>
 8008d82:	8810      	ldrh	r0, [r2, #0]
 8008d84:	4058      	eors	r0, r3
 8008d86:	f822 0b02 	strh.w	r0, [r2], #2
 8008d8a:	42aa      	cmp	r2, r5
 8008d8c:	d00c      	beq.n	8008da8 <_FillRect+0x1d4>
 8008d8e:	8814      	ldrh	r4, [r2, #0]
 8008d90:	4611      	mov	r1, r2
 8008d92:	405c      	eors	r4, r3
 8008d94:	f821 4b02 	strh.w	r4, [r1], #2
 8008d98:	8850      	ldrh	r0, [r2, #2]
 8008d9a:	460a      	mov	r2, r1
 8008d9c:	ea80 0403 	eor.w	r4, r0, r3
 8008da0:	f822 4b02 	strh.w	r4, [r2], #2
 8008da4:	42aa      	cmp	r2, r5
 8008da6:	d1f2      	bne.n	8008d8e <_FillRect+0x1ba>
 8008da8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8008daa:	9d05      	ldr	r5, [sp, #20]
 8008dac:	f108 0801 	add.w	r8, r8, #1
 8008db0:	4544      	cmp	r4, r8
 8008db2:	442e      	add	r6, r5
 8008db4:	f6bf af4c 	bge.w	8008c50 <_FillRect+0x7c>
 8008db8:	a808      	add	r0, sp, #32
 8008dba:	f7fe f9bf 	bl	800713c <GUI_ALLOC_UnlockH>
 8008dbe:	b00b      	add	sp, #44	; 0x2c
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	9907      	ldr	r1, [sp, #28]
 8008dc8:	465a      	mov	r2, fp
 8008dca:	f001 f813 	bl	8009df4 <GUI__memset16>
 8008dce:	e7eb      	b.n	8008da8 <_FillRect+0x1d4>
 8008dd0:	f7fe f9a2 	bl	8007118 <GUI_ALLOC_LockH>
 8008dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008dd6:	9009      	str	r0, [sp, #36]	; 0x24
 8008dd8:	ebc8 0302 	rsb	r3, r8, r2
 8008ddc:	1c59      	adds	r1, r3, #1
 8008dde:	9100      	str	r1, [sp, #0]
 8008de0:	4642      	mov	r2, r8
 8008de2:	4621      	mov	r1, r4
 8008de4:	465b      	mov	r3, fp
 8008de6:	f002 f9c7 	bl	800b178 <GUI_USAGE_AddRect>
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7fe f9a6 	bl	800713c <GUI_ALLOC_UnlockH>
 8008df0:	e728      	b.n	8008c44 <_FillRect+0x70>
 8008df2:	4630      	mov	r0, r6
 8008df4:	465d      	mov	r5, fp
 8008df6:	e771      	b.n	8008cdc <_FillRect+0x108>

08008df8 <_DrawHLine>:
 8008df8:	b500      	push	{lr}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	9200      	str	r2, [sp, #0]
 8008dfe:	f7ff fee9 	bl	8008bd4 <_FillRect>
 8008e02:	b003      	add	sp, #12
 8008e04:	bd00      	pop	{pc}
 8008e06:	bf00      	nop

08008e08 <_OnExit>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	f64d 34bc 	movw	r4, #56252	; 0xdbbc
 8008e0e:	f6c1 74ff 	movt	r4, #8191	; 0x1fff
 8008e12:	6820      	ldr	r0, [r4, #0]
 8008e14:	f7fe f8a6 	bl	8006f64 <GUI_ALLOC_FreeFixedBlock>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	bd10      	pop	{r4, pc}
 8008e1e:	bf00      	nop

08008e20 <LCD_InitColors>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4c0b      	ldr	r4, [pc, #44]	; (8008e50 <LCD_InitColors+0x30>)
 8008e24:	6825      	ldr	r5, [r4, #0]
 8008e26:	b10d      	cbz	r5, 8008e2c <LCD_InitColors+0xc>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <LCD_InitColors+0x34>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	0080      	lsls	r0, r0, #2
 8008e32:	f7fe f8a1 	bl	8006f78 <GUI_ALLOC_GetFixedBlock>
 8008e36:	6020      	str	r0, [r4, #0]
 8008e38:	b138      	cbz	r0, 8008e4a <LCD_InitColors+0x2a>
 8008e3a:	4907      	ldr	r1, [pc, #28]	; (8008e58 <LCD_InitColors+0x38>)
 8008e3c:	4a07      	ldr	r2, [pc, #28]	; (8008e5c <LCD_InitColors+0x3c>)
 8008e3e:	4608      	mov	r0, r1
 8008e40:	600a      	str	r2, [r1, #0]
 8008e42:	f7fc fe8b 	bl	8005b5c <GUI__RegisterExit>
 8008e46:	4628      	mov	r0, r5
 8008e48:	bd38      	pop	{r3, r4, r5, pc}
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	bd38      	pop	{r3, r4, r5, pc}
 8008e4e:	bf00      	nop
 8008e50:	1fffdbbc 	.word	0x1fffdbbc
 8008e54:	1fffc810 	.word	0x1fffc810
 8008e58:	1fffc95c 	.word	0x1fffc95c
 8008e5c:	08008e09 	.word	0x08008e09

08008e60 <LCD_GetpPalConvTableBM>:
 8008e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d03a      	beq.n	8008ede <LCD_GetpPalConvTableBM+0x7e>
 8008e68:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8008e6c:	f1b8 0f00 	cmp.w	r8, #0
 8008e70:	d037      	beq.n	8008ee2 <LCD_GetpPalConvTableBM+0x82>
 8008e72:	4f1d      	ldr	r7, [pc, #116]	; (8008ee8 <LCD_GetpPalConvTableBM+0x88>)
 8008e74:	683d      	ldr	r5, [r7, #0]
 8008e76:	b36d      	cbz	r5, 8008ed4 <LCD_GetpPalConvTableBM+0x74>
 8008e78:	6803      	ldr	r3, [r0, #0]
 8008e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7e:	dc2c      	bgt.n	8008eda <LCD_GetpPalConvTableBM+0x7a>
 8008e80:	4a1a      	ldr	r2, [pc, #104]	; (8008eec <LCD_GetpPalConvTableBM+0x8c>)
 8008e82:	6810      	ldr	r0, [r2, #0]
 8008e84:	4298      	cmp	r0, r3
 8008e86:	bfb4      	ite	lt
 8008e88:	4681      	movlt	r9, r0
 8008e8a:	4699      	movge	r9, r3
 8008e8c:	f1b9 0f00 	cmp.w	r9, #0
 8008e90:	dd20      	ble.n	8008ed4 <LCD_GetpPalConvTableBM+0x74>
 8008e92:	2400      	movs	r4, #0
 8008e94:	f019 0f01 	tst.w	r9, #1
 8008e98:	4626      	mov	r6, r4
 8008e9a:	d111      	bne.n	8008ec0 <LCD_GetpPalConvTableBM+0x60>
 8008e9c:	f8d8 0000 	ldr.w	r0, [r8]
 8008ea0:	f000 ff50 	bl	8009d44 <LCD_Color2Index>
 8008ea4:	2601      	movs	r6, #1
 8008ea6:	6028      	str	r0, [r5, #0]
 8008ea8:	2404      	movs	r4, #4
 8008eaa:	683d      	ldr	r5, [r7, #0]
 8008eac:	e008      	b.n	8008ec0 <LCD_GetpPalConvTableBM+0x60>
 8008eae:	f858 0004 	ldr.w	r0, [r8, r4]
 8008eb2:	683d      	ldr	r5, [r7, #0]
 8008eb4:	f000 ff46 	bl	8009d44 <LCD_Color2Index>
 8008eb8:	5128      	str	r0, [r5, r4]
 8008eba:	683d      	ldr	r5, [r7, #0]
 8008ebc:	3601      	adds	r6, #1
 8008ebe:	3404      	adds	r4, #4
 8008ec0:	f858 0004 	ldr.w	r0, [r8, r4]
 8008ec4:	f000 ff3e 	bl	8009d44 <LCD_Color2Index>
 8008ec8:	3601      	adds	r6, #1
 8008eca:	5128      	str	r0, [r5, r4]
 8008ecc:	3404      	adds	r4, #4
 8008ece:	454e      	cmp	r6, r9
 8008ed0:	d1ed      	bne.n	8008eae <LCD_GetpPalConvTableBM+0x4e>
 8008ed2:	683d      	ldr	r5, [r7, #0]
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eda:	2500      	movs	r5, #0
 8008edc:	e7fa      	b.n	8008ed4 <LCD_GetpPalConvTableBM+0x74>
 8008ede:	4605      	mov	r5, r0
 8008ee0:	e7f8      	b.n	8008ed4 <LCD_GetpPalConvTableBM+0x74>
 8008ee2:	4645      	mov	r5, r8
 8008ee4:	e7f6      	b.n	8008ed4 <LCD_GetpPalConvTableBM+0x74>
 8008ee6:	bf00      	nop
 8008ee8:	1fffdbbc 	.word	0x1fffdbbc
 8008eec:	1fffc810 	.word	0x1fffc810

08008ef0 <LCD_InitLUT>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	f002 f9af 	bl	800b258 <LCD_GetNumLayers>
 8008efa:	1e07      	subs	r7, r0, #0
 8008efc:	dd5c      	ble.n	8008fb8 <LCD_InitLUT+0xc8>
 8008efe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8008fc0 <LCD_InitLUT+0xd0>
 8008f02:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8008fc4 <LCD_InitLUT+0xd4>
 8008f06:	2400      	movs	r4, #0
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f7fc fcef 	bl	80058ec <GUI_DEVICE__GetpDriver>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d04f      	beq.n	8008fb2 <LCD_InitLUT+0xc2>
 8008f12:	f8d9 3000 	ldr.w	r3, [r9]
 8008f16:	4620      	mov	r0, r4
 8008f18:	f893 a011 	ldrb.w	sl, [r3, #17]
 8008f1c:	745c      	strb	r4, [r3, #17]
 8008f1e:	f002 f9a3 	bl	800b268 <LCD_GetBitsPerPixelEx>
 8008f22:	2808      	cmp	r0, #8
 8008f24:	dc41      	bgt.n	8008faa <LCD_InitLUT+0xba>
 8008f26:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 8008f2a:	f24e 42f4 	movw	r2, #58612	; 0xe4f4
 8008f2e:	6901      	ldr	r1, [r0, #16]
 8008f30:	f6c0 0200 	movt	r2, #2048	; 0x800
 8008f34:	4291      	cmp	r1, r2
 8008f36:	d038      	beq.n	8008faa <LCD_InitLUT+0xba>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f002 f9a3 	bl	800b284 <LCD_GetNumColorsEx>
 8008f3e:	f1b0 0800 	subs.w	r8, r0, #0
 8008f42:	dd32      	ble.n	8008faa <LCD_InitLUT+0xba>
 8008f44:	2300      	movs	r3, #0
 8008f46:	4618      	mov	r0, r3
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	f000 ff0d 	bl	8009d68 <LCD_Index2Color>
 8008f4e:	2501      	movs	r5, #1
 8008f50:	4602      	mov	r2, r0
 8008f52:	9901      	ldr	r1, [sp, #4]
 8008f54:	4620      	mov	r0, r4
 8008f56:	f108 36ff 	add.w	r6, r8, #4294967295
 8008f5a:	f7fc faf9 	bl	8005550 <LCD_SetLUTEntryEx>
 8008f5e:	45a8      	cmp	r8, r5
 8008f60:	f006 0601 	and.w	r6, r6, #1
 8008f64:	d021      	beq.n	8008faa <LCD_InitLUT+0xba>
 8008f66:	b156      	cbz	r6, 8008f7e <LCD_InitLUT+0x8e>
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f000 fefd 	bl	8009d68 <LCD_Index2Color>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4602      	mov	r2, r0
 8008f72:	2502      	movs	r5, #2
 8008f74:	4620      	mov	r0, r4
 8008f76:	f7fc faeb 	bl	8005550 <LCD_SetLUTEntryEx>
 8008f7a:	45a8      	cmp	r8, r5
 8008f7c:	d015      	beq.n	8008faa <LCD_InitLUT+0xba>
 8008f7e:	b2ee      	uxtb	r6, r5
 8008f80:	4630      	mov	r0, r6
 8008f82:	f000 fef1 	bl	8009d68 <LCD_Index2Color>
 8008f86:	3501      	adds	r5, #1
 8008f88:	4602      	mov	r2, r0
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	b2ee      	uxtb	r6, r5
 8008f90:	f7fc fade 	bl	8005550 <LCD_SetLUTEntryEx>
 8008f94:	4630      	mov	r0, r6
 8008f96:	f000 fee7 	bl	8009d68 <LCD_Index2Color>
 8008f9a:	3501      	adds	r5, #1
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7fc fad5 	bl	8005550 <LCD_SetLUTEntryEx>
 8008fa6:	45a8      	cmp	r8, r5
 8008fa8:	d1e9      	bne.n	8008f7e <LCD_InitLUT+0x8e>
 8008faa:	f8d9 0000 	ldr.w	r0, [r9]
 8008fae:	f880 a011 	strb.w	sl, [r0, #17]
 8008fb2:	3401      	adds	r4, #1
 8008fb4:	42bc      	cmp	r4, r7
 8008fb6:	d1a7      	bne.n	8008f08 <LCD_InitLUT+0x18>
 8008fb8:	b003      	add	sp, #12
 8008fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbe:	bf00      	nop
 8008fc0:	1fffc808 	.word	0x1fffc808
 8008fc4:	1fffdaf0 	.word	0x1fffdaf0

08008fc8 <_SetBkColor>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	4c0c      	ldr	r4, [pc, #48]	; (8008ffc <_SetBkColor+0x34>)
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008fd0:	4281      	cmp	r1, r0
 8008fd2:	d00f      	beq.n	8008ff4 <_SetBkColor+0x2c>
 8008fd4:	7c59      	ldrb	r1, [r3, #17]
 8008fd6:	6358      	str	r0, [r3, #52]	; 0x34
 8008fd8:	4b09      	ldr	r3, [pc, #36]	; (8009000 <_SetBkColor+0x38>)
 8008fda:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8008fde:	6911      	ldr	r1, [r2, #16]
 8008fe0:	680b      	ldr	r3, [r1, #0]
 8008fe2:	4798      	blx	r3
 8008fe4:	6821      	ldr	r1, [r4, #0]
 8008fe6:	7c0a      	ldrb	r2, [r1, #16]
 8008fe8:	f002 0304 	and.w	r3, r2, #4
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	b912      	cbnz	r2, 8008ff6 <_SetBkColor+0x2e>
 8008ff0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8008ff2:	6008      	str	r0, [r1, #0]
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8008ff8:	6018      	str	r0, [r3, #0]
 8008ffa:	bd10      	pop	{r4, pc}
 8008ffc:	1fffc808 	.word	0x1fffc808
 8009000:	1fffdaf0 	.word	0x1fffdaf0

08009004 <_SetColor>:
 8009004:	b510      	push	{r4, lr}
 8009006:	4c0c      	ldr	r4, [pc, #48]	; (8009038 <_SetColor+0x34>)
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800900c:	4281      	cmp	r1, r0
 800900e:	d00f      	beq.n	8009030 <_SetColor+0x2c>
 8009010:	7c59      	ldrb	r1, [r3, #17]
 8009012:	6318      	str	r0, [r3, #48]	; 0x30
 8009014:	4b09      	ldr	r3, [pc, #36]	; (800903c <_SetColor+0x38>)
 8009016:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800901a:	6911      	ldr	r1, [r2, #16]
 800901c:	680b      	ldr	r3, [r1, #0]
 800901e:	4798      	blx	r3
 8009020:	6821      	ldr	r1, [r4, #0]
 8009022:	7c0a      	ldrb	r2, [r1, #16]
 8009024:	f002 0304 	and.w	r3, r2, #4
 8009028:	b2da      	uxtb	r2, r3
 800902a:	b912      	cbnz	r2, 8009032 <_SetColor+0x2e>
 800902c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800902e:	6008      	str	r0, [r1, #0]
 8009030:	bd10      	pop	{r4, pc}
 8009032:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8009034:	6018      	str	r0, [r3, #0]
 8009036:	bd10      	pop	{r4, pc}
 8009038:	1fffc808 	.word	0x1fffc808
 800903c:	1fffdaf0 	.word	0x1fffdaf0

08009040 <_SetDrawMode>:
 8009040:	b470      	push	{r4, r5, r6}
 8009042:	4b08      	ldr	r3, [pc, #32]	; (8009064 <_SetDrawMode+0x24>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	7c1a      	ldrb	r2, [r3, #16]
 8009048:	ea80 0102 	eor.w	r1, r0, r2
 800904c:	0749      	lsls	r1, r1, #29
 800904e:	d505      	bpl.n	800905c <_SetDrawMode+0x1c>
 8009050:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009052:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009054:	6826      	ldr	r6, [r4, #0]
 8009056:	680d      	ldr	r5, [r1, #0]
 8009058:	6025      	str	r5, [r4, #0]
 800905a:	600e      	str	r6, [r1, #0]
 800905c:	7418      	strb	r0, [r3, #16]
 800905e:	4610      	mov	r0, r2
 8009060:	bc70      	pop	{r4, r5, r6}
 8009062:	4770      	bx	lr
 8009064:	1fffc808 	.word	0x1fffc808

08009068 <LCD_SetDrawMode>:
 8009068:	b508      	push	{r3, lr}
 800906a:	f64c 0314 	movw	r3, #51220	; 0xc814
 800906e:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009072:	6819      	ldr	r1, [r3, #0]
 8009074:	688a      	ldr	r2, [r1, #8]
 8009076:	4790      	blx	r2
 8009078:	bd08      	pop	{r3, pc}
 800907a:	bf00      	nop

0800907c <LCD_DrawPixel>:
 800907c:	4b14      	ldr	r3, [pc, #80]	; (80090d0 <LCD_DrawPixel+0x54>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	b510      	push	{r4, lr}
 8009082:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 8009086:	460a      	mov	r2, r1
 8009088:	4294      	cmp	r4, r2
 800908a:	4601      	mov	r1, r0
 800908c:	dc17      	bgt.n	80090be <LCD_DrawPixel+0x42>
 800908e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8009092:	4282      	cmp	r2, r0
 8009094:	dc13      	bgt.n	80090be <LCD_DrawPixel+0x42>
 8009096:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800909a:	4288      	cmp	r0, r1
 800909c:	dc0f      	bgt.n	80090be <LCD_DrawPixel+0x42>
 800909e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80090a2:	4281      	cmp	r1, r0
 80090a4:	dc0b      	bgt.n	80090be <LCD_DrawPixel+0x42>
 80090a6:	7c18      	ldrb	r0, [r3, #16]
 80090a8:	07c0      	lsls	r0, r0, #31
 80090aa:	d409      	bmi.n	80090c0 <LCD_DrawPixel+0x44>
 80090ac:	7c5c      	ldrb	r4, [r3, #17]
 80090ae:	4809      	ldr	r0, [pc, #36]	; (80090d4 <LCD_DrawPixel+0x58>)
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68c4      	ldr	r4, [r0, #12]
 80090ba:	69a4      	ldr	r4, [r4, #24]
 80090bc:	47a0      	blx	r4
 80090be:	bd10      	pop	{r4, pc}
 80090c0:	7c58      	ldrb	r0, [r3, #17]
 80090c2:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <LCD_DrawPixel+0x58>)
 80090c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80090c8:	68c3      	ldr	r3, [r0, #12]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	4798      	blx	r3
 80090ce:	bd10      	pop	{r4, pc}
 80090d0:	1fffc808 	.word	0x1fffc808
 80090d4:	1fffdaf0 	.word	0x1fffdaf0

080090d8 <LCD_DrawHLine>:
 80090d8:	4b10      	ldr	r3, [pc, #64]	; (800911c <LCD_DrawHLine+0x44>)
 80090da:	b570      	push	{r4, r5, r6, lr}
 80090dc:	681c      	ldr	r4, [r3, #0]
 80090de:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 80090e2:	428e      	cmp	r6, r1
 80090e4:	460d      	mov	r5, r1
 80090e6:	dc0f      	bgt.n	8009108 <LCD_DrawHLine+0x30>
 80090e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ec:	428d      	cmp	r5, r1
 80090ee:	dc0b      	bgt.n	8009108 <LCD_DrawHLine+0x30>
 80090f0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80090f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f8:	4288      	cmp	r0, r1
 80090fa:	bfa8      	it	ge
 80090fc:	4601      	movge	r1, r0
 80090fe:	429a      	cmp	r2, r3
 8009100:	bfb8      	it	lt
 8009102:	4613      	movlt	r3, r2
 8009104:	4299      	cmp	r1, r3
 8009106:	dd00      	ble.n	800910a <LCD_DrawHLine+0x32>
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	7c60      	ldrb	r0, [r4, #17]
 800910c:	4a04      	ldr	r2, [pc, #16]	; (8009120 <LCD_DrawHLine+0x48>)
 800910e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8009112:	68c4      	ldr	r4, [r0, #12]
 8009114:	462a      	mov	r2, r5
 8009116:	68a4      	ldr	r4, [r4, #8]
 8009118:	47a0      	blx	r4
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	1fffc808 	.word	0x1fffc808
 8009120:	1fffdaf0 	.word	0x1fffdaf0

08009124 <LCD_FillRect>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	4c14      	ldr	r4, [pc, #80]	; (8009178 <LCD_FillRect+0x54>)
 8009128:	6824      	ldr	r4, [r4, #0]
 800912a:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800912e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009132:	42b0      	cmp	r0, r6
 8009134:	bfa8      	it	ge
 8009136:	4606      	movge	r6, r0
 8009138:	42aa      	cmp	r2, r5
 800913a:	bfb8      	it	lt
 800913c:	4615      	movlt	r5, r2
 800913e:	42b5      	cmp	r5, r6
 8009140:	b082      	sub	sp, #8
 8009142:	db0b      	blt.n	800915c <LCD_FillRect+0x38>
 8009144:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8009148:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800914c:	4291      	cmp	r1, r2
 800914e:	bfa8      	it	ge
 8009150:	460a      	movge	r2, r1
 8009152:	4283      	cmp	r3, r0
 8009154:	bfa8      	it	ge
 8009156:	4603      	movge	r3, r0
 8009158:	429a      	cmp	r2, r3
 800915a:	dd01      	ble.n	8009160 <LCD_FillRect+0x3c>
 800915c:	b002      	add	sp, #8
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	7c64      	ldrb	r4, [r4, #17]
 8009162:	4906      	ldr	r1, [pc, #24]	; (800917c <LCD_FillRect+0x58>)
 8009164:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8009168:	68c4      	ldr	r4, [r0, #12]
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	6924      	ldr	r4, [r4, #16]
 800916e:	4631      	mov	r1, r6
 8009170:	462b      	mov	r3, r5
 8009172:	47a0      	blx	r4
 8009174:	e7f2      	b.n	800915c <LCD_FillRect+0x38>
 8009176:	bf00      	nop
 8009178:	1fffc808 	.word	0x1fffc808
 800917c:	1fffdaf0 	.word	0x1fffdaf0

08009180 <LCD__DrawBitmap_1bpp>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	4c0d      	ldr	r4, [pc, #52]	; (80091bc <LCD__DrawBitmap_1bpp+0x3c>)
 8009186:	b091      	sub	sp, #68	; 0x44
 8009188:	6825      	ldr	r5, [r4, #0]
 800918a:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 800918e:	920d      	str	r2, [sp, #52]	; 0x34
 8009190:	4604      	mov	r4, r0
 8009192:	460e      	mov	r6, r1
 8009194:	930e      	str	r3, [sp, #56]	; 0x38
 8009196:	b19d      	cbz	r5, 80091c0 <LCD__DrawBitmap_1bpp+0x40>
 8009198:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800919a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800919c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800919e:	9702      	str	r7, [sp, #8]
 80091a0:	9604      	str	r6, [sp, #16]
 80091a2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80091a4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80091a6:	f8cd b000 	str.w	fp, [sp]
 80091aa:	9401      	str	r4, [sp, #4]
 80091ac:	9703      	str	r7, [sp, #12]
 80091ae:	9605      	str	r6, [sp, #20]
 80091b0:	682c      	ldr	r4, [r5, #0]
 80091b2:	47a0      	blx	r4
 80091b4:	b011      	add	sp, #68	; 0x44
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	bf00      	nop
 80091bc:	1fffdac8 	.word	0x1fffdac8
 80091c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80091c2:	ea47 030b 	orr.w	r3, r7, fp
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	f000 81e9 	beq.w	800959e <LCD__DrawBitmap_1bpp+0x41e>
 80091cc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80091ce:	f1c7 0a08 	rsb	sl, r7, #8
 80091d2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80091d4:	2f00      	cmp	r7, #0
 80091d6:	dded      	ble.n	80091b4 <LCD__DrawBitmap_1bpp+0x34>
 80091d8:	f64c 0c08 	movw	ip, #51208	; 0xc808
 80091dc:	f6c1 7cff 	movt	ip, #8191	; 0x1fff
 80091e0:	4458      	add	r0, fp
 80091e2:	f8dc 9000 	ldr.w	r9, [ip]
 80091e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80091e8:	9108      	str	r1, [sp, #32]
 80091ea:	950a      	str	r5, [sp, #40]	; 0x28
 80091ec:	4648      	mov	r0, r9
 80091ee:	9d08      	ldr	r5, [sp, #32]
 80091f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80091f2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80091f6:	186a      	adds	r2, r5, r1
 80091f8:	1e56      	subs	r6, r2, #1
 80091fa:	42b4      	cmp	r4, r6
 80091fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80091fe:	9609      	str	r6, [sp, #36]	; 0x24
 8009200:	f300 8122 	bgt.w	8009448 <LCD__DrawBitmap_1bpp+0x2c8>
 8009204:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8009208:	42ab      	cmp	r3, r5
 800920a:	f2c0 811d 	blt.w	8009448 <LCD__DrawBitmap_1bpp+0x2c8>
 800920e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009210:	2f00      	cmp	r7, #0
 8009212:	f340 8119 	ble.w	8009448 <LCD__DrawBitmap_1bpp+0x2c8>
 8009216:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8009218:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800921a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800921e:	4629      	mov	r1, r5
 8009220:	f107 38ff 	add.w	r8, r7, #4294967295
 8009224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009228:	fa44 f60a 	asr.w	r6, r4, sl
 800922c:	f016 0fff 	tst.w	r6, #255	; 0xff
 8009230:	fa04 f402 	lsl.w	r4, r4, r2
 8009234:	f008 0901 	and.w	r9, r8, #1
 8009238:	910c      	str	r1, [sp, #48]	; 0x30
 800923a:	ebcb 020c 	rsb	r2, fp, ip
 800923e:	46d0      	mov	r8, sl
 8009240:	b2e4      	uxtb	r4, r4
 8009242:	f040 8110 	bne.w	8009466 <LCD__DrawBitmap_1bpp+0x2e6>
 8009246:	7c03      	ldrb	r3, [r0, #16]
 8009248:	f003 0702 	and.w	r7, r3, #2
 800924c:	b2fd      	uxtb	r5, r7
 800924e:	2d00      	cmp	r5, #0
 8009250:	f000 8109 	beq.w	8009466 <LCD__DrawBitmap_1bpp+0x2e6>
 8009254:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8009258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800925a:	2601      	movs	r6, #1
 800925c:	4566      	cmp	r6, ip
 800925e:	eb03 050b 	add.w	r5, r3, fp
 8009262:	f000 80f1 	beq.w	8009448 <LCD__DrawBitmap_1bpp+0x2c8>
 8009266:	f1b9 0f00 	cmp.w	r9, #0
 800926a:	d021      	beq.n	80092b0 <LCD__DrawBitmap_1bpp+0x130>
 800926c:	ebcb 0c05 	rsb	ip, fp, r5
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	f040 8167 	bne.w	8009546 <LCD__DrawBitmap_1bpp+0x3c6>
 8009278:	990c      	ldr	r1, [sp, #48]	; 0x30
 800927a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800927c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009280:	46d0      	mov	r8, sl
 8009282:	910c      	str	r1, [sp, #48]	; 0x30
 8009284:	fa44 f20a 	asr.w	r2, r4, sl
 8009288:	f012 0fff 	tst.w	r2, #255	; 0xff
 800928c:	fa04 f407 	lsl.w	r4, r4, r7
 8009290:	b2e4      	uxtb	r4, r4
 8009292:	f040 8114 	bne.w	80094be <LCD__DrawBitmap_1bpp+0x33e>
 8009296:	7c03      	ldrb	r3, [r0, #16]
 8009298:	f003 0702 	and.w	r7, r3, #2
 800929c:	b2f9      	uxtb	r1, r7
 800929e:	2900      	cmp	r1, #0
 80092a0:	f000 810d 	beq.w	80094be <LCD__DrawBitmap_1bpp+0x33e>
 80092a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092a6:	3601      	adds	r6, #1
 80092a8:	428e      	cmp	r6, r1
 80092aa:	445d      	add	r5, fp
 80092ac:	f000 80cc 	beq.w	8009448 <LCD__DrawBitmap_1bpp+0x2c8>
 80092b0:	ebcb 0205 	rsb	r2, fp, r5
 80092b4:	f1b8 0f00 	cmp.w	r8, #0
 80092b8:	f000 8139 	beq.w	800952e <LCD__DrawBitmap_1bpp+0x3ae>
 80092bc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80092be:	ebc7 0808 	rsb	r8, r7, r8
 80092c2:	463b      	mov	r3, r7
 80092c4:	fa44 f90a 	asr.w	r9, r4, sl
 80092c8:	fa04 f103 	lsl.w	r1, r4, r3
 80092cc:	f019 0fff 	tst.w	r9, #255	; 0xff
 80092d0:	b2cf      	uxtb	r7, r1
 80092d2:	d105      	bne.n	80092e0 <LCD__DrawBitmap_1bpp+0x160>
 80092d4:	7c04      	ldrb	r4, [r0, #16]
 80092d6:	f004 0302 	and.w	r3, r4, #2
 80092da:	b2d9      	uxtb	r1, r3
 80092dc:	2900      	cmp	r1, #0
 80092de:	d143      	bne.n	8009368 <LCD__DrawBitmap_1bpp+0x1e8>
 80092e0:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 80092e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092e6:	f8dc 4000 	ldr.w	r4, [ip]
 80092ea:	fa5f f989 	uxtb.w	r9, r9
 80092ee:	b10b      	cbz	r3, 80092f4 <LCD__DrawBitmap_1bpp+0x174>
 80092f0:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 80092f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80092f8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80092fc:	f8cc 9000 	str.w	r9, [ip]
 8009300:	f105 39ff 	add.w	r9, r5, #4294967295
 8009304:	428a      	cmp	r2, r1
 8009306:	bfa8      	it	ge
 8009308:	4611      	movge	r1, r2
 800930a:	4599      	cmp	r9, r3
 800930c:	bfb8      	it	lt
 800930e:	464b      	movlt	r3, r9
 8009310:	4299      	cmp	r1, r3
 8009312:	dc27      	bgt.n	8009364 <LCD__DrawBitmap_1bpp+0x1e4>
 8009314:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8009318:	f9b0 900a 	ldrsh.w	r9, [r0, #10]
 800931c:	9206      	str	r2, [sp, #24]
 800931e:	9a08      	ldr	r2, [sp, #32]
 8009320:	454a      	cmp	r2, r9
 8009322:	bfb8      	it	lt
 8009324:	464a      	movlt	r2, r9
 8009326:	9207      	str	r2, [sp, #28]
 8009328:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800932c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932e:	4591      	cmp	r9, r2
 8009330:	bfa8      	it	ge
 8009332:	4691      	movge	r9, r2
 8009334:	9a07      	ldr	r2, [sp, #28]
 8009336:	454a      	cmp	r2, r9
 8009338:	dc14      	bgt.n	8009364 <LCD__DrawBitmap_1bpp+0x1e4>
 800933a:	f64d 2cf0 	movw	ip, #56048	; 0xdaf0
 800933e:	7c40      	ldrb	r0, [r0, #17]
 8009340:	f6c1 7cff 	movt	ip, #8191	; 0x1fff
 8009344:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8009348:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800934c:	f8cd 9000 	str.w	r9, [sp]
 8009350:	f8de 9010 	ldr.w	r9, [lr, #16]
 8009354:	47c8      	blx	r9
 8009356:	f64c 0108 	movw	r1, #51208	; 0xc808
 800935a:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
 800935e:	6808      	ldr	r0, [r1, #0]
 8009360:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8009364:	f8cc 4000 	str.w	r4, [ip]
 8009368:	445d      	add	r5, fp
 800936a:	3601      	adds	r6, #1
 800936c:	ebcb 0205 	rsb	r2, fp, r5
 8009370:	f1b8 0f00 	cmp.w	r8, #0
 8009374:	f040 80d6 	bne.w	8009524 <LCD__DrawBitmap_1bpp+0x3a4>
 8009378:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800937c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800937e:	f818 7b01 	ldrb.w	r7, [r8], #1
 8009382:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009386:	46d0      	mov	r8, sl
 8009388:	fa47 f90a 	asr.w	r9, r7, sl
 800938c:	fa07 f103 	lsl.w	r1, r7, r3
 8009390:	f019 0fff 	tst.w	r9, #255	; 0xff
 8009394:	b2cc      	uxtb	r4, r1
 8009396:	d106      	bne.n	80093a6 <LCD__DrawBitmap_1bpp+0x226>
 8009398:	7c07      	ldrb	r7, [r0, #16]
 800939a:	f007 0302 	and.w	r3, r7, #2
 800939e:	b2d9      	uxtb	r1, r3
 80093a0:	2900      	cmp	r1, #0
 80093a2:	f47f af7f 	bne.w	80092a4 <LCD__DrawBitmap_1bpp+0x124>
 80093a6:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 80093aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093ac:	f8dc 7000 	ldr.w	r7, [ip]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80c5 	beq.w	8009540 <LCD__DrawBitmap_1bpp+0x3c0>
 80093b6:	fa5f f989 	uxtb.w	r9, r9
 80093ba:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 80093be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80093c2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80093c6:	f8cc 9000 	str.w	r9, [ip]
 80093ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80093ce:	428a      	cmp	r2, r1
 80093d0:	bfa8      	it	ge
 80093d2:	4611      	movge	r1, r2
 80093d4:	4599      	cmp	r9, r3
 80093d6:	bfb8      	it	lt
 80093d8:	464b      	movlt	r3, r9
 80093da:	4299      	cmp	r1, r3
 80093dc:	dc2c      	bgt.n	8009438 <LCD__DrawBitmap_1bpp+0x2b8>
 80093de:	f9b0 900e 	ldrsh.w	r9, [r0, #14]
 80093e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80093e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80093ea:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093ee:	4591      	cmp	r9, r2
 80093f0:	bfb8      	it	lt
 80093f2:	4691      	movlt	r9, r2
 80093f4:	f8cd 9018 	str.w	r9, [sp, #24]
 80093f8:	9a07      	ldr	r2, [sp, #28]
 80093fa:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80093fe:	454a      	cmp	r2, r9
 8009400:	bfa8      	it	ge
 8009402:	464a      	movge	r2, r9
 8009404:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009408:	9207      	str	r2, [sp, #28]
 800940a:	4591      	cmp	r9, r2
 800940c:	dc14      	bgt.n	8009438 <LCD__DrawBitmap_1bpp+0x2b8>
 800940e:	f64d 2ef0 	movw	lr, #56048	; 0xdaf0
 8009412:	7c40      	ldrb	r0, [r0, #17]
 8009414:	f6c1 7eff 	movt	lr, #8191	; 0x1fff
 8009418:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800941c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8009420:	9200      	str	r2, [sp, #0]
 8009422:	f8dc c010 	ldr.w	ip, [ip, #16]
 8009426:	464a      	mov	r2, r9
 8009428:	47e0      	blx	ip
 800942a:	f64c 0108 	movw	r1, #51208	; 0xc808
 800942e:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
 8009432:	6808      	ldr	r0, [r1, #0]
 8009434:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8009438:	990d      	ldr	r1, [sp, #52]	; 0x34
 800943a:	f8cc 7000 	str.w	r7, [ip]
 800943e:	3601      	adds	r6, #1
 8009440:	428e      	cmp	r6, r1
 8009442:	445d      	add	r5, fp
 8009444:	f47f af34 	bne.w	80092b0 <LCD__DrawBitmap_1bpp+0x130>
 8009448:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800944a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800944c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800944e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009452:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009454:	3401      	adds	r4, #1
 8009456:	1995      	adds	r5, r2, r6
 8009458:	454c      	cmp	r4, r9
 800945a:	940a      	str	r4, [sp, #40]	; 0x28
 800945c:	951e      	str	r5, [sp, #120]	; 0x78
 800945e:	9708      	str	r7, [sp, #32]
 8009460:	f47f aec5 	bne.w	80091ee <LCD__DrawBitmap_1bpp+0x6e>
 8009464:	e6a6      	b.n	80091b4 <LCD__DrawBitmap_1bpp+0x34>
 8009466:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8009468:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800946a:	682f      	ldr	r7, [r5, #0]
 800946c:	2900      	cmp	r1, #0
 800946e:	f000 80e4 	beq.w	800963a <LCD__DrawBitmap_1bpp+0x4ba>
 8009472:	b2f6      	uxtb	r6, r6
 8009474:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009478:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800947c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8009480:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8009484:	602e      	str	r6, [r5, #0]
 8009486:	f10c 36ff 	add.w	r6, ip, #4294967295
 800948a:	428a      	cmp	r2, r1
 800948c:	bfa8      	it	ge
 800948e:	4611      	movge	r1, r2
 8009490:	429e      	cmp	r6, r3
 8009492:	bfb8      	it	lt
 8009494:	4633      	movlt	r3, r6
 8009496:	4299      	cmp	r1, r3
 8009498:	dc0f      	bgt.n	80094ba <LCD__DrawBitmap_1bpp+0x33a>
 800949a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800949e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80094a2:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 80094a6:	4594      	cmp	ip, r2
 80094a8:	bfa8      	it	ge
 80094aa:	4662      	movge	r2, ip
 80094ac:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80094b0:	4566      	cmp	r6, ip
 80094b2:	bfa8      	it	ge
 80094b4:	4666      	movge	r6, ip
 80094b6:	42b2      	cmp	r2, r6
 80094b8:	dd49      	ble.n	800954e <LCD__DrawBitmap_1bpp+0x3ce>
 80094ba:	602f      	str	r7, [r5, #0]
 80094bc:	e6ca      	b.n	8009254 <LCD__DrawBitmap_1bpp+0xd4>
 80094be:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80094c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094c2:	f8d7 9000 	ldr.w	r9, [r7]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 80b9 	beq.w	800963e <LCD__DrawBitmap_1bpp+0x4be>
 80094cc:	b2d2      	uxtb	r2, r2
 80094ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094d2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80094d6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80094da:	603a      	str	r2, [r7, #0]
 80094dc:	1e6a      	subs	r2, r5, #1
 80094de:	458c      	cmp	ip, r1
 80094e0:	bfa8      	it	ge
 80094e2:	4661      	movge	r1, ip
 80094e4:	429a      	cmp	r2, r3
 80094e6:	bfb8      	it	lt
 80094e8:	4613      	movlt	r3, r2
 80094ea:	4299      	cmp	r1, r3
 80094ec:	dc17      	bgt.n	800951e <LCD__DrawBitmap_1bpp+0x39e>
 80094ee:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80094f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80094f6:	f8cd c01c 	str.w	ip, [sp, #28]
 80094fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80094fe:	4594      	cmp	ip, r2
 8009500:	bfb8      	it	lt
 8009502:	4694      	movlt	ip, r2
 8009504:	f8cd c018 	str.w	ip, [sp, #24]
 8009508:	9a07      	ldr	r2, [sp, #28]
 800950a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800950e:	4562      	cmp	r2, ip
 8009510:	bfa8      	it	ge
 8009512:	4662      	movge	r2, ip
 8009514:	f8dd c018 	ldr.w	ip, [sp, #24]
 8009518:	9207      	str	r2, [sp, #28]
 800951a:	4594      	cmp	ip, r2
 800951c:	dd2a      	ble.n	8009574 <LCD__DrawBitmap_1bpp+0x3f4>
 800951e:	f8c7 9000 	str.w	r9, [r7]
 8009522:	e6bf      	b.n	80092a4 <LCD__DrawBitmap_1bpp+0x124>
 8009524:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009526:	ebc4 0808 	rsb	r8, r4, r8
 800952a:	4623      	mov	r3, r4
 800952c:	e72c      	b.n	8009388 <LCD__DrawBitmap_1bpp+0x208>
 800952e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009532:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009534:	f818 4b01 	ldrb.w	r4, [r8], #1
 8009538:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800953c:	46d0      	mov	r8, sl
 800953e:	e6c1      	b.n	80092c4 <LCD__DrawBitmap_1bpp+0x144>
 8009540:	fa5f f989 	uxtb.w	r9, r9
 8009544:	e73b      	b.n	80093be <LCD__DrawBitmap_1bpp+0x23e>
 8009546:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009548:	ebc7 0808 	rsb	r8, r7, r8
 800954c:	e69a      	b.n	8009284 <LCD__DrawBitmap_1bpp+0x104>
 800954e:	f64d 2ef0 	movw	lr, #56048	; 0xdaf0
 8009552:	7c40      	ldrb	r0, [r0, #17]
 8009554:	f6c1 7eff 	movt	lr, #8191	; 0x1fff
 8009558:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800955c:	68c5      	ldr	r5, [r0, #12]
 800955e:	9600      	str	r6, [sp, #0]
 8009560:	692e      	ldr	r6, [r5, #16]
 8009562:	47b0      	blx	r6
 8009564:	f64c 0208 	movw	r2, #51208	; 0xc808
 8009568:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 800956c:	6810      	ldr	r0, [r2, #0]
 800956e:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8009570:	602f      	str	r7, [r5, #0]
 8009572:	e66f      	b.n	8009254 <LCD__DrawBitmap_1bpp+0xd4>
 8009574:	f64d 2ef0 	movw	lr, #56048	; 0xdaf0
 8009578:	7c40      	ldrb	r0, [r0, #17]
 800957a:	f6c1 7eff 	movt	lr, #8191	; 0x1fff
 800957e:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009582:	68c7      	ldr	r7, [r0, #12]
 8009584:	9200      	str	r2, [sp, #0]
 8009586:	693f      	ldr	r7, [r7, #16]
 8009588:	4662      	mov	r2, ip
 800958a:	47b8      	blx	r7
 800958c:	f64c 0308 	movw	r3, #51208	; 0xc808
 8009590:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8009598:	f8c7 9000 	str.w	r9, [r7]
 800959c:	e682      	b.n	80092a4 <LCD__DrawBitmap_1bpp+0x124>
 800959e:	4d33      	ldr	r5, [pc, #204]	; (800966c <LCD__DrawBitmap_1bpp+0x4ec>)
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80095a6:	1a51      	subs	r1, r2, r1
 80095a8:	2900      	cmp	r1, #0
 80095aa:	dd5b      	ble.n	8009664 <LCD__DrawBitmap_1bpp+0x4e4>
 80095ac:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80095b0:	ebc1 0509 	rsb	r5, r1, r9
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	f77f adfd 	ble.w	80091b4 <LCD__DrawBitmap_1bpp+0x34>
 80095ba:	981e      	ldr	r0, [sp, #120]	; 0x78
 80095bc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80095be:	fb01 0107 	mla	r1, r1, r7, r0
 80095c2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80095c4:	911e      	str	r1, [sp, #120]	; 0x78
 80095c6:	19f0      	adds	r0, r6, r7
 80095c8:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80095cc:	3801      	subs	r0, #1
 80095ce:	1a41      	subs	r1, r0, r1
 80095d0:	2900      	cmp	r1, #0
 80095d2:	dd03      	ble.n	80095dc <LCD__DrawBitmap_1bpp+0x45c>
 80095d4:	1a6d      	subs	r5, r5, r1
 80095d6:	2d00      	cmp	r5, #0
 80095d8:	f77f adec 	ble.w	80091b4 <LCD__DrawBitmap_1bpp+0x34>
 80095dc:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80095e0:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80095e4:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 80095e8:	eb04 0609 	add.w	r6, r4, r9
 80095ec:	1e70      	subs	r0, r6, #1
 80095ee:	1a46      	subs	r6, r0, r1
 80095f0:	2e00      	cmp	r6, #0
 80095f2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80095f6:	bfc8      	it	gt
 80095f8:	ebc6 0909 	rsbgt	r9, r6, r9
 80095fc:	ebcc 0104 	rsb	r1, ip, r4
 8009600:	bfc8      	it	gt
 8009602:	f8cd 9034 	strgt.w	r9, [sp, #52]	; 0x34
 8009606:	4281      	cmp	r1, r0
 8009608:	db1b      	blt.n	8009642 <LCD__DrawBitmap_1bpp+0x4c2>
 800960a:	4664      	mov	r4, ip
 800960c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800960e:	2e00      	cmp	r6, #0
 8009610:	f77f add0 	ble.w	80091b4 <LCD__DrawBitmap_1bpp+0x34>
 8009614:	7c5e      	ldrb	r6, [r3, #17]
 8009616:	4b16      	ldr	r3, [pc, #88]	; (8009670 <LCD__DrawBitmap_1bpp+0x4f0>)
 8009618:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800961a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800961e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009620:	68c3      	ldr	r3, [r0, #12]
 8009622:	9500      	str	r5, [sp, #0]
 8009624:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009626:	9603      	str	r6, [sp, #12]
 8009628:	9501      	str	r5, [sp, #4]
 800962a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800962c:	9404      	str	r4, [sp, #16]
 800962e:	9502      	str	r5, [sp, #8]
 8009630:	9705      	str	r7, [sp, #20]
 8009632:	685c      	ldr	r4, [r3, #4]
 8009634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009636:	47a0      	blx	r4
 8009638:	e5bc      	b.n	80091b4 <LCD__DrawBitmap_1bpp+0x34>
 800963a:	b2f6      	uxtb	r6, r6
 800963c:	e71c      	b.n	8009478 <LCD__DrawBitmap_1bpp+0x2f8>
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	e747      	b.n	80094d2 <LCD__DrawBitmap_1bpp+0x352>
 8009642:	1a47      	subs	r7, r0, r1
 8009644:	eb0c 0407 	add.w	r4, ip, r7
 8009648:	f027 0607 	bic.w	r6, r7, #7
 800964c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800964e:	1a08      	subs	r0, r1, r0
 8009650:	1838      	adds	r0, r7, r0
 8009652:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009654:	900d      	str	r0, [sp, #52]	; 0x34
 8009656:	eb07 07e4 	add.w	r7, r7, r4, asr #3
 800965a:	971e      	str	r7, [sp, #120]	; 0x78
 800965c:	1989      	adds	r1, r1, r6
 800965e:	f004 0407 	and.w	r4, r4, #7
 8009662:	e7d3      	b.n	800960c <LCD__DrawBitmap_1bpp+0x48c>
 8009664:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009666:	4632      	mov	r2, r6
 8009668:	462f      	mov	r7, r5
 800966a:	e7ac      	b.n	80095c6 <LCD__DrawBitmap_1bpp+0x446>
 800966c:	1fffc808 	.word	0x1fffc808
 8009670:	1fffdaf0 	.word	0x1fffdaf0

08009674 <LCD_DrawBitmap>:
 8009674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	4c0d      	ldr	r4, [pc, #52]	; (80096b0 <LCD_DrawBitmap+0x3c>)
 800967a:	b091      	sub	sp, #68	; 0x44
 800967c:	6825      	ldr	r5, [r4, #0]
 800967e:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8009682:	920d      	str	r2, [sp, #52]	; 0x34
 8009684:	4604      	mov	r4, r0
 8009686:	460e      	mov	r6, r1
 8009688:	930e      	str	r3, [sp, #56]	; 0x38
 800968a:	b19d      	cbz	r5, 80096b4 <LCD_DrawBitmap+0x40>
 800968c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800968e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009690:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8009692:	9702      	str	r7, [sp, #8]
 8009694:	9604      	str	r6, [sp, #16]
 8009696:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8009698:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800969a:	f8cd b000 	str.w	fp, [sp]
 800969e:	9401      	str	r4, [sp, #4]
 80096a0:	9703      	str	r7, [sp, #12]
 80096a2:	9605      	str	r6, [sp, #20]
 80096a4:	682c      	ldr	r4, [r5, #0]
 80096a6:	47a0      	blx	r4
 80096a8:	b011      	add	sp, #68	; 0x44
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	bf00      	nop
 80096b0:	1fffdac8 	.word	0x1fffdac8
 80096b4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80096b6:	ea47 030b 	orr.w	r3, r7, fp
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	f000 81e9 	beq.w	8009a92 <LCD_DrawBitmap+0x41e>
 80096c0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80096c2:	f1c7 0a08 	rsb	sl, r7, #8
 80096c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	dded      	ble.n	80096a8 <LCD_DrawBitmap+0x34>
 80096cc:	f64c 0c08 	movw	ip, #51208	; 0xc808
 80096d0:	f6c1 7cff 	movt	ip, #8191	; 0x1fff
 80096d4:	4458      	add	r0, fp
 80096d6:	f8dc 9000 	ldr.w	r9, [ip]
 80096da:	900f      	str	r0, [sp, #60]	; 0x3c
 80096dc:	9108      	str	r1, [sp, #32]
 80096de:	950a      	str	r5, [sp, #40]	; 0x28
 80096e0:	4648      	mov	r0, r9
 80096e2:	9d08      	ldr	r5, [sp, #32]
 80096e4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80096e6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80096ea:	186a      	adds	r2, r5, r1
 80096ec:	1e56      	subs	r6, r2, #1
 80096ee:	42b4      	cmp	r4, r6
 80096f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80096f2:	9609      	str	r6, [sp, #36]	; 0x24
 80096f4:	f300 8122 	bgt.w	800993c <LCD_DrawBitmap+0x2c8>
 80096f8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80096fc:	42ab      	cmp	r3, r5
 80096fe:	f2c0 811d 	blt.w	800993c <LCD_DrawBitmap+0x2c8>
 8009702:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009704:	2f00      	cmp	r7, #0
 8009706:	f340 8119 	ble.w	800993c <LCD_DrawBitmap+0x2c8>
 800970a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800970c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800970e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8009712:	4629      	mov	r1, r5
 8009714:	f107 38ff 	add.w	r8, r7, #4294967295
 8009718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800971c:	fa44 f60a 	asr.w	r6, r4, sl
 8009720:	f016 0fff 	tst.w	r6, #255	; 0xff
 8009724:	fa04 f402 	lsl.w	r4, r4, r2
 8009728:	f008 0901 	and.w	r9, r8, #1
 800972c:	910c      	str	r1, [sp, #48]	; 0x30
 800972e:	ebcb 020c 	rsb	r2, fp, ip
 8009732:	46d0      	mov	r8, sl
 8009734:	b2e4      	uxtb	r4, r4
 8009736:	f040 8110 	bne.w	800995a <LCD_DrawBitmap+0x2e6>
 800973a:	7c03      	ldrb	r3, [r0, #16]
 800973c:	f003 0702 	and.w	r7, r3, #2
 8009740:	b2fd      	uxtb	r5, r7
 8009742:	2d00      	cmp	r5, #0
 8009744:	f000 8109 	beq.w	800995a <LCD_DrawBitmap+0x2e6>
 8009748:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800974c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800974e:	2601      	movs	r6, #1
 8009750:	4566      	cmp	r6, ip
 8009752:	eb03 050b 	add.w	r5, r3, fp
 8009756:	f000 80f1 	beq.w	800993c <LCD_DrawBitmap+0x2c8>
 800975a:	f1b9 0f00 	cmp.w	r9, #0
 800975e:	d021      	beq.n	80097a4 <LCD_DrawBitmap+0x130>
 8009760:	ebcb 0c05 	rsb	ip, fp, r5
 8009764:	f1b8 0f00 	cmp.w	r8, #0
 8009768:	f040 8167 	bne.w	8009a3a <LCD_DrawBitmap+0x3c6>
 800976c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800976e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009774:	46d0      	mov	r8, sl
 8009776:	910c      	str	r1, [sp, #48]	; 0x30
 8009778:	fa44 f20a 	asr.w	r2, r4, sl
 800977c:	f012 0fff 	tst.w	r2, #255	; 0xff
 8009780:	fa04 f407 	lsl.w	r4, r4, r7
 8009784:	b2e4      	uxtb	r4, r4
 8009786:	f040 8114 	bne.w	80099b2 <LCD_DrawBitmap+0x33e>
 800978a:	7c03      	ldrb	r3, [r0, #16]
 800978c:	f003 0702 	and.w	r7, r3, #2
 8009790:	b2f9      	uxtb	r1, r7
 8009792:	2900      	cmp	r1, #0
 8009794:	f000 810d 	beq.w	80099b2 <LCD_DrawBitmap+0x33e>
 8009798:	990d      	ldr	r1, [sp, #52]	; 0x34
 800979a:	3601      	adds	r6, #1
 800979c:	428e      	cmp	r6, r1
 800979e:	445d      	add	r5, fp
 80097a0:	f000 80cc 	beq.w	800993c <LCD_DrawBitmap+0x2c8>
 80097a4:	ebcb 0205 	rsb	r2, fp, r5
 80097a8:	f1b8 0f00 	cmp.w	r8, #0
 80097ac:	f000 8139 	beq.w	8009a22 <LCD_DrawBitmap+0x3ae>
 80097b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80097b2:	ebc7 0808 	rsb	r8, r7, r8
 80097b6:	463b      	mov	r3, r7
 80097b8:	fa44 f90a 	asr.w	r9, r4, sl
 80097bc:	fa04 f103 	lsl.w	r1, r4, r3
 80097c0:	f019 0fff 	tst.w	r9, #255	; 0xff
 80097c4:	b2cf      	uxtb	r7, r1
 80097c6:	d105      	bne.n	80097d4 <LCD_DrawBitmap+0x160>
 80097c8:	7c04      	ldrb	r4, [r0, #16]
 80097ca:	f004 0302 	and.w	r3, r4, #2
 80097ce:	b2d9      	uxtb	r1, r3
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d143      	bne.n	800985c <LCD_DrawBitmap+0x1e8>
 80097d4:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 80097d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097da:	f8dc 4000 	ldr.w	r4, [ip]
 80097de:	fa5f f989 	uxtb.w	r9, r9
 80097e2:	b10b      	cbz	r3, 80097e8 <LCD_DrawBitmap+0x174>
 80097e4:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 80097e8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80097ec:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80097f0:	f8cc 9000 	str.w	r9, [ip]
 80097f4:	f105 39ff 	add.w	r9, r5, #4294967295
 80097f8:	428a      	cmp	r2, r1
 80097fa:	bfa8      	it	ge
 80097fc:	4611      	movge	r1, r2
 80097fe:	4599      	cmp	r9, r3
 8009800:	bfb8      	it	lt
 8009802:	464b      	movlt	r3, r9
 8009804:	4299      	cmp	r1, r3
 8009806:	dc27      	bgt.n	8009858 <LCD_DrawBitmap+0x1e4>
 8009808:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 800980c:	f9b0 900a 	ldrsh.w	r9, [r0, #10]
 8009810:	9206      	str	r2, [sp, #24]
 8009812:	9a08      	ldr	r2, [sp, #32]
 8009814:	454a      	cmp	r2, r9
 8009816:	bfb8      	it	lt
 8009818:	464a      	movlt	r2, r9
 800981a:	9207      	str	r2, [sp, #28]
 800981c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009822:	4591      	cmp	r9, r2
 8009824:	bfa8      	it	ge
 8009826:	4691      	movge	r9, r2
 8009828:	9a07      	ldr	r2, [sp, #28]
 800982a:	4591      	cmp	r9, r2
 800982c:	db14      	blt.n	8009858 <LCD_DrawBitmap+0x1e4>
 800982e:	f64d 2cf0 	movw	ip, #56048	; 0xdaf0
 8009832:	7c40      	ldrb	r0, [r0, #17]
 8009834:	f6c1 7cff 	movt	ip, #8191	; 0x1fff
 8009838:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 800983c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8009840:	f8cd 9000 	str.w	r9, [sp]
 8009844:	f8de 9010 	ldr.w	r9, [lr, #16]
 8009848:	47c8      	blx	r9
 800984a:	f64c 0108 	movw	r1, #51208	; 0xc808
 800984e:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
 8009852:	6808      	ldr	r0, [r1, #0]
 8009854:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8009858:	f8cc 4000 	str.w	r4, [ip]
 800985c:	445d      	add	r5, fp
 800985e:	3601      	adds	r6, #1
 8009860:	ebcb 0205 	rsb	r2, fp, r5
 8009864:	f1b8 0f00 	cmp.w	r8, #0
 8009868:	f040 80d6 	bne.w	8009a18 <LCD_DrawBitmap+0x3a4>
 800986c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009870:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009872:	f818 7b01 	ldrb.w	r7, [r8], #1
 8009876:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800987a:	46d0      	mov	r8, sl
 800987c:	fa47 f90a 	asr.w	r9, r7, sl
 8009880:	fa07 f103 	lsl.w	r1, r7, r3
 8009884:	f019 0fff 	tst.w	r9, #255	; 0xff
 8009888:	b2cc      	uxtb	r4, r1
 800988a:	d106      	bne.n	800989a <LCD_DrawBitmap+0x226>
 800988c:	7c07      	ldrb	r7, [r0, #16]
 800988e:	f007 0302 	and.w	r3, r7, #2
 8009892:	b2d9      	uxtb	r1, r3
 8009894:	2900      	cmp	r1, #0
 8009896:	f47f af7f 	bne.w	8009798 <LCD_DrawBitmap+0x124>
 800989a:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800989e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098a0:	f8dc 7000 	ldr.w	r7, [ip]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 80c5 	beq.w	8009a34 <LCD_DrawBitmap+0x3c0>
 80098aa:	fa5f f989 	uxtb.w	r9, r9
 80098ae:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 80098b2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80098b6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80098ba:	f8cc 9000 	str.w	r9, [ip]
 80098be:	f105 39ff 	add.w	r9, r5, #4294967295
 80098c2:	428a      	cmp	r2, r1
 80098c4:	bfa8      	it	ge
 80098c6:	4611      	movge	r1, r2
 80098c8:	4599      	cmp	r9, r3
 80098ca:	bfb8      	it	lt
 80098cc:	464b      	movlt	r3, r9
 80098ce:	4299      	cmp	r1, r3
 80098d0:	dc2c      	bgt.n	800992c <LCD_DrawBitmap+0x2b8>
 80098d2:	f9b0 900e 	ldrsh.w	r9, [r0, #14]
 80098d6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80098da:	f8cd 901c 	str.w	r9, [sp, #28]
 80098de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098e2:	4591      	cmp	r9, r2
 80098e4:	bfb8      	it	lt
 80098e6:	4691      	movlt	r9, r2
 80098e8:	f8cd 9018 	str.w	r9, [sp, #24]
 80098ec:	9a07      	ldr	r2, [sp, #28]
 80098ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80098f2:	454a      	cmp	r2, r9
 80098f4:	bfa8      	it	ge
 80098f6:	464a      	movge	r2, r9
 80098f8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80098fc:	9207      	str	r2, [sp, #28]
 80098fe:	454a      	cmp	r2, r9
 8009900:	db14      	blt.n	800992c <LCD_DrawBitmap+0x2b8>
 8009902:	f64d 2ef0 	movw	lr, #56048	; 0xdaf0
 8009906:	7c40      	ldrb	r0, [r0, #17]
 8009908:	f6c1 7eff 	movt	lr, #8191	; 0x1fff
 800990c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009910:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8009914:	9200      	str	r2, [sp, #0]
 8009916:	f8dc c010 	ldr.w	ip, [ip, #16]
 800991a:	464a      	mov	r2, r9
 800991c:	47e0      	blx	ip
 800991e:	f64c 0108 	movw	r1, #51208	; 0xc808
 8009922:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
 8009926:	6808      	ldr	r0, [r1, #0]
 8009928:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 800992c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800992e:	f8cc 7000 	str.w	r7, [ip]
 8009932:	3601      	adds	r6, #1
 8009934:	428e      	cmp	r6, r1
 8009936:	445d      	add	r5, fp
 8009938:	f47f af34 	bne.w	80097a4 <LCD_DrawBitmap+0x130>
 800993c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800993e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009940:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009942:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009946:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009948:	3401      	adds	r4, #1
 800994a:	1995      	adds	r5, r2, r6
 800994c:	454c      	cmp	r4, r9
 800994e:	940a      	str	r4, [sp, #40]	; 0x28
 8009950:	951e      	str	r5, [sp, #120]	; 0x78
 8009952:	9708      	str	r7, [sp, #32]
 8009954:	f47f aec5 	bne.w	80096e2 <LCD_DrawBitmap+0x6e>
 8009958:	e6a6      	b.n	80096a8 <LCD_DrawBitmap+0x34>
 800995a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800995c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800995e:	682f      	ldr	r7, [r5, #0]
 8009960:	2900      	cmp	r1, #0
 8009962:	f000 80e3 	beq.w	8009b2c <LCD_DrawBitmap+0x4b8>
 8009966:	b2f6      	uxtb	r6, r6
 8009968:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800996c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8009970:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8009974:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8009978:	602e      	str	r6, [r5, #0]
 800997a:	f10c 36ff 	add.w	r6, ip, #4294967295
 800997e:	428a      	cmp	r2, r1
 8009980:	bfa8      	it	ge
 8009982:	4611      	movge	r1, r2
 8009984:	429e      	cmp	r6, r3
 8009986:	bfb8      	it	lt
 8009988:	4633      	movlt	r3, r6
 800998a:	4299      	cmp	r1, r3
 800998c:	dc0f      	bgt.n	80099ae <LCD_DrawBitmap+0x33a>
 800998e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009992:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8009996:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800999a:	4594      	cmp	ip, r2
 800999c:	bfa8      	it	ge
 800999e:	4662      	movge	r2, ip
 80099a0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80099a4:	4566      	cmp	r6, ip
 80099a6:	bfa8      	it	ge
 80099a8:	4666      	movge	r6, ip
 80099aa:	4296      	cmp	r6, r2
 80099ac:	da49      	bge.n	8009a42 <LCD_DrawBitmap+0x3ce>
 80099ae:	602f      	str	r7, [r5, #0]
 80099b0:	e6ca      	b.n	8009748 <LCD_DrawBitmap+0xd4>
 80099b2:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80099b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099b6:	f8d7 9000 	ldr.w	r9, [r7]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 80b8 	beq.w	8009b30 <LCD_DrawBitmap+0x4bc>
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80099c6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80099ca:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80099ce:	603a      	str	r2, [r7, #0]
 80099d0:	1e6a      	subs	r2, r5, #1
 80099d2:	458c      	cmp	ip, r1
 80099d4:	bfa8      	it	ge
 80099d6:	4661      	movge	r1, ip
 80099d8:	429a      	cmp	r2, r3
 80099da:	bfb8      	it	lt
 80099dc:	4613      	movlt	r3, r2
 80099de:	4299      	cmp	r1, r3
 80099e0:	dc17      	bgt.n	8009a12 <LCD_DrawBitmap+0x39e>
 80099e2:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80099e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80099ea:	f8cd c01c 	str.w	ip, [sp, #28]
 80099ee:	f8dd c020 	ldr.w	ip, [sp, #32]
 80099f2:	4594      	cmp	ip, r2
 80099f4:	bfb8      	it	lt
 80099f6:	4694      	movlt	ip, r2
 80099f8:	f8cd c018 	str.w	ip, [sp, #24]
 80099fc:	9a07      	ldr	r2, [sp, #28]
 80099fe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8009a02:	4562      	cmp	r2, ip
 8009a04:	bfa8      	it	ge
 8009a06:	4662      	movge	r2, ip
 8009a08:	f8dd c018 	ldr.w	ip, [sp, #24]
 8009a0c:	9207      	str	r2, [sp, #28]
 8009a0e:	4562      	cmp	r2, ip
 8009a10:	da2a      	bge.n	8009a68 <LCD_DrawBitmap+0x3f4>
 8009a12:	f8c7 9000 	str.w	r9, [r7]
 8009a16:	e6bf      	b.n	8009798 <LCD_DrawBitmap+0x124>
 8009a18:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009a1a:	ebc4 0808 	rsb	r8, r4, r8
 8009a1e:	4623      	mov	r3, r4
 8009a20:	e72c      	b.n	800987c <LCD_DrawBitmap+0x208>
 8009a22:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009a26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009a28:	f818 4b01 	ldrb.w	r4, [r8], #1
 8009a2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009a30:	46d0      	mov	r8, sl
 8009a32:	e6c1      	b.n	80097b8 <LCD_DrawBitmap+0x144>
 8009a34:	fa5f f989 	uxtb.w	r9, r9
 8009a38:	e73b      	b.n	80098b2 <LCD_DrawBitmap+0x23e>
 8009a3a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009a3c:	ebc7 0808 	rsb	r8, r7, r8
 8009a40:	e69a      	b.n	8009778 <LCD_DrawBitmap+0x104>
 8009a42:	f64d 2ef0 	movw	lr, #56048	; 0xdaf0
 8009a46:	7c40      	ldrb	r0, [r0, #17]
 8009a48:	f6c1 7eff 	movt	lr, #8191	; 0x1fff
 8009a4c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009a50:	68c5      	ldr	r5, [r0, #12]
 8009a52:	9600      	str	r6, [sp, #0]
 8009a54:	692e      	ldr	r6, [r5, #16]
 8009a56:	47b0      	blx	r6
 8009a58:	f64c 0208 	movw	r2, #51208	; 0xc808
 8009a5c:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 8009a60:	6810      	ldr	r0, [r2, #0]
 8009a62:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8009a64:	602f      	str	r7, [r5, #0]
 8009a66:	e66f      	b.n	8009748 <LCD_DrawBitmap+0xd4>
 8009a68:	f64d 2ef0 	movw	lr, #56048	; 0xdaf0
 8009a6c:	7c40      	ldrb	r0, [r0, #17]
 8009a6e:	f6c1 7eff 	movt	lr, #8191	; 0x1fff
 8009a72:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009a76:	68c7      	ldr	r7, [r0, #12]
 8009a78:	9200      	str	r2, [sp, #0]
 8009a7a:	693f      	ldr	r7, [r7, #16]
 8009a7c:	4662      	mov	r2, ip
 8009a7e:	47b8      	blx	r7
 8009a80:	f64c 0308 	movw	r3, #51208	; 0xc808
 8009a84:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009a88:	6818      	ldr	r0, [r3, #0]
 8009a8a:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8009a8c:	f8c7 9000 	str.w	r9, [r7]
 8009a90:	e682      	b.n	8009798 <LCD_DrawBitmap+0x124>
 8009a92:	4b6b      	ldr	r3, [pc, #428]	; (8009c40 <LCD_DrawBitmap+0x5cc>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8009a9a:	1a50      	subs	r0, r2, r1
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f340 80cb 	ble.w	8009c38 <LCD_DrawBitmap+0x5c4>
 8009aa2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009aa6:	ebc0 0109 	rsb	r1, r0, r9
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	f77f adfc 	ble.w	80096a8 <LCD_DrawBitmap+0x34>
 8009ab0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009ab2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009ab4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009ab8:	fb00 7705 	mla	r7, r0, r5, r7
 8009abc:	971e      	str	r7, [sp, #120]	; 0x78
 8009abe:	eb06 0509 	add.w	r5, r6, r9
 8009ac2:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8009ac6:	3d01      	subs	r5, #1
 8009ac8:	1a28      	subs	r0, r5, r0
 8009aca:	2800      	cmp	r0, #0
 8009acc:	dd03      	ble.n	8009ad6 <LCD_DrawBitmap+0x462>
 8009ace:	1a09      	subs	r1, r1, r0
 8009ad0:	2900      	cmp	r1, #0
 8009ad2:	f77f ade9 	ble.w	80096a8 <LCD_DrawBitmap+0x34>
 8009ad6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8009ada:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8009ade:	eb04 070c 	add.w	r7, r4, ip
 8009ae2:	1e7d      	subs	r5, r7, #1
 8009ae4:	1a2f      	subs	r7, r5, r0
 8009ae6:	2f00      	cmp	r7, #0
 8009ae8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8009aec:	bfc4      	itt	gt
 8009aee:	ebc7 0c0c 	rsbgt	ip, r7, ip
 8009af2:	f8cd c034 	strgt.w	ip, [sp, #52]	; 0x34
 8009af6:	4284      	cmp	r4, r0
 8009af8:	db1c      	blt.n	8009b34 <LCD_DrawBitmap+0x4c0>
 8009afa:	2500      	movs	r5, #0
 8009afc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009afe:	2f00      	cmp	r7, #0
 8009b00:	f77f add2 	ble.w	80096a8 <LCD_DrawBitmap+0x34>
 8009b04:	7c5f      	ldrb	r7, [r3, #17]
 8009b06:	4b4f      	ldr	r3, [pc, #316]	; (8009c44 <LCD_DrawBitmap+0x5d0>)
 8009b08:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009b0a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009b0e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8009b10:	68c3      	ldr	r3, [r0, #12]
 8009b12:	9100      	str	r1, [sp, #0]
 8009b14:	9602      	str	r6, [sp, #8]
 8009b16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b18:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009b1a:	9101      	str	r1, [sp, #4]
 8009b1c:	9603      	str	r6, [sp, #12]
 8009b1e:	9504      	str	r5, [sp, #16]
 8009b20:	9705      	str	r7, [sp, #20]
 8009b22:	685d      	ldr	r5, [r3, #4]
 8009b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b26:	4621      	mov	r1, r4
 8009b28:	47a8      	blx	r5
 8009b2a:	e5bd      	b.n	80096a8 <LCD_DrawBitmap+0x34>
 8009b2c:	b2f6      	uxtb	r6, r6
 8009b2e:	e71d      	b.n	800996c <LCD_DrawBitmap+0x2f8>
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	e748      	b.n	80099c6 <LCD_DrawBitmap+0x352>
 8009b34:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8009b38:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8009b3a:	1b05      	subs	r5, r0, r4
 8009b3c:	ebc5 0909 	rsb	r9, r5, r9
 8009b40:	3e01      	subs	r6, #1
 8009b42:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8009b46:	2e1f      	cmp	r6, #31
 8009b48:	d8d8      	bhi.n	8009afc <LCD_DrawBitmap+0x488>
 8009b4a:	f20f 0c08 	addw	ip, pc, #8
 8009b4e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8009b52:	bf00      	nop
 8009b54:	08009c25 	.word	0x08009c25
 8009b58:	08009c11 	.word	0x08009c11
 8009b5c:	08009afd 	.word	0x08009afd
 8009b60:	08009bfd 	.word	0x08009bfd
 8009b64:	08009afd 	.word	0x08009afd
 8009b68:	08009afd 	.word	0x08009afd
 8009b6c:	08009afd 	.word	0x08009afd
 8009b70:	08009bf1 	.word	0x08009bf1
 8009b74:	08009afd 	.word	0x08009afd
 8009b78:	08009afd 	.word	0x08009afd
 8009b7c:	08009afd 	.word	0x08009afd
 8009b80:	08009afd 	.word	0x08009afd
 8009b84:	08009afd 	.word	0x08009afd
 8009b88:	08009afd 	.word	0x08009afd
 8009b8c:	08009afd 	.word	0x08009afd
 8009b90:	08009be3 	.word	0x08009be3
 8009b94:	08009afd 	.word	0x08009afd
 8009b98:	08009afd 	.word	0x08009afd
 8009b9c:	08009afd 	.word	0x08009afd
 8009ba0:	08009afd 	.word	0x08009afd
 8009ba4:	08009afd 	.word	0x08009afd
 8009ba8:	08009afd 	.word	0x08009afd
 8009bac:	08009afd 	.word	0x08009afd
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009afd 	.word	0x08009afd
 8009bb8:	08009afd 	.word	0x08009afd
 8009bbc:	08009afd 	.word	0x08009afd
 8009bc0:	08009afd 	.word	0x08009afd
 8009bc4:	08009afd 	.word	0x08009afd
 8009bc8:	08009afd 	.word	0x08009afd
 8009bcc:	08009afd 	.word	0x08009afd
 8009bd0:	08009bd5 	.word	0x08009bd5
 8009bd4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009bd6:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8009bda:	961e      	str	r6, [sp, #120]	; 0x78
 8009bdc:	4604      	mov	r4, r0
 8009bde:	2500      	movs	r5, #0
 8009be0:	e78c      	b.n	8009afc <LCD_DrawBitmap+0x488>
 8009be2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009be4:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 8009be8:	951e      	str	r5, [sp, #120]	; 0x78
 8009bea:	4604      	mov	r4, r0
 8009bec:	2500      	movs	r5, #0
 8009bee:	e785      	b.n	8009afc <LCD_DrawBitmap+0x488>
 8009bf0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009bf2:	1967      	adds	r7, r4, r5
 8009bf4:	971e      	str	r7, [sp, #120]	; 0x78
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	2500      	movs	r5, #0
 8009bfa:	e77f      	b.n	8009afc <LCD_DrawBitmap+0x488>
 8009bfc:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009bfe:	f025 0001 	bic.w	r0, r5, #1
 8009c02:	eb06 0665 	add.w	r6, r6, r5, asr #1
 8009c06:	961e      	str	r6, [sp, #120]	; 0x78
 8009c08:	1824      	adds	r4, r4, r0
 8009c0a:	f005 0501 	and.w	r5, r5, #1
 8009c0e:	e775      	b.n	8009afc <LCD_DrawBitmap+0x488>
 8009c10:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009c12:	f025 0003 	bic.w	r0, r5, #3
 8009c16:	eb07 07a5 	add.w	r7, r7, r5, asr #2
 8009c1a:	971e      	str	r7, [sp, #120]	; 0x78
 8009c1c:	1824      	adds	r4, r4, r0
 8009c1e:	f005 0503 	and.w	r5, r5, #3
 8009c22:	e76b      	b.n	8009afc <LCD_DrawBitmap+0x488>
 8009c24:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8009c26:	f025 0007 	bic.w	r0, r5, #7
 8009c2a:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 8009c2e:	961e      	str	r6, [sp, #120]	; 0x78
 8009c30:	1824      	adds	r4, r4, r0
 8009c32:	f005 0507 	and.w	r5, r5, #7
 8009c36:	e761      	b.n	8009afc <LCD_DrawBitmap+0x488>
 8009c38:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c3a:	4632      	mov	r2, r6
 8009c3c:	4689      	mov	r9, r1
 8009c3e:	e73e      	b.n	8009abe <LCD_DrawBitmap+0x44a>
 8009c40:	1fffc808 	.word	0x1fffc808
 8009c44:	1fffdaf0 	.word	0x1fffdaf0

08009c48 <LCD_SetClipRectMax>:
 8009c48:	b508      	push	{r3, lr}
 8009c4a:	f64c 0208 	movw	r2, #51208	; 0xc808
 8009c4e:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 8009c52:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
 8009c56:	6811      	ldr	r1, [r2, #0]
 8009c58:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009c5c:	7c48      	ldrb	r0, [r1, #17]
 8009c5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009c62:	68c2      	ldr	r2, [r0, #12]
 8009c64:	3108      	adds	r1, #8
 8009c66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009c68:	4798      	blx	r3
 8009c6a:	bd08      	pop	{r3, pc}

08009c6c <LCD_Init>:
 8009c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c6e:	4d32      	ldr	r5, [pc, #200]	; (8009d38 <LCD_Init+0xcc>)
 8009c70:	4e32      	ldr	r6, [pc, #200]	; (8009d3c <LCD_Init+0xd0>)
 8009c72:	6829      	ldr	r1, [r5, #0]
 8009c74:	7c4b      	ldrb	r3, [r1, #17]
 8009c76:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8009c7a:	68c2      	ldr	r2, [r0, #12]
 8009c7c:	b085      	sub	sp, #20
 8009c7e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009c80:	3108      	adds	r1, #8
 8009c82:	47a0      	blx	r4
 8009c84:	f7ff f8cc 	bl	8008e20 <LCD_InitColors>
 8009c88:	4604      	mov	r4, r0
 8009c8a:	b978      	cbnz	r0, 8009cac <LCD_Init+0x40>
 8009c8c:	f7fb fe2e 	bl	80058ec <GUI_DEVICE__GetpDriver>
 8009c90:	9003      	str	r0, [sp, #12]
 8009c92:	b170      	cbz	r0, 8009cb2 <LCD_Init+0x46>
 8009c94:	68c1      	ldr	r1, [r0, #12]
 8009c96:	a803      	add	r0, sp, #12
 8009c98:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8009c9a:	210c      	movs	r1, #12
 8009c9c:	4798      	blx	r3
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d047      	beq.n	8009d34 <LCD_Init+0xc8>
 8009ca4:	9803      	ldr	r0, [sp, #12]
 8009ca6:	4790      	blx	r2
 8009ca8:	b118      	cbz	r0, 8009cb2 <LCD_Init+0x46>
 8009caa:	4604      	mov	r4, r0
 8009cac:	4620      	mov	r0, r4
 8009cae:	b005      	add	sp, #20
 8009cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb2:	f7ff f91d 	bl	8008ef0 <LCD_InitLUT>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f7fb fe18 	bl	80058ec <GUI_DEVICE__GetpDriver>
 8009cbc:	9003      	str	r0, [sp, #12]
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0f4      	beq.n	8009cac <LCD_Init+0x40>
 8009cc2:	4f1f      	ldr	r7, [pc, #124]	; (8009d40 <LCD_Init+0xd4>)
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	f000 f9d5 	bl	800a074 <GUI_SelectLayer>
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	2004      	movs	r0, #4
 8009cce:	688b      	ldr	r3, [r1, #8]
 8009cd0:	4798      	blx	r3
 8009cd2:	6828      	ldr	r0, [r5, #0]
 8009cd4:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8009cd8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8009cdc:	f643 75ff 	movw	r5, #16383	; 0x3fff
 8009ce0:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8009ce4:	42ab      	cmp	r3, r5
 8009ce6:	bfa8      	it	ge
 8009ce8:	462b      	movge	r3, r5
 8009cea:	4299      	cmp	r1, r3
 8009cec:	dc11      	bgt.n	8009d12 <LCD_Init+0xa6>
 8009cee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8009cf2:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8009cf6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8009cfa:	45ae      	cmp	lr, r5
 8009cfc:	bfb8      	it	lt
 8009cfe:	4675      	movlt	r5, lr
 8009d00:	42aa      	cmp	r2, r5
 8009d02:	dc06      	bgt.n	8009d12 <LCD_Init+0xa6>
 8009d04:	7c40      	ldrb	r0, [r0, #17]
 8009d06:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8009d0a:	68c6      	ldr	r6, [r0, #12]
 8009d0c:	9500      	str	r5, [sp, #0]
 8009d0e:	6935      	ldr	r5, [r6, #16]
 8009d10:	47a8      	blx	r5
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	2000      	movs	r0, #0
 8009d16:	688b      	ldr	r3, [r1, #8]
 8009d18:	4798      	blx	r3
 8009d1a:	a804      	add	r0, sp, #16
 8009d1c:	210e      	movs	r1, #14
 8009d1e:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8009d22:	68d3      	ldr	r3, [r2, #12]
 8009d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d26:	4790      	blx	r2
 8009d28:	4601      	mov	r1, r0
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d0be      	beq.n	8009cac <LCD_Init+0x40>
 8009d2e:	9803      	ldr	r0, [sp, #12]
 8009d30:	4788      	blx	r1
 8009d32:	e7bb      	b.n	8009cac <LCD_Init+0x40>
 8009d34:	2401      	movs	r4, #1
 8009d36:	e7b9      	b.n	8009cac <LCD_Init+0x40>
 8009d38:	1fffc808 	.word	0x1fffc808
 8009d3c:	1fffdaf0 	.word	0x1fffdaf0
 8009d40:	1fffc814 	.word	0x1fffc814

08009d44 <LCD_Color2Index>:
 8009d44:	b508      	push	{r3, lr}
 8009d46:	f64c 0208 	movw	r2, #51208	; 0xc808
 8009d4a:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 8009d4e:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
 8009d52:	6811      	ldr	r1, [r2, #0]
 8009d54:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009d58:	7c4a      	ldrb	r2, [r1, #17]
 8009d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5e:	6919      	ldr	r1, [r3, #16]
 8009d60:	680a      	ldr	r2, [r1, #0]
 8009d62:	4790      	blx	r2
 8009d64:	bd08      	pop	{r3, pc}
 8009d66:	bf00      	nop

08009d68 <LCD_Index2Color>:
 8009d68:	b508      	push	{r3, lr}
 8009d6a:	f64c 0208 	movw	r2, #51208	; 0xc808
 8009d6e:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 8009d72:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
 8009d76:	6811      	ldr	r1, [r2, #0]
 8009d78:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009d7c:	7c4a      	ldrb	r2, [r1, #17]
 8009d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d82:	6919      	ldr	r1, [r3, #16]
 8009d84:	684a      	ldr	r2, [r1, #4]
 8009d86:	4790      	blx	r2
 8009d88:	bd08      	pop	{r3, pc}
 8009d8a:	bf00      	nop

08009d8c <LCD_SetColorIndex>:
 8009d8c:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <LCD_SetColorIndex+0x1c>)
 8009d8e:	6819      	ldr	r1, [r3, #0]
 8009d90:	7c0a      	ldrb	r2, [r1, #16]
 8009d92:	f002 0304 	and.w	r3, r2, #4
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	b912      	cbnz	r2, 8009da0 <LCD_SetColorIndex+0x14>
 8009d9a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8009d9c:	6008      	str	r0, [r1, #0]
 8009d9e:	4770      	bx	lr
 8009da0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8009da2:	6018      	str	r0, [r3, #0]
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	1fffc808 	.word	0x1fffc808

08009dac <LCD_SetBkColorIndex>:
 8009dac:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <LCD_SetBkColorIndex+0x1c>)
 8009dae:	6819      	ldr	r1, [r3, #0]
 8009db0:	7c0a      	ldrb	r2, [r1, #16]
 8009db2:	f002 0304 	and.w	r3, r2, #4
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	b912      	cbnz	r2, 8009dc0 <LCD_SetBkColorIndex+0x14>
 8009dba:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009dbc:	6008      	str	r0, [r1, #0]
 8009dbe:	4770      	bx	lr
 8009dc0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8009dc2:	6018      	str	r0, [r3, #0]
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	1fffc808 	.word	0x1fffc808

08009dcc <LCD_SetBkColor>:
 8009dcc:	b508      	push	{r3, lr}
 8009dce:	f64c 0314 	movw	r3, #51220	; 0xc814
 8009dd2:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009dd6:	6819      	ldr	r1, [r3, #0]
 8009dd8:	684a      	ldr	r2, [r1, #4]
 8009dda:	4790      	blx	r2
 8009ddc:	bd08      	pop	{r3, pc}
 8009dde:	bf00      	nop

08009de0 <LCD_SetColor>:
 8009de0:	b508      	push	{r3, lr}
 8009de2:	f64c 0314 	movw	r3, #51220	; 0xc814
 8009de6:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009dea:	6819      	ldr	r1, [r3, #0]
 8009dec:	680a      	ldr	r2, [r1, #0]
 8009dee:	4790      	blx	r2
 8009df0:	bd08      	pop	{r3, pc}
 8009df2:	bf00      	nop

08009df4 <GUI__memset16>:
 8009df4:	b4f0      	push	{r4, r5, r6, r7}
 8009df6:	0787      	lsls	r7, r0, #30
 8009df8:	bf44      	itt	mi
 8009dfa:	f820 1b02 	strhmi.w	r1, [r0], #2
 8009dfe:	3a01      	submi	r2, #1
 8009e00:	0857      	lsrs	r7, r2, #1
 8009e02:	d019      	beq.n	8009e38 <GUI__memset16+0x44>
 8009e04:	2f03      	cmp	r7, #3
 8009e06:	eb01 4301 	add.w	r3, r1, r1, lsl #16
 8009e0a:	dc1a      	bgt.n	8009e42 <GUI__memset16+0x4e>
 8009e0c:	1e7e      	subs	r6, r7, #1
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4635      	mov	r5, r6
 8009e12:	f844 3b04 	str.w	r3, [r4], #4
 8009e16:	f006 0601 	and.w	r6, r6, #1
 8009e1a:	b15d      	cbz	r5, 8009e34 <GUI__memset16+0x40>
 8009e1c:	b11e      	cbz	r6, 8009e26 <GUI__memset16+0x32>
 8009e1e:	3d01      	subs	r5, #1
 8009e20:	f844 3b04 	str.w	r3, [r4], #4
 8009e24:	d006      	beq.n	8009e34 <GUI__memset16+0x40>
 8009e26:	4626      	mov	r6, r4
 8009e28:	f846 3b04 	str.w	r3, [r6], #4
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	1d34      	adds	r4, r6, #4
 8009e30:	3d02      	subs	r5, #2
 8009e32:	d1f8      	bne.n	8009e26 <GUI__memset16+0x32>
 8009e34:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8009e38:	07d3      	lsls	r3, r2, #31
 8009e3a:	bf48      	it	mi
 8009e3c:	8001      	strhmi	r1, [r0, #0]
 8009e3e:	bcf0      	pop	{r4, r5, r6, r7}
 8009e40:	4770      	bx	lr
 8009e42:	1f3c      	subs	r4, r7, #4
 8009e44:	4626      	mov	r6, r4
 8009e46:	2e03      	cmp	r6, #3
 8009e48:	f3c4 0580 	ubfx	r5, r4, #2, #1
 8009e4c:	6003      	str	r3, [r0, #0]
 8009e4e:	6043      	str	r3, [r0, #4]
 8009e50:	6083      	str	r3, [r0, #8]
 8009e52:	60c3      	str	r3, [r0, #12]
 8009e54:	f100 0410 	add.w	r4, r0, #16
 8009e58:	dd14      	ble.n	8009e84 <GUI__memset16+0x90>
 8009e5a:	b13d      	cbz	r5, 8009e6c <GUI__memset16+0x78>
 8009e5c:	3e04      	subs	r6, #4
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	60a3      	str	r3, [r4, #8]
 8009e64:	60e3      	str	r3, [r4, #12]
 8009e66:	3410      	adds	r4, #16
 8009e68:	2e03      	cmp	r6, #3
 8009e6a:	dd0b      	ble.n	8009e84 <GUI__memset16+0x90>
 8009e6c:	3e08      	subs	r6, #8
 8009e6e:	6023      	str	r3, [r4, #0]
 8009e70:	6063      	str	r3, [r4, #4]
 8009e72:	60a3      	str	r3, [r4, #8]
 8009e74:	60e3      	str	r3, [r4, #12]
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	6163      	str	r3, [r4, #20]
 8009e7a:	61a3      	str	r3, [r4, #24]
 8009e7c:	61e3      	str	r3, [r4, #28]
 8009e7e:	3420      	adds	r4, #32
 8009e80:	2e03      	cmp	r6, #3
 8009e82:	dcf3      	bgt.n	8009e6c <GUI__memset16+0x78>
 8009e84:	3f04      	subs	r7, #4
 8009e86:	08bc      	lsrs	r4, r7, #2
 8009e88:	1c65      	adds	r5, r4, #1
 8009e8a:	ebb7 0784 	subs.w	r7, r7, r4, lsl #2
 8009e8e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8009e92:	d1bb      	bne.n	8009e0c <GUI__memset16+0x18>
 8009e94:	e7d0      	b.n	8009e38 <GUI__memset16+0x44>
 8009e96:	bf00      	nop

08009e98 <GUI__ManageCacheEx>:
 8009e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e9a:	1e03      	subs	r3, r0, #0
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	dd02      	ble.n	8009ea8 <GUI__ManageCacheEx+0x10>
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	b003      	add	sp, #12
 8009ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea8:	2901      	cmp	r1, #1
 8009eaa:	d026      	beq.n	8009efa <GUI__ManageCacheEx+0x62>
 8009eac:	2902      	cmp	r1, #2
 8009eae:	d00e      	beq.n	8009ece <GUI__ManageCacheEx+0x36>
 8009eb0:	2900      	cmp	r1, #0
 8009eb2:	d1f6      	bne.n	8009ea2 <GUI__ManageCacheEx+0xa>
 8009eb4:	4c2c      	ldr	r4, [pc, #176]	; (8009f68 <GUI__ManageCacheEx+0xd0>)
 8009eb6:	009d      	lsls	r5, r3, #2
 8009eb8:	1966      	adds	r6, r4, r5
 8009eba:	6872      	ldr	r2, [r6, #4]
 8009ebc:	2a01      	cmp	r2, #1
 8009ebe:	d03a      	beq.n	8009f36 <GUI__ManageCacheEx+0x9e>
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	1964      	adds	r4, r4, r5
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	bf18      	it	ne
 8009ec8:	3a01      	subne	r2, #1
 8009eca:	6062      	str	r2, [r4, #4]
 8009ecc:	e7ea      	b.n	8009ea4 <GUI__ManageCacheEx+0xc>
 8009ece:	f7fb fd0d 	bl	80058ec <GUI_DEVICE__GetpDriver>
 8009ed2:	9001      	str	r0, [sp, #4]
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d0e4      	beq.n	8009ea2 <GUI__ManageCacheEx+0xa>
 8009ed8:	68c4      	ldr	r4, [r0, #12]
 8009eda:	210d      	movs	r1, #13
 8009edc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009ede:	a801      	add	r0, sp, #4
 8009ee0:	4790      	blx	r2
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d0dc      	beq.n	8009ea2 <GUI__ManageCacheEx+0xa>
 8009ee8:	491f      	ldr	r1, [pc, #124]	; (8009f68 <GUI__ManageCacheEx+0xd0>)
 8009eea:	6808      	ldr	r0, [r1, #0]
 8009eec:	b100      	cbz	r0, 8009ef0 <GUI__ManageCacheEx+0x58>
 8009eee:	4780      	blx	r0
 8009ef0:	9801      	ldr	r0, [sp, #4]
 8009ef2:	2102      	movs	r1, #2
 8009ef4:	47a0      	blx	r4
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e7d4      	b.n	8009ea4 <GUI__ManageCacheEx+0xc>
 8009efa:	4d1b      	ldr	r5, [pc, #108]	; (8009f68 <GUI__ManageCacheEx+0xd0>)
 8009efc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8009f00:	686e      	ldr	r6, [r5, #4]
 8009f02:	b11e      	cbz	r6, 8009f0c <GUI__ManageCacheEx+0x74>
 8009f04:	3601      	adds	r6, #1
 8009f06:	606e      	str	r6, [r5, #4]
 8009f08:	4608      	mov	r0, r1
 8009f0a:	e7cb      	b.n	8009ea4 <GUI__ManageCacheEx+0xc>
 8009f0c:	f7fb fcee 	bl	80058ec <GUI_DEVICE__GetpDriver>
 8009f10:	9001      	str	r0, [sp, #4]
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d0c5      	beq.n	8009ea2 <GUI__ManageCacheEx+0xa>
 8009f16:	68c3      	ldr	r3, [r0, #12]
 8009f18:	210d      	movs	r1, #13
 8009f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f1c:	a801      	add	r0, sp, #4
 8009f1e:	4790      	blx	r2
 8009f20:	4603      	mov	r3, r0
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d0bd      	beq.n	8009ea2 <GUI__ManageCacheEx+0xa>
 8009f26:	4621      	mov	r1, r4
 8009f28:	9801      	ldr	r0, [sp, #4]
 8009f2a:	4798      	blx	r3
 8009f2c:	6869      	ldr	r1, [r5, #4]
 8009f2e:	1c48      	adds	r0, r1, #1
 8009f30:	6068      	str	r0, [r5, #4]
 8009f32:	4630      	mov	r0, r6
 8009f34:	e7b6      	b.n	8009ea4 <GUI__ManageCacheEx+0xc>
 8009f36:	f7fb fcd9 	bl	80058ec <GUI_DEVICE__GetpDriver>
 8009f3a:	9001      	str	r0, [sp, #4]
 8009f3c:	b180      	cbz	r0, 8009f60 <GUI__ManageCacheEx+0xc8>
 8009f3e:	68c1      	ldr	r1, [r0, #12]
 8009f40:	a801      	add	r0, sp, #4
 8009f42:	6a4f      	ldr	r7, [r1, #36]	; 0x24
 8009f44:	210d      	movs	r1, #13
 8009f46:	47b8      	blx	r7
 8009f48:	4607      	mov	r7, r0
 8009f4a:	b148      	cbz	r0, 8009f60 <GUI__ManageCacheEx+0xc8>
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	b100      	cbz	r0, 8009f52 <GUI__ManageCacheEx+0xba>
 8009f50:	4780      	blx	r0
 8009f52:	9801      	ldr	r0, [sp, #4]
 8009f54:	2100      	movs	r1, #0
 8009f56:	47b8      	blx	r7
 8009f58:	1963      	adds	r3, r4, r5
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	e7b0      	b.n	8009ec2 <GUI__ManageCacheEx+0x2a>
 8009f60:	6872      	ldr	r2, [r6, #4]
 8009f62:	2001      	movs	r0, #1
 8009f64:	e7ad      	b.n	8009ec2 <GUI__ManageCacheEx+0x2a>
 8009f66:	bf00      	nop
 8009f68:	1fffc964 	.word	0x1fffc964

08009f6c <GUI__ManageCache>:
 8009f6c:	f64c 0308 	movw	r3, #51208	; 0xc808
 8009f70:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 8009f74:	4601      	mov	r1, r0
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	7c40      	ldrb	r0, [r0, #17]
 8009f7a:	f7ff bf8d 	b.w	8009e98 <GUI__ManageCacheEx>
 8009f7e:	bf00      	nop

08009f80 <_GetCharCode>:
 8009f80:	7800      	ldrb	r0, [r0, #0]
 8009f82:	4770      	bx	lr

08009f84 <_GetCharSize>:
 8009f84:	2001      	movs	r0, #1
 8009f86:	4770      	bx	lr

08009f88 <_CalcSizeOfChar>:
 8009f88:	2001      	movs	r0, #1
 8009f8a:	4770      	bx	lr

08009f8c <_Encode>:
 8009f8c:	7001      	strb	r1, [r0, #0]
 8009f8e:	2001      	movs	r0, #1
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop

08009f94 <GUI_UC__GetCharCodeInc>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	f64d 24e8 	movw	r4, #56040	; 0xdae8
 8009f9a:	f6c1 74ff 	movt	r4, #8191	; 0x1fff
 8009f9e:	6805      	ldr	r5, [r0, #0]
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	6819      	ldr	r1, [r3, #0]
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	4788      	blx	r1
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	4607      	mov	r7, r0
 8009fae:	6853      	ldr	r3, [r2, #4]
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	4798      	blx	r3
 8009fb4:	1828      	adds	r0, r5, r0
 8009fb6:	6030      	str	r0, [r6, #0]
 8009fb8:	4638      	mov	r0, r7
 8009fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fbc <GUI_UC__NumChars2NumBytes>:
 8009fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	2900      	cmp	r1, #0
 8009fc4:	d027      	beq.n	800a016 <GUI_UC__NumChars2NumBytes+0x5a>
 8009fc6:	4f15      	ldr	r7, [pc, #84]	; (800a01c <GUI_UC__NumChars2NumBytes+0x60>)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	f101 38ff 	add.w	r8, r1, #4294967295
 8009fce:	6859      	ldr	r1, [r3, #4]
 8009fd0:	4788      	blx	r1
 8009fd2:	4645      	mov	r5, r8
 8009fd4:	f008 0201 	and.w	r2, r8, #1
 8009fd8:	1824      	adds	r4, r4, r0
 8009fda:	4606      	mov	r6, r0
 8009fdc:	b1c5      	cbz	r5, 800a010 <GUI_UC__NumChars2NumBytes+0x54>
 8009fde:	b13a      	cbz	r2, 8009ff0 <GUI_UC__NumChars2NumBytes+0x34>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	6859      	ldr	r1, [r3, #4]
 8009fe6:	4788      	blx	r1
 8009fe8:	3d01      	subs	r5, #1
 8009fea:	4404      	add	r4, r0
 8009fec:	4406      	add	r6, r0
 8009fee:	d00f      	beq.n	800a010 <GUI_UC__NumChars2NumBytes+0x54>
 8009ff0:	683a      	ldr	r2, [r7, #0]
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	6853      	ldr	r3, [r2, #4]
 8009ff6:	4798      	blx	r3
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	6838      	ldr	r0, [r7, #0]
 8009ffc:	1864      	adds	r4, r4, r1
 8009ffe:	6842      	ldr	r2, [r0, #4]
 800a000:	4620      	mov	r0, r4
 800a002:	1876      	adds	r6, r6, r1
 800a004:	4790      	blx	r2
 800a006:	3d01      	subs	r5, #1
 800a008:	3d01      	subs	r5, #1
 800a00a:	4404      	add	r4, r0
 800a00c:	4406      	add	r6, r0
 800a00e:	d1ef      	bne.n	8009ff0 <GUI_UC__NumChars2NumBytes+0x34>
 800a010:	4630      	mov	r0, r6
 800a012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a016:	460e      	mov	r6, r1
 800a018:	e7fa      	b.n	800a010 <GUI_UC__NumChars2NumBytes+0x54>
 800a01a:	bf00      	nop
 800a01c:	1fffdae8 	.word	0x1fffdae8

0800a020 <GUI_SetTextAlign>:
 800a020:	f64c 0308 	movw	r3, #51208	; 0xc808
 800a024:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	f9b1 202c 	ldrsh.w	r2, [r1, #44]	; 0x2c
 800a02e:	8588      	strh	r0, [r1, #44]	; 0x2c
 800a030:	4610      	mov	r0, r2
 800a032:	4770      	bx	lr

0800a034 <GUI_SetOrg>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	f64c 0208 	movw	r2, #51208	; 0xc808
 800a03a:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
 800a03e:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
 800a042:	6814      	ldr	r4, [r2, #0]
 800a044:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800a048:	7c65      	ldrb	r5, [r4, #17]
 800a04a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800a04e:	f64d 24dc 	movw	r4, #56028	; 0xdadc
 800a052:	f64d 23d0 	movw	r3, #56016	; 0xdad0
 800a056:	f6c1 74ff 	movt	r4, #8191	; 0x1fff
 800a05a:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800a05e:	68f7      	ldr	r7, [r6, #12]
 800a060:	8020      	strh	r0, [r4, #0]
 800a062:	4605      	mov	r5, r0
 800a064:	460a      	mov	r2, r1
 800a066:	8019      	strh	r1, [r3, #0]
 800a068:	4630      	mov	r0, r6
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	4629      	mov	r1, r5
 800a06e:	4798      	blx	r3
 800a070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a072:	bf00      	nop

0800a074 <GUI_SelectLayer>:
 800a074:	b510      	push	{r4, lr}
 800a076:	4b04      	ldr	r3, [pc, #16]	; (800a088 <GUI_SelectLayer+0x14>)
 800a078:	6819      	ldr	r1, [r3, #0]
 800a07a:	7c4c      	ldrb	r4, [r1, #17]
 800a07c:	b910      	cbnz	r0, 800a084 <GUI_SelectLayer+0x10>
 800a07e:	7448      	strb	r0, [r1, #17]
 800a080:	f001 faba 	bl	800b5f8 <GUI_SelectLCD>
 800a084:	4620      	mov	r0, r4
 800a086:	bd10      	pop	{r4, pc}
 800a088:	1fffc808 	.word	0x1fffc808

0800a08c <GUI_RectsIntersect>:
 800a08c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a090:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800a094:	429a      	cmp	r2, r3
 800a096:	dc14      	bgt.n	800a0c2 <GUI_RectsIntersect+0x36>
 800a098:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800a09c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	dc0e      	bgt.n	800a0c2 <GUI_RectsIntersect+0x36>
 800a0a4:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a0a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	dc08      	bgt.n	800a0c2 <GUI_RectsIntersect+0x36>
 800a0b0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a0b4:	f9b1 1000 	ldrsh.w	r1, [r1]
 800a0b8:	4291      	cmp	r1, r2
 800a0ba:	bfcc      	ite	gt
 800a0bc:	2000      	movgt	r0, #0
 800a0be:	2001      	movle	r0, #1
 800a0c0:	4770      	bx	lr
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop

0800a0c8 <GUI_GotoXY>:
 800a0c8:	f64c 0308 	movw	r3, #51208	; 0xc808
 800a0cc:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	8450      	strh	r0, [r2, #34]	; 0x22
 800a0d4:	8491      	strh	r1, [r2, #36]	; 0x24
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop

0800a0dc <GUI_GetBkColor>:
 800a0dc:	b508      	push	{r3, lr}
 800a0de:	f001 f953 	bl	800b388 <LCD_GetBkColorIndex>
 800a0e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a0e6:	f7ff be3f 	b.w	8009d68 <LCD_Index2Color>
 800a0ea:	bf00      	nop

0800a0ec <GUI_GetColor>:
 800a0ec:	b508      	push	{r3, lr}
 800a0ee:	f001 f953 	bl	800b398 <LCD_GetColorIndex>
 800a0f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a0f6:	f7ff be37 	b.w	8009d68 <LCD_Index2Color>
 800a0fa:	bf00      	nop

0800a0fc <_GetIndexMask_0>:
 800a0fc:	b508      	push	{r3, lr}
 800a0fe:	f001 f8cf 	bl	800b2a0 <LCD_GetNumColors>
 800a102:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a106:	d014      	beq.n	800a132 <_GetIndexMask_0+0x36>
 800a108:	287f      	cmp	r0, #127	; 0x7f
 800a10a:	d80e      	bhi.n	800a12a <_GetIndexMask_0+0x2e>
 800a10c:	283f      	cmp	r0, #63	; 0x3f
 800a10e:	d812      	bhi.n	800a136 <_GetIndexMask_0+0x3a>
 800a110:	281f      	cmp	r0, #31
 800a112:	d80c      	bhi.n	800a12e <_GetIndexMask_0+0x32>
 800a114:	280f      	cmp	r0, #15
 800a116:	d810      	bhi.n	800a13a <_GetIndexMask_0+0x3e>
 800a118:	2807      	cmp	r0, #7
 800a11a:	d812      	bhi.n	800a142 <_GetIndexMask_0+0x46>
 800a11c:	2803      	cmp	r0, #3
 800a11e:	d80e      	bhi.n	800a13e <_GetIndexMask_0+0x42>
 800a120:	2801      	cmp	r0, #1
 800a122:	bf94      	ite	ls
 800a124:	2000      	movls	r0, #0
 800a126:	2001      	movhi	r0, #1
 800a128:	bd08      	pop	{r3, pc}
 800a12a:	207f      	movs	r0, #127	; 0x7f
 800a12c:	bd08      	pop	{r3, pc}
 800a12e:	201f      	movs	r0, #31
 800a130:	bd08      	pop	{r3, pc}
 800a132:	20ff      	movs	r0, #255	; 0xff
 800a134:	bd08      	pop	{r3, pc}
 800a136:	203f      	movs	r0, #63	; 0x3f
 800a138:	bd08      	pop	{r3, pc}
 800a13a:	200f      	movs	r0, #15
 800a13c:	bd08      	pop	{r3, pc}
 800a13e:	2003      	movs	r0, #3
 800a140:	bd08      	pop	{r3, pc}
 800a142:	2007      	movs	r0, #7
 800a144:	bd08      	pop	{r3, pc}
 800a146:	bf00      	nop

0800a148 <_Index2Color_0>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4604      	mov	r4, r0
 800a14c:	f001 f8a8 	bl	800b2a0 <LCD_GetNumColors>
 800a150:	4605      	mov	r5, r0
 800a152:	f001 f8c3 	bl	800b2dc <LCD_GetPalette>
 800a156:	42a5      	cmp	r5, r4
 800a158:	d903      	bls.n	800a162 <_Index2Color_0+0x1a>
 800a15a:	b118      	cbz	r0, 800a164 <_Index2Color_0+0x1c>
 800a15c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a160:	bd38      	pop	{r3, r4, r5, pc}
 800a162:	2000      	movs	r0, #0
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop

0800a168 <_Color2Index_0>:
 800a168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a16c:	4604      	mov	r4, r0
 800a16e:	f001 f897 	bl	800b2a0 <LCD_GetNumColors>
 800a172:	4606      	mov	r6, r0
 800a174:	f001 f8b2 	bl	800b2dc <LCD_GetPalette>
 800a178:	2800      	cmp	r0, #0
 800a17a:	d061      	beq.n	800a240 <_Color2Index_0+0xd8>
 800a17c:	6803      	ldr	r3, [r0, #0]
 800a17e:	1e71      	subs	r1, r6, #1
 800a180:	4602      	mov	r2, r0
 800a182:	f1a0 0c04 	sub.w	ip, r0, #4
 800a186:	2000      	movs	r0, #0
 800a188:	42a3      	cmp	r3, r4
 800a18a:	f001 0101 	and.w	r1, r1, #1
 800a18e:	d05b      	beq.n	800a248 <_Color2Index_0+0xe0>
 800a190:	2301      	movs	r3, #1
 800a192:	429e      	cmp	r6, r3
 800a194:	dd17      	ble.n	800a1c6 <_Color2Index_0+0x5e>
 800a196:	b139      	cbz	r1, 800a1a8 <_Color2Index_0+0x40>
 800a198:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800a19c:	42a1      	cmp	r1, r4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	d04e      	beq.n	800a240 <_Color2Index_0+0xd8>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	429e      	cmp	r6, r3
 800a1a6:	dd0e      	ble.n	800a1c6 <_Color2Index_0+0x5e>
 800a1a8:	6857      	ldr	r7, [r2, #4]
 800a1aa:	1c59      	adds	r1, r3, #1
 800a1ac:	1d15      	adds	r5, r2, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	42a7      	cmp	r7, r4
 800a1b4:	f102 0208 	add.w	r2, r2, #8
 800a1b8:	d042      	beq.n	800a240 <_Color2Index_0+0xd8>
 800a1ba:	686d      	ldr	r5, [r5, #4]
 800a1bc:	42a5      	cmp	r5, r4
 800a1be:	4608      	mov	r0, r1
 800a1c0:	d040      	beq.n	800a244 <_Color2Index_0+0xdc>
 800a1c2:	429e      	cmp	r6, r3
 800a1c4:	dcf0      	bgt.n	800a1a8 <_Color2Index_0+0x40>
 800a1c6:	4667      	mov	r7, ip
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a1ce:	f001 fa1b 	bl	800b608 <GUI_CalcColorDist>
 800a1d2:	1e75      	subs	r5, r6, #1
 800a1d4:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 800a1d8:	f005 0901 	and.w	r9, r5, #1
 800a1dc:	2501      	movs	r5, #1
 800a1de:	4580      	cmp	r8, r0
 800a1e0:	bf28      	it	cs
 800a1e2:	4680      	movcs	r8, r0
 800a1e4:	42ae      	cmp	r6, r5
 800a1e6:	f04f 0a00 	mov.w	sl, #0
 800a1ea:	dd28      	ble.n	800a23e <_Color2Index_0+0xd6>
 800a1ec:	f1b9 0f00 	cmp.w	r9, #0
 800a1f0:	d00b      	beq.n	800a20a <_Color2Index_0+0xa2>
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800a1f8:	f001 fa06 	bl	800b608 <GUI_CalcColorDist>
 800a1fc:	4580      	cmp	r8, r0
 800a1fe:	bf84      	itt	hi
 800a200:	4680      	movhi	r8, r0
 800a202:	46aa      	movhi	sl, r5
 800a204:	3501      	adds	r5, #1
 800a206:	42ae      	cmp	r6, r5
 800a208:	dd19      	ble.n	800a23e <_Color2Index_0+0xd6>
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	4620      	mov	r0, r4
 800a20e:	f001 f9fb 	bl	800b608 <GUI_CalcColorDist>
 800a212:	1d39      	adds	r1, r7, #4
 800a214:	4602      	mov	r2, r0
 800a216:	4590      	cmp	r8, r2
 800a218:	4620      	mov	r0, r4
 800a21a:	f101 0704 	add.w	r7, r1, #4
 800a21e:	6849      	ldr	r1, [r1, #4]
 800a220:	bf84      	itt	hi
 800a222:	4690      	movhi	r8, r2
 800a224:	46aa      	movhi	sl, r5
 800a226:	f001 f9ef 	bl	800b608 <GUI_CalcColorDist>
 800a22a:	4580      	cmp	r8, r0
 800a22c:	f105 0901 	add.w	r9, r5, #1
 800a230:	d901      	bls.n	800a236 <_Color2Index_0+0xce>
 800a232:	4680      	mov	r8, r0
 800a234:	46ca      	mov	sl, r9
 800a236:	f109 0501 	add.w	r5, r9, #1
 800a23a:	42ae      	cmp	r6, r5
 800a23c:	dce5      	bgt.n	800a20a <_Color2Index_0+0xa2>
 800a23e:	4650      	mov	r0, sl
 800a240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a24c <GUI_MEMDEV__WriteToActiveOpaque>:
 800a24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	b0a1      	sub	sp, #132	; 0x84
 800a252:	4607      	mov	r7, r0
 800a254:	9112      	str	r1, [sp, #72]	; 0x48
 800a256:	920e      	str	r2, [sp, #56]	; 0x38
 800a258:	f7fc ff5e 	bl	8007118 <GUI_ALLOC_LockH>
 800a25c:	ab20      	add	r3, sp, #128	; 0x80
 800a25e:	6944      	ldr	r4, [r0, #20]
 800a260:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800a264:	4618      	mov	r0, r3
 800a266:	f7fc ff69 	bl	800713c <GUI_ALLOC_UnlockH>
 800a26a:	4638      	mov	r0, r7
 800a26c:	f000 ffca 	bl	800b204 <GUI_MEMDEV_GetBitsPerPixel>
 800a270:	2808      	cmp	r0, #8
 800a272:	4606      	mov	r6, r0
 800a274:	dd02      	ble.n	800a27c <GUI_MEMDEV__WriteToActiveOpaque+0x30>
 800a276:	2c00      	cmp	r4, #0
 800a278:	f000 80ad 	beq.w	800a3d6 <GUI_MEMDEV__WriteToActiveOpaque+0x18a>
 800a27c:	f04f 0800 	mov.w	r8, #0
 800a280:	f04f 0901 	mov.w	r9, #1
 800a284:	4638      	mov	r0, r7
 800a286:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
 800a28a:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 800a28e:	f7fc ff43 	bl	8007118 <GUI_ALLOC_LockH>
 800a292:	ad20      	add	r5, sp, #128	; 0x80
 800a294:	4e84      	ldr	r6, [pc, #528]	; (800a4a8 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>)
 800a296:	f845 0d10 	str.w	r0, [r5, #-16]!
 800a29a:	4604      	mov	r4, r0
 800a29c:	6803      	ldr	r3, [r0, #0]
 800a29e:	6830      	ldr	r0, [r6, #0]
 800a2a0:	6919      	ldr	r1, [r3, #16]
 800a2a2:	6922      	ldr	r2, [r4, #16]
 800a2a4:	68e3      	ldr	r3, [r4, #12]
 800a2a6:	f9b4 a008 	ldrsh.w	sl, [r4, #8]
 800a2aa:	f8d4 b014 	ldr.w	fp, [r4, #20]
 800a2ae:	f9b4 400a 	ldrsh.w	r4, [r4, #10]
 800a2b2:	7c40      	ldrb	r0, [r0, #17]
 800a2b4:	920c      	str	r2, [sp, #48]	; 0x30
 800a2b6:	9316      	str	r3, [sp, #88]	; 0x58
 800a2b8:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 800a2bc:	9415      	str	r4, [sp, #84]	; 0x54
 800a2be:	684c      	ldr	r4, [r1, #4]
 800a2c0:	f001 f800 	bl	800b2c4 <GUI_GetBitsPerPixelEx>
 800a2c4:	900a      	str	r0, [sp, #40]	; 0x28
 800a2c6:	6830      	ldr	r0, [r6, #0]
 800a2c8:	7c40      	ldrb	r0, [r0, #17]
 800a2ca:	f001 f817 	bl	800b2fc <GUI_GetpfIndex2ColorEx>
 800a2ce:	4682      	mov	sl, r0
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f7fc ff33 	bl	800713c <GUI_ALLOC_UnlockH>
 800a2d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2d8:	2d08      	cmp	r5, #8
 800a2da:	d918      	bls.n	800a30e <GUI_MEMDEV__WriteToActiveOpaque+0xc2>
 800a2dc:	2d10      	cmp	r5, #16
 800a2de:	bf8c      	ite	hi
 800a2e0:	2504      	movhi	r5, #4
 800a2e2:	2502      	movls	r5, #2
 800a2e4:	9511      	str	r5, [sp, #68]	; 0x44
 800a2e6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800a2ea:	4554      	cmp	r4, sl
 800a2ec:	d017      	beq.n	800a31e <GUI_MEMDEV__WriteToActiveOpaque+0xd2>
 800a2ee:	6835      	ldr	r5, [r6, #0]
 800a2f0:	7c68      	ldrb	r0, [r5, #17]
 800a2f2:	f001 f80d 	bl	800b310 <GUI_GetpfColor2IndexEx>
 800a2f6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	00a8      	lsls	r0, r5, #2
 800a2fc:	f7fc ff08 	bl	8007110 <GUI_ALLOC_AllocNoInit>
 800a300:	9013      	str	r0, [sp, #76]	; 0x4c
 800a302:	2800      	cmp	r0, #0
 800a304:	f040 80d4 	bne.w	800a4b0 <GUI_MEMDEV__WriteToActiveOpaque+0x264>
 800a308:	b021      	add	sp, #132	; 0x84
 800a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30e:	2d01      	cmp	r5, #1
 800a310:	f040 8168 	bne.w	800a5e4 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800a314:	9511      	str	r5, [sp, #68]	; 0x44
 800a316:	4554      	cmp	r4, sl
 800a318:	ad1e      	add	r5, sp, #120	; 0x78
 800a31a:	950d      	str	r5, [sp, #52]	; 0x34
 800a31c:	d1e7      	bne.n	800a2ee <GUI_MEMDEV__WriteToActiveOpaque+0xa2>
 800a31e:	4638      	mov	r0, r7
 800a320:	f000 ff60 	bl	800b1e4 <GUI_MEMDEV_GetDataPtr>
 800a324:	4680      	mov	r8, r0
 800a326:	f1bb 0f00 	cmp.w	fp, #0
 800a32a:	f000 8280 	beq.w	800a82e <GUI_MEMDEV__WriteToActiveOpaque+0x5e2>
 800a32e:	4658      	mov	r0, fp
 800a330:	f7fc fef2 	bl	8007118 <GUI_ALLOC_LockH>
 800a334:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a336:	901d      	str	r0, [sp, #116]	; 0x74
 800a338:	2e00      	cmp	r6, #0
 800a33a:	dd48      	ble.n	800a3ce <GUI_MEMDEV__WriteToActiveOpaque+0x182>
 800a33c:	2600      	movs	r6, #0
 800a33e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800a342:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800a346:	46b2      	mov	sl, r6
 800a348:	2501      	movs	r5, #1
 800a34a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a34c:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 800a350:	6887      	ldr	r7, [r0, #8]
 800a352:	a91a      	add	r1, sp, #104	; 0x68
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	4632      	mov	r2, r6
 800a358:	4798      	blx	r3
 800a35a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a35c:	4281      	cmp	r1, r0
 800a35e:	4604      	mov	r4, r0
 800a360:	f000 8276 	beq.w	800a850 <GUI_MEMDEV__WriteToActiveOpaque+0x604>
 800a364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a366:	2a01      	cmp	r2, #1
 800a368:	f000 829a 	beq.w	800a8a0 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d029      	beq.n	800a3c4 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800a370:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800a374:	4627      	mov	r7, r4
 800a376:	eb0e 0006 	add.w	r0, lr, r6
 800a37a:	464c      	mov	r4, r9
 800a37c:	900a      	str	r0, [sp, #40]	; 0x28
 800a37e:	46b9      	mov	r9, r7
 800a380:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a382:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a384:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a386:	9702      	str	r7, [sp, #8]
 800a388:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a38a:	9500      	str	r5, [sp, #0]
 800a38c:	fb03 8c01 	mla	ip, r3, r1, r8
 800a390:	464a      	mov	r2, r9
 800a392:	eb0b 0003 	add.w	r0, fp, r3
 800a396:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a398:	f8cd c010 	str.w	ip, [sp, #16]
 800a39c:	2301      	movs	r3, #1
 800a39e:	9705      	str	r7, [sp, #20]
 800a3a0:	9501      	str	r5, [sp, #4]
 800a3a2:	9403      	str	r4, [sp, #12]
 800a3a4:	f7ff f966 	bl	8009674 <LCD_DrawBitmap>
 800a3a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a3aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3ac:	6883      	ldr	r3, [r0, #8]
 800a3ae:	eb02 0109 	add.w	r1, r2, r9
 800a3b2:	911a      	str	r1, [sp, #104]	; 0x68
 800a3b4:	695f      	ldr	r7, [r3, #20]
 800a3b6:	a91a      	add	r1, sp, #104	; 0x68
 800a3b8:	4632      	mov	r2, r6
 800a3ba:	47b8      	blx	r7
 800a3bc:	4681      	mov	r9, r0
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d1de      	bne.n	800a380 <GUI_MEMDEV__WriteToActiveOpaque+0x134>
 800a3c2:	46a1      	mov	r9, r4
 800a3c4:	44c8      	add	r8, r9
 800a3c6:	3601      	adds	r6, #1
 800a3c8:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800a3ca:	42b7      	cmp	r7, r6
 800a3cc:	dcbd      	bgt.n	800a34a <GUI_MEMDEV__WriteToActiveOpaque+0xfe>
 800a3ce:	a81d      	add	r0, sp, #116	; 0x74
 800a3d0:	f7fc feb4 	bl	800713c <GUI_ALLOC_UnlockH>
 800a3d4:	e798      	b.n	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	f7fc fe9e 	bl	8007118 <GUI_ALLOC_LockH>
 800a3dc:	f10d 0b80 	add.w	fp, sp, #128	; 0x80
 800a3e0:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
 800a3e4:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800a3e8:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 800a3ec:	6802      	ldr	r2, [r0, #0]
 800a3ee:	68c1      	ldr	r1, [r0, #12]
 800a3f0:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800a3f4:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	910d      	str	r1, [sp, #52]	; 0x34
 800a3fe:	f7fc fe9d 	bl	800713c <GUI_ALLOC_UnlockH>
 800a402:	4829      	ldr	r0, [pc, #164]	; (800a4a8 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>)
 800a404:	4a29      	ldr	r2, [pc, #164]	; (800a4ac <GUI_MEMDEV__WriteToActiveOpaque+0x260>)
 800a406:	6804      	ldr	r4, [r0, #0]
 800a408:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a40c:	7c60      	ldrb	r0, [r4, #17]
 800a40e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a410:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800a414:	690c      	ldr	r4, [r1, #16]
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	930c      	str	r3, [sp, #48]	; 0x30
 800a41a:	f000 ff53 	bl	800b2c4 <GUI_GetBitsPerPixelEx>
 800a41e:	2808      	cmp	r0, #8
 800a420:	f240 80db 	bls.w	800a5da <GUI_MEMDEV__WriteToActiveOpaque+0x38e>
 800a424:	2810      	cmp	r0, #16
 800a426:	bf8c      	ite	hi
 800a428:	2020      	movhi	r0, #32
 800a42a:	2010      	movls	r0, #16
 800a42c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a42e:	bf8c      	ite	hi
 800a430:	f04f 0904 	movhi.w	r9, #4
 800a434:	f04f 0902 	movls.w	r9, #2
 800a438:	45a0      	cmp	r8, r4
 800a43a:	f000 82c1 	beq.w	800a9c0 <GUI_MEMDEV__WriteToActiveOpaque+0x774>
 800a43e:	2e20      	cmp	r6, #32
 800a440:	f000 8261 	beq.w	800a906 <GUI_MEMDEV__WriteToActiveOpaque+0x6ba>
 800a444:	2e10      	cmp	r6, #16
 800a446:	f47f af5f 	bne.w	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a44a:	fb0a f009 	mul.w	r0, sl, r9
 800a44e:	f7fc fe5f 	bl	8007110 <GUI_ALLOC_AllocNoInit>
 800a452:	9011      	str	r0, [sp, #68]	; 0x44
 800a454:	2800      	cmp	r0, #0
 800a456:	f43f af57 	beq.w	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a45a:	f7fc fe5d 	bl	8007118 <GUI_ALLOC_LockH>
 800a45e:	901d      	str	r0, [sp, #116]	; 0x74
 800a460:	4638      	mov	r0, r7
 800a462:	f7fc fe59 	bl	8007118 <GUI_ALLOC_LockH>
 800a466:	901b      	str	r0, [sp, #108]	; 0x6c
 800a468:	6921      	ldr	r1, [r4, #16]
 800a46a:	f100 0518 	add.w	r5, r0, #24
 800a46e:	2900      	cmp	r1, #0
 800a470:	f000 82b8 	beq.w	800a9e4 <GUI_MEMDEV__WriteToActiveOpaque+0x798>
 800a474:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 82b3 	beq.w	800a9e4 <GUI_MEMDEV__WriteToActiveOpaque+0x798>
 800a47e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800a482:	0088      	lsls	r0, r1, #2
 800a484:	f7fc fe44 	bl	8007110 <GUI_ALLOC_AllocNoInit>
 800a488:	900c      	str	r0, [sp, #48]	; 0x30
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f040 85a3 	bne.w	800afd6 <GUI_MEMDEV__WriteToActiveOpaque+0xd8a>
 800a490:	4607      	mov	r7, r0
 800a492:	901c      	str	r0, [sp, #112]	; 0x70
 800a494:	4658      	mov	r0, fp
 800a496:	f7fc fe51 	bl	800713c <GUI_ALLOC_UnlockH>
 800a49a:	a81d      	add	r0, sp, #116	; 0x74
 800a49c:	f7fc fe4e 	bl	800713c <GUI_ALLOC_UnlockH>
 800a4a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a4a2:	f7fc fe7f 	bl	80071a4 <GUI_ALLOC_Free>
 800a4a6:	e72f      	b.n	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a4a8:	1fffc808 	.word	0x1fffc808
 800a4ac:	1fffdaf0 	.word	0x1fffdaf0
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	f000 fe97 	bl	800b1e4 <GUI_MEMDEV_GetDataPtr>
 800a4b6:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4b8:	f1bb 0f00 	cmp.w	fp, #0
 800a4bc:	f000 80df 	beq.w	800a67e <GUI_MEMDEV__WriteToActiveOpaque+0x432>
 800a4c0:	4658      	mov	r0, fp
 800a4c2:	f7fc fe29 	bl	8007118 <GUI_ALLOC_LockH>
 800a4c6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800a4c8:	901d      	str	r0, [sp, #116]	; 0x74
 800a4ca:	2f00      	cmp	r7, #0
 800a4cc:	f340 80d3 	ble.w	800a676 <GUI_MEMDEV__WriteToActiveOpaque+0x42a>
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	920f      	str	r2, [sp, #60]	; 0x3c
 800a4d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a4d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4d8:	6885      	ldr	r5, [r0, #8]
 800a4da:	2700      	movs	r7, #0
 800a4dc:	696b      	ldr	r3, [r5, #20]
 800a4de:	971a      	str	r7, [sp, #104]	; 0x68
 800a4e0:	a91a      	add	r1, sp, #104	; 0x68
 800a4e2:	4798      	blx	r3
 800a4e4:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 800a4e8:	4586      	cmp	lr, r0
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	f000 8113 	beq.w	800a716 <GUI_MEMDEV__WriteToActiveOpaque+0x4ca>
 800a4f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4f2:	2901      	cmp	r1, #1
 800a4f4:	d07b      	beq.n	800a5ee <GUI_MEMDEV__WriteToActiveOpaque+0x3a2>
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	f000 80ae 	beq.w	800a658 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 800a4fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a4fe:	f7fc fe0b 	bl	8007118 <GUI_ALLOC_LockH>
 800a502:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a504:	901b      	str	r0, [sp, #108]	; 0x6c
 800a506:	4680      	mov	r8, r0
 800a508:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a50a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a50e:	fb02 f307 	mul.w	r3, r2, r7
 800a512:	2808      	cmp	r0, #8
 800a514:	eb01 0203 	add.w	r2, r1, r3
 800a518:	f240 80c6 	bls.w	800a6a8 <GUI_MEMDEV__WriteToActiveOpaque+0x45c>
 800a51c:	5ac8      	ldrh	r0, [r1, r3]
 800a51e:	9209      	str	r2, [sp, #36]	; 0x24
 800a520:	47a0      	blx	r4
 800a522:	47b0      	blx	r6
 800a524:	4647      	mov	r7, r8
 800a526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a528:	f847 0b04 	str.w	r0, [r7], #4
 800a52c:	1e6b      	subs	r3, r5, #1
 800a52e:	469a      	mov	sl, r3
 800a530:	f003 0101 	and.w	r1, r3, #1
 800a534:	f102 0b02 	add.w	fp, r2, #2
 800a538:	b32b      	cbz	r3, 800a586 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800a53a:	b151      	cbz	r1, 800a552 <GUI_MEMDEV__WriteToActiveOpaque+0x306>
 800a53c:	8850      	ldrh	r0, [r2, #2]
 800a53e:	47a0      	blx	r4
 800a540:	47b0      	blx	r6
 800a542:	3704      	adds	r7, #4
 800a544:	f1ba 0a01 	subs.w	sl, sl, #1
 800a548:	f10b 0b02 	add.w	fp, fp, #2
 800a54c:	f8c8 0004 	str.w	r0, [r8, #4]
 800a550:	d019      	beq.n	800a586 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800a552:	9510      	str	r5, [sp, #64]	; 0x40
 800a554:	4655      	mov	r5, sl
 800a556:	46ba      	mov	sl, r7
 800a558:	465f      	mov	r7, fp
 800a55a:	46d1      	mov	r9, sl
 800a55c:	f837 0b02 	ldrh.w	r0, [r7], #2
 800a560:	47a0      	blx	r4
 800a562:	47b0      	blx	r6
 800a564:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800a568:	f849 0b04 	str.w	r0, [r9], #4
 800a56c:	4618      	mov	r0, r3
 800a56e:	47a0      	blx	r4
 800a570:	47b0      	blx	r6
 800a572:	3d01      	subs	r5, #1
 800a574:	3d01      	subs	r5, #1
 800a576:	f8ca 0004 	str.w	r0, [sl, #4]
 800a57a:	f107 0b02 	add.w	fp, r7, #2
 800a57e:	f109 0a04 	add.w	sl, r9, #4
 800a582:	d1e9      	bne.n	800a558 <GUI_MEMDEV__WriteToActiveOpaque+0x30c>
 800a584:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a586:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a588:	2f1f      	cmp	r7, #31
 800a58a:	d805      	bhi.n	800a598 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800a58c:	463a      	mov	r2, r7
 800a58e:	4640      	mov	r0, r8
 800a590:	4629      	mov	r1, r5
 800a592:	f000 ff09 	bl	800b3a8 <GUI__CompactPixelIndices>
 800a596:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a598:	2001      	movs	r0, #1
 800a59a:	4603      	mov	r3, r0
 800a59c:	9000      	str	r0, [sp, #0]
 800a59e:	9001      	str	r0, [sp, #4]
 800a5a0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a5a2:	9702      	str	r7, [sp, #8]
 800a5a4:	2700      	movs	r7, #0
 800a5a6:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800a5aa:	9703      	str	r7, [sp, #12]
 800a5ac:	9004      	str	r0, [sp, #16]
 800a5ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a5b0:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a5b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a5b4:	9705      	str	r7, [sp, #20]
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4460      	add	r0, ip
 800a5ba:	f7ff f85b 	bl	8009674 <LCD_DrawBitmap>
 800a5be:	a81b      	add	r0, sp, #108	; 0x6c
 800a5c0:	f7fc fdbc 	bl	800713c <GUI_ALLOC_UnlockH>
 800a5c4:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a5c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a5c8:	6881      	ldr	r1, [r0, #8]
 800a5ca:	1953      	adds	r3, r2, r5
 800a5cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a5ce:	694d      	ldr	r5, [r1, #20]
 800a5d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5d2:	a91a      	add	r1, sp, #104	; 0x68
 800a5d4:	47a8      	blx	r5
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	e78d      	b.n	800a4f6 <GUI_MEMDEV__WriteToActiveOpaque+0x2aa>
 800a5da:	2208      	movs	r2, #8
 800a5dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800a5de:	f04f 0901 	mov.w	r9, #1
 800a5e2:	e729      	b.n	800a438 <GUI_MEMDEV__WriteToActiveOpaque+0x1ec>
 800a5e4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800a5e8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800a5ec:	e67d      	b.n	800a2ea <GUI_MEMDEV__WriteToActiveOpaque+0x9e>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d032      	beq.n	800a658 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 800a5f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a5f4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800a5f8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a5fc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800a600:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 800a604:	9410      	str	r4, [sp, #64]	; 0x40
 800a606:	9617      	str	r6, [sp, #92]	; 0x5c
 800a608:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a60a:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800a60c:	9705      	str	r7, [sp, #20]
 800a60e:	2301      	movs	r3, #1
 800a610:	2c00      	cmp	r4, #0
 800a612:	46a6      	mov	lr, r4
 800a614:	bfb8      	it	lt
 800a616:	f104 0e07 	addlt.w	lr, r4, #7
 800a61a:	f004 0c07 	and.w	ip, r4, #7
 800a61e:	eb0b 0004 	add.w	r0, fp, r4
 800a622:	eb09 04ee 	add.w	r4, r9, lr, asr #3
 800a626:	462a      	mov	r2, r5
 800a628:	4651      	mov	r1, sl
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	9302      	str	r3, [sp, #8]
 800a630:	f8cd c018 	str.w	ip, [sp, #24]
 800a634:	9603      	str	r6, [sp, #12]
 800a636:	9404      	str	r4, [sp, #16]
 800a638:	f7fe fda2 	bl	8009180 <LCD__DrawBitmap_1bpp>
 800a63c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a63e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a640:	6881      	ldr	r1, [r0, #8]
 800a642:	1953      	adds	r3, r2, r5
 800a644:	931a      	str	r3, [sp, #104]	; 0x68
 800a646:	694d      	ldr	r5, [r1, #20]
 800a648:	4642      	mov	r2, r8
 800a64a:	a91a      	add	r1, sp, #104	; 0x68
 800a64c:	47a8      	blx	r5
 800a64e:	4605      	mov	r5, r0
 800a650:	2800      	cmp	r0, #0
 800a652:	d1d9      	bne.n	800a608 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800a654:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a656:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a658:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a65a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a65c:	19c1      	adds	r1, r0, r7
 800a65e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a660:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a662:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a664:	1c6f      	adds	r7, r5, #1
 800a666:	970f      	str	r7, [sp, #60]	; 0x3c
 800a668:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a66a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800a66c:	1c41      	adds	r1, r0, #1
 800a66e:	42af      	cmp	r7, r5
 800a670:	910e      	str	r1, [sp, #56]	; 0x38
 800a672:	f73f af2f 	bgt.w	800a4d4 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 800a676:	a81d      	add	r0, sp, #116	; 0x74
 800a678:	f7fc fd60 	bl	800713c <GUI_ALLOC_UnlockH>
 800a67c:	e010      	b.n	800a6a0 <GUI_MEMDEV__WriteToActiveOpaque+0x454>
 800a67e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a680:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a682:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a684:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a686:	9102      	str	r1, [sp, #8]
 800a688:	2301      	movs	r3, #1
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	9003      	str	r0, [sp, #12]
 800a690:	9604      	str	r6, [sp, #16]
 800a692:	9505      	str	r5, [sp, #20]
 800a694:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a696:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a69a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a69c:	f7fe ffea 	bl	8009674 <LCD_DrawBitmap>
 800a6a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a6a2:	f7fc fd7f 	bl	80071a4 <GUI_ALLOC_Free>
 800a6a6:	e62f      	b.n	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a6a8:	5cc8      	ldrb	r0, [r1, r3]
 800a6aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ac:	47a0      	blx	r4
 800a6ae:	47b0      	blx	r6
 800a6b0:	4647      	mov	r7, r8
 800a6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6b4:	f847 0b04 	str.w	r0, [r7], #4
 800a6b8:	1e6b      	subs	r3, r5, #1
 800a6ba:	469b      	mov	fp, r3
 800a6bc:	f003 0101 	and.w	r1, r3, #1
 800a6c0:	f102 0a01 	add.w	sl, r2, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f43f af5e 	beq.w	800a586 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800a6ca:	b159      	cbz	r1, 800a6e4 <GUI_MEMDEV__WriteToActiveOpaque+0x498>
 800a6cc:	7850      	ldrb	r0, [r2, #1]
 800a6ce:	47a0      	blx	r4
 800a6d0:	47b0      	blx	r6
 800a6d2:	3704      	adds	r7, #4
 800a6d4:	f1bb 0b01 	subs.w	fp, fp, #1
 800a6d8:	f10a 0a01 	add.w	sl, sl, #1
 800a6dc:	f8c8 0004 	str.w	r0, [r8, #4]
 800a6e0:	f43f af51 	beq.w	800a586 <GUI_MEMDEV__WriteToActiveOpaque+0x33a>
 800a6e4:	9510      	str	r5, [sp, #64]	; 0x40
 800a6e6:	465d      	mov	r5, fp
 800a6e8:	46bb      	mov	fp, r7
 800a6ea:	4657      	mov	r7, sl
 800a6ec:	46d9      	mov	r9, fp
 800a6ee:	f817 0b01 	ldrb.w	r0, [r7], #1
 800a6f2:	47a0      	blx	r4
 800a6f4:	47b0      	blx	r6
 800a6f6:	f849 0b04 	str.w	r0, [r9], #4
 800a6fa:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800a6fe:	47a0      	blx	r4
 800a700:	47b0      	blx	r6
 800a702:	3d01      	subs	r5, #1
 800a704:	3d01      	subs	r5, #1
 800a706:	f8cb 0004 	str.w	r0, [fp, #4]
 800a70a:	f107 0a01 	add.w	sl, r7, #1
 800a70e:	f109 0b04 	add.w	fp, r9, #4
 800a712:	d1ea      	bne.n	800a6ea <GUI_MEMDEV__WriteToActiveOpaque+0x49e>
 800a714:	e736      	b.n	800a584 <GUI_MEMDEV__WriteToActiveOpaque+0x338>
 800a716:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a718:	f7fc fcfe 	bl	8007118 <GUI_ALLOC_LockH>
 800a71c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a71e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a720:	901b      	str	r0, [sp, #108]	; 0x6c
 800a722:	2a08      	cmp	r2, #8
 800a724:	4683      	mov	fp, r0
 800a726:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a728:	f103 38ff 	add.w	r8, r3, #4294967295
 800a72c:	d94f      	bls.n	800a7ce <GUI_MEMDEV__WriteToActiveOpaque+0x582>
 800a72e:	f837 0b02 	ldrh.w	r0, [r7], #2
 800a732:	47a0      	blx	r4
 800a734:	47b0      	blx	r6
 800a736:	465d      	mov	r5, fp
 800a738:	4642      	mov	r2, r8
 800a73a:	f008 0101 	and.w	r1, r8, #1
 800a73e:	f845 0b04 	str.w	r0, [r5], #4
 800a742:	3702      	adds	r7, #2
 800a744:	b312      	cbz	r2, 800a78c <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800a746:	b161      	cbz	r1, 800a762 <GUI_MEMDEV__WriteToActiveOpaque+0x516>
 800a748:	f837 0c02 	ldrh.w	r0, [r7, #-2]
 800a74c:	f8cd 8020 	str.w	r8, [sp, #32]
 800a750:	47a0      	blx	r4
 800a752:	47b0      	blx	r6
 800a754:	f8cb 0004 	str.w	r0, [fp, #4]
 800a758:	9808      	ldr	r0, [sp, #32]
 800a75a:	3504      	adds	r5, #4
 800a75c:	3702      	adds	r7, #2
 800a75e:	1e42      	subs	r2, r0, #1
 800a760:	d014      	beq.n	800a78c <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800a762:	4691      	mov	r9, r2
 800a764:	f837 0c02 	ldrh.w	r0, [r7, #-2]
 800a768:	47a0      	blx	r4
 800a76a:	47b0      	blx	r6
 800a76c:	46a8      	mov	r8, r5
 800a76e:	f848 0b04 	str.w	r0, [r8], #4
 800a772:	f837 0b02 	ldrh.w	r0, [r7], #2
 800a776:	47a0      	blx	r4
 800a778:	47b0      	blx	r6
 800a77a:	f109 33ff 	add.w	r3, r9, #4294967295
 800a77e:	3702      	adds	r7, #2
 800a780:	f1b3 0901 	subs.w	r9, r3, #1
 800a784:	6068      	str	r0, [r5, #4]
 800a786:	f108 0504 	add.w	r5, r8, #4
 800a78a:	d1eb      	bne.n	800a764 <GUI_MEMDEV__WriteToActiveOpaque+0x518>
 800a78c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a78e:	2d1f      	cmp	r5, #31
 800a790:	d804      	bhi.n	800a79c <GUI_MEMDEV__WriteToActiveOpaque+0x550>
 800a792:	4658      	mov	r0, fp
 800a794:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a796:	462a      	mov	r2, r5
 800a798:	f000 fe06 	bl	800b3a8 <GUI__CompactPixelIndices>
 800a79c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a79e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a7a0:	9002      	str	r0, [sp, #8]
 800a7a2:	2701      	movs	r7, #1
 800a7a4:	463b      	mov	r3, r7
 800a7a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a7a8:	9700      	str	r7, [sp, #0]
 800a7aa:	9701      	str	r7, [sp, #4]
 800a7ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a7ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7b0:	9005      	str	r0, [sp, #20]
 800a7b2:	2500      	movs	r5, #0
 800a7b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7b6:	9503      	str	r5, [sp, #12]
 800a7b8:	9704      	str	r7, [sp, #16]
 800a7ba:	f7fe ff5b 	bl	8009674 <LCD_DrawBitmap>
 800a7be:	a81b      	add	r0, sp, #108	; 0x6c
 800a7c0:	f7fc fcbc 	bl	800713c <GUI_ALLOC_UnlockH>
 800a7c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7c8:	188b      	adds	r3, r1, r2
 800a7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7cc:	e748      	b.n	800a660 <GUI_MEMDEV__WriteToActiveOpaque+0x414>
 800a7ce:	f817 0b01 	ldrb.w	r0, [r7], #1
 800a7d2:	47a0      	blx	r4
 800a7d4:	47b0      	blx	r6
 800a7d6:	465d      	mov	r5, fp
 800a7d8:	4642      	mov	r2, r8
 800a7da:	f008 0101 	and.w	r1, r8, #1
 800a7de:	f845 0b04 	str.w	r0, [r5], #4
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d0d2      	beq.n	800a78c <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800a7e6:	b159      	cbz	r1, 800a800 <GUI_MEMDEV__WriteToActiveOpaque+0x5b4>
 800a7e8:	f817 0b01 	ldrb.w	r0, [r7], #1
 800a7ec:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800a7f0:	47a0      	blx	r4
 800a7f2:	47b0      	blx	r6
 800a7f4:	f8cb 0004 	str.w	r0, [fp, #4]
 800a7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7fa:	3504      	adds	r5, #4
 800a7fc:	1e42      	subs	r2, r0, #1
 800a7fe:	d0c5      	beq.n	800a78c <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800a800:	4692      	mov	sl, r2
 800a802:	46b9      	mov	r9, r7
 800a804:	46a8      	mov	r8, r5
 800a806:	f819 0b01 	ldrb.w	r0, [r9], #1
 800a80a:	47a0      	blx	r4
 800a80c:	47b0      	blx	r6
 800a80e:	f848 0b04 	str.w	r0, [r8], #4
 800a812:	7878      	ldrb	r0, [r7, #1]
 800a814:	47a0      	blx	r4
 800a816:	47b0      	blx	r6
 800a818:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a81c:	f1b3 0a01 	subs.w	sl, r3, #1
 800a820:	6068      	str	r0, [r5, #4]
 800a822:	f109 0701 	add.w	r7, r9, #1
 800a826:	f108 0504 	add.w	r5, r8, #4
 800a82a:	d1ea      	bne.n	800a802 <GUI_MEMDEV__WriteToActiveOpaque+0x5b6>
 800a82c:	e7ae      	b.n	800a78c <GUI_MEMDEV__WriteToActiveOpaque+0x540>
 800a82e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a830:	9004      	str	r0, [sp, #16]
 800a832:	2501      	movs	r5, #1
 800a834:	9500      	str	r5, [sp, #0]
 800a836:	9501      	str	r5, [sp, #4]
 800a838:	9602      	str	r6, [sp, #8]
 800a83a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a83c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800a83e:	9505      	str	r5, [sp, #20]
 800a840:	9603      	str	r6, [sp, #12]
 800a842:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a844:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a846:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a848:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a84a:	f7fe ff13 	bl	8009674 <LCD_DrawBitmap>
 800a84e:	e55b      	b.n	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a850:	4637      	mov	r7, r6
 800a852:	960a      	str	r6, [sp, #40]	; 0x28
 800a854:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a856:	e000      	b.n	800a85a <GUI_MEMDEV__WriteToActiveOpaque+0x60e>
 800a858:	4627      	mov	r7, r4
 800a85a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a85c:	6882      	ldr	r2, [r0, #8]
 800a85e:	1c7c      	adds	r4, r7, #1
 800a860:	6953      	ldr	r3, [r2, #20]
 800a862:	a91a      	add	r1, sp, #104	; 0x68
 800a864:	4622      	mov	r2, r4
 800a866:	4798      	blx	r3
 800a868:	4286      	cmp	r6, r0
 800a86a:	d0f5      	beq.n	800a858 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 800a86c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a86e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a872:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800a876:	f8cd 8010 	str.w	r8, [sp, #16]
 800a87a:	1bb9      	subs	r1, r7, r6
 800a87c:	1c4f      	adds	r7, r1, #1
 800a87e:	9002      	str	r0, [sp, #8]
 800a880:	eb0c 0106 	add.w	r1, ip, r6
 800a884:	9205      	str	r2, [sp, #20]
 800a886:	9500      	str	r5, [sp, #0]
 800a888:	9501      	str	r5, [sp, #4]
 800a88a:	f8cd 900c 	str.w	r9, [sp, #12]
 800a88e:	4658      	mov	r0, fp
 800a890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a892:	463b      	mov	r3, r7
 800a894:	f7fe feee 	bl	8009674 <LCD_DrawBitmap>
 800a898:	fb09 8807 	mla	r8, r9, r7, r8
 800a89c:	4626      	mov	r6, r4
 800a89e:	e593      	b.n	800a3c8 <GUI_MEMDEV__WriteToActiveOpaque+0x17c>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	f43f ad8f 	beq.w	800a3c4 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800a8a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	1983      	adds	r3, r0, r6
 800a8ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a8ae:	464e      	mov	r6, r9
 800a8b0:	4691      	mov	r9, r2
 800a8b2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a8b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a8b6:	9500      	str	r5, [sp, #0]
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	2f00      	cmp	r7, #0
 800a8bc:	46be      	mov	lr, r7
 800a8be:	bfb8      	it	lt
 800a8c0:	f107 0e07 	addlt.w	lr, r7, #7
 800a8c4:	f007 0c07 	and.w	ip, r7, #7
 800a8c8:	eb0b 0007 	add.w	r0, fp, r7
 800a8cc:	eb08 07ee 	add.w	r7, r8, lr, asr #3
 800a8d0:	9704      	str	r7, [sp, #16]
 800a8d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a8d4:	f8cd c018 	str.w	ip, [sp, #24]
 800a8d8:	4622      	mov	r2, r4
 800a8da:	9705      	str	r7, [sp, #20]
 800a8dc:	9501      	str	r5, [sp, #4]
 800a8de:	9502      	str	r5, [sp, #8]
 800a8e0:	9603      	str	r6, [sp, #12]
 800a8e2:	f7fe fc4d 	bl	8009180 <LCD__DrawBitmap_1bpp>
 800a8e6:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a8e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a8ea:	6881      	ldr	r1, [r0, #8]
 800a8ec:	191c      	adds	r4, r3, r4
 800a8ee:	941a      	str	r4, [sp, #104]	; 0x68
 800a8f0:	694f      	ldr	r7, [r1, #20]
 800a8f2:	464a      	mov	r2, r9
 800a8f4:	a91a      	add	r1, sp, #104	; 0x68
 800a8f6:	47b8      	blx	r7
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d1d9      	bne.n	800a8b2 <GUI_MEMDEV__WriteToActiveOpaque+0x666>
 800a8fe:	4648      	mov	r0, r9
 800a900:	46b1      	mov	r9, r6
 800a902:	4606      	mov	r6, r0
 800a904:	e55e      	b.n	800a3c4 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800a906:	fb0a f009 	mul.w	r0, sl, r9
 800a90a:	f7fc fc01 	bl	8007110 <GUI_ALLOC_AllocNoInit>
 800a90e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a910:	2800      	cmp	r0, #0
 800a912:	f43f acf9 	beq.w	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a916:	f7fc fbff 	bl	8007118 <GUI_ALLOC_LockH>
 800a91a:	901d      	str	r0, [sp, #116]	; 0x74
 800a91c:	4638      	mov	r0, r7
 800a91e:	f7fc fbfb 	bl	8007118 <GUI_ALLOC_LockH>
 800a922:	901b      	str	r0, [sp, #108]	; 0x6c
 800a924:	6925      	ldr	r5, [r4, #16]
 800a926:	f100 0818 	add.w	r8, r0, #24
 800a92a:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800a92e:	2d00      	cmp	r5, #0
 800a930:	f000 81c4 	beq.w	800acbc <GUI_MEMDEV__WriteToActiveOpaque+0xa70>
 800a934:	970c      	str	r7, [sp, #48]	; 0x30
 800a936:	2601      	movs	r6, #1
 800a938:	2700      	movs	r7, #0
 800a93a:	f1b9 0f02 	cmp.w	r9, #2
 800a93e:	f000 82e1 	beq.w	800af04 <GUI_MEMDEV__WriteToActiveOpaque+0xcb8>
 800a942:	f1b9 0f04 	cmp.w	r9, #4
 800a946:	f000 8279 	beq.w	800ae3c <GUI_MEMDEV__WriteToActiveOpaque+0xbf0>
 800a94a:	f1b9 0f01 	cmp.w	r9, #1
 800a94e:	f000 8155 	beq.w	800abfc <GUI_MEMDEV__WriteToActiveOpaque+0x9b0>
 800a952:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a954:	1e44      	subs	r4, r0, #1
 800a956:	07e3      	lsls	r3, r4, #31
 800a958:	f100 8139 	bmi.w	800abce <GUI_MEMDEV__WriteToActiveOpaque+0x982>
 800a95c:	4604      	mov	r4, r0
 800a95e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a960:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800a964:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800a968:	e00f      	b.n	800a98a <GUI_MEMDEV__WriteToActiveOpaque+0x73e>
 800a96a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a96c:	9600      	str	r6, [sp, #0]
 800a96e:	9104      	str	r1, [sp, #16]
 800a970:	9601      	str	r6, [sp, #4]
 800a972:	9502      	str	r5, [sp, #8]
 800a974:	9703      	str	r7, [sp, #12]
 800a976:	9705      	str	r7, [sp, #20]
 800a978:	4648      	mov	r0, r9
 800a97a:	4641      	mov	r1, r8
 800a97c:	4652      	mov	r2, sl
 800a97e:	2301      	movs	r3, #1
 800a980:	f7fe fe78 	bl	8009674 <LCD_DrawBitmap>
 800a984:	3c01      	subs	r4, #1
 800a986:	f108 0c01 	add.w	ip, r8, #1
 800a98a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a98c:	9600      	str	r6, [sp, #0]
 800a98e:	9304      	str	r3, [sp, #16]
 800a990:	4648      	mov	r0, r9
 800a992:	2301      	movs	r3, #1
 800a994:	4661      	mov	r1, ip
 800a996:	4652      	mov	r2, sl
 800a998:	9601      	str	r6, [sp, #4]
 800a99a:	9502      	str	r5, [sp, #8]
 800a99c:	9703      	str	r7, [sp, #12]
 800a99e:	9705      	str	r7, [sp, #20]
 800a9a0:	eb0c 0803 	add.w	r8, ip, r3
 800a9a4:	f7fe fe66 	bl	8009674 <LCD_DrawBitmap>
 800a9a8:	3c01      	subs	r4, #1
 800a9aa:	d1de      	bne.n	800a96a <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	f7fc fbc5 	bl	800713c <GUI_ALLOC_UnlockH>
 800a9b2:	a81d      	add	r0, sp, #116	; 0x74
 800a9b4:	f7fc fbc2 	bl	800713c <GUI_ALLOC_UnlockH>
 800a9b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a9ba:	f7fc fbf3 	bl	80071a4 <GUI_ALLOC_Free>
 800a9be:	e4a3      	b.n	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a9c0:	f105 0118 	add.w	r1, r5, #24
 800a9c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a9c6:	9104      	str	r1, [sp, #16]
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	9000      	str	r0, [sp, #0]
 800a9ce:	9001      	str	r0, [sp, #4]
 800a9d0:	9205      	str	r2, [sp, #20]
 800a9d2:	9602      	str	r6, [sp, #8]
 800a9d4:	9503      	str	r5, [sp, #12]
 800a9d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a9d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9dc:	4652      	mov	r2, sl
 800a9de:	f7fe fe49 	bl	8009674 <LCD_DrawBitmap>
 800a9e2:	e491      	b.n	800a308 <GUI_MEMDEV__WriteToActiveOpaque+0xbc>
 800a9e4:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800a9e8:	960d      	str	r6, [sp, #52]	; 0x34
 800a9ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a9ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a9ee:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800a9f2:	e01d      	b.n	800aa30 <GUI_MEMDEV__WriteToActiveOpaque+0x7e4>
 800a9f4:	f1b9 0f04 	cmp.w	r9, #4
 800a9f8:	f000 80a2 	beq.w	800ab40 <GUI_MEMDEV__WriteToActiveOpaque+0x8f4>
 800a9fc:	f1b9 0f01 	cmp.w	r9, #1
 800aa00:	d05c      	beq.n	800aabc <GUI_MEMDEV__WriteToActiveOpaque+0x870>
 800aa02:	2100      	movs	r1, #0
 800aa04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa08:	9103      	str	r1, [sp, #12]
 800aa0a:	2701      	movs	r7, #1
 800aa0c:	9105      	str	r1, [sp, #20]
 800aa0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa10:	9700      	str	r7, [sp, #0]
 800aa12:	9701      	str	r7, [sp, #4]
 800aa14:	9202      	str	r2, [sp, #8]
 800aa16:	9304      	str	r3, [sp, #16]
 800aa18:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	18cf      	adds	r7, r1, r3
 800aa20:	f7fe fe28 	bl	8009674 <LCD_DrawBitmap>
 800aa24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa26:	1e42      	subs	r2, r0, #1
 800aa28:	920a      	str	r2, [sp, #40]	; 0x28
 800aa2a:	f000 80cd 	beq.w	800abc8 <GUI_MEMDEV__WriteToActiveOpaque+0x97c>
 800aa2e:	970e      	str	r7, [sp, #56]	; 0x38
 800aa30:	f1b9 0f02 	cmp.w	r9, #2
 800aa34:	d1de      	bne.n	800a9f4 <GUI_MEMDEV__WriteToActiveOpaque+0x7a8>
 800aa36:	462f      	mov	r7, r5
 800aa38:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800aa3c:	f837 0b02 	ldrh.w	r0, [r7], #2
 800aa40:	9709      	str	r7, [sp, #36]	; 0x24
 800aa42:	47a0      	blx	r4
 800aa44:	47b0      	blx	r6
 800aa46:	46c3      	mov	fp, r8
 800aa48:	f10a 3eff 	add.w	lr, sl, #4294967295
 800aa4c:	4677      	mov	r7, lr
 800aa4e:	f00e 0301 	and.w	r3, lr, #1
 800aa52:	f82b 0b02 	strh.w	r0, [fp], #2
 800aa56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa58:	2f00      	cmp	r7, #0
 800aa5a:	d02c      	beq.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800aa5c:	b15b      	cbz	r3, 800aa76 <GUI_MEMDEV__WriteToActiveOpaque+0x82a>
 800aa5e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800aa62:	9209      	str	r2, [sp, #36]	; 0x24
 800aa64:	47a0      	blx	r4
 800aa66:	47b0      	blx	r6
 800aa68:	3f01      	subs	r7, #1
 800aa6a:	f10b 0b02 	add.w	fp, fp, #2
 800aa6e:	f8a8 0002 	strh.w	r0, [r8, #2]
 800aa72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa74:	d01f      	beq.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800aa76:	462b      	mov	r3, r5
 800aa78:	4651      	mov	r1, sl
 800aa7a:	4615      	mov	r5, r2
 800aa7c:	46ca      	mov	sl, r9
 800aa7e:	46a1      	mov	r9, r4
 800aa80:	462c      	mov	r4, r5
 800aa82:	46d8      	mov	r8, fp
 800aa84:	f834 0b02 	ldrh.w	r0, [r4], #2
 800aa88:	9109      	str	r1, [sp, #36]	; 0x24
 800aa8a:	9308      	str	r3, [sp, #32]
 800aa8c:	47c8      	blx	r9
 800aa8e:	47b0      	blx	r6
 800aa90:	f828 0b02 	strh.w	r0, [r8], #2
 800aa94:	8868      	ldrh	r0, [r5, #2]
 800aa96:	47c8      	blx	r9
 800aa98:	47b0      	blx	r6
 800aa9a:	1e79      	subs	r1, r7, #1
 800aa9c:	1ca5      	adds	r5, r4, #2
 800aa9e:	1e4f      	subs	r7, r1, #1
 800aaa0:	f8ab 0002 	strh.w	r0, [fp, #2]
 800aaa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaa6:	9b08      	ldr	r3, [sp, #32]
 800aaa8:	f108 0b02 	add.w	fp, r8, #2
 800aaac:	d1e8      	bne.n	800aa80 <GUI_MEMDEV__WriteToActiveOpaque+0x834>
 800aaae:	464c      	mov	r4, r9
 800aab0:	461d      	mov	r5, r3
 800aab2:	46d1      	mov	r9, sl
 800aab4:	468a      	mov	sl, r1
 800aab6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aab8:	182d      	adds	r5, r5, r0
 800aaba:	e7a2      	b.n	800aa02 <GUI_MEMDEV__WriteToActiveOpaque+0x7b6>
 800aabc:	46ab      	mov	fp, r5
 800aabe:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800aac2:	f83b 0b02 	ldrh.w	r0, [fp], #2
 800aac6:	47a0      	blx	r4
 800aac8:	47b0      	blx	r6
 800aaca:	4647      	mov	r7, r8
 800aacc:	f10a 3cff 	add.w	ip, sl, #4294967295
 800aad0:	4662      	mov	r2, ip
 800aad2:	f00c 0101 	and.w	r1, ip, #1
 800aad6:	f807 0b01 	strb.w	r0, [r7], #1
 800aada:	2a00      	cmp	r2, #0
 800aadc:	d0eb      	beq.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800aade:	b159      	cbz	r1, 800aaf8 <GUI_MEMDEV__WriteToActiveOpaque+0x8ac>
 800aae0:	f83b 0b02 	ldrh.w	r0, [fp], #2
 800aae4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800aae8:	47a0      	blx	r4
 800aaea:	47b0      	blx	r6
 800aaec:	f888 0001 	strb.w	r0, [r8, #1]
 800aaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf2:	3701      	adds	r7, #1
 800aaf4:	1e42      	subs	r2, r0, #1
 800aaf6:	d0de      	beq.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800aaf8:	462b      	mov	r3, r5
 800aafa:	4651      	mov	r1, sl
 800aafc:	4625      	mov	r5, r4
 800aafe:	46ca      	mov	sl, r9
 800ab00:	4691      	mov	r9, r2
 800ab02:	465c      	mov	r4, fp
 800ab04:	46b8      	mov	r8, r7
 800ab06:	f834 0b02 	ldrh.w	r0, [r4], #2
 800ab0a:	9109      	str	r1, [sp, #36]	; 0x24
 800ab0c:	9308      	str	r3, [sp, #32]
 800ab0e:	47a8      	blx	r5
 800ab10:	47b0      	blx	r6
 800ab12:	f808 0b01 	strb.w	r0, [r8], #1
 800ab16:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 800ab1a:	47a8      	blx	r5
 800ab1c:	47b0      	blx	r6
 800ab1e:	f109 33ff 	add.w	r3, r9, #4294967295
 800ab22:	7078      	strb	r0, [r7, #1]
 800ab24:	f1b3 0901 	subs.w	r9, r3, #1
 800ab28:	f104 0b02 	add.w	fp, r4, #2
 800ab2c:	f108 0701 	add.w	r7, r8, #1
 800ab30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab32:	9b08      	ldr	r3, [sp, #32]
 800ab34:	d1e5      	bne.n	800ab02 <GUI_MEMDEV__WriteToActiveOpaque+0x8b6>
 800ab36:	462c      	mov	r4, r5
 800ab38:	46d1      	mov	r9, sl
 800ab3a:	461d      	mov	r5, r3
 800ab3c:	468a      	mov	sl, r1
 800ab3e:	e7ba      	b.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800ab40:	462f      	mov	r7, r5
 800ab42:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ab46:	f837 0b02 	ldrh.w	r0, [r7], #2
 800ab4a:	9709      	str	r7, [sp, #36]	; 0x24
 800ab4c:	47a0      	blx	r4
 800ab4e:	47b0      	blx	r6
 800ab50:	46c3      	mov	fp, r8
 800ab52:	f10a 3eff 	add.w	lr, sl, #4294967295
 800ab56:	4677      	mov	r7, lr
 800ab58:	f00e 0101 	and.w	r1, lr, #1
 800ab5c:	f84b 0b04 	str.w	r0, [fp], #4
 800ab60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab62:	2f00      	cmp	r7, #0
 800ab64:	d0a7      	beq.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800ab66:	b159      	cbz	r1, 800ab80 <GUI_MEMDEV__WriteToActiveOpaque+0x934>
 800ab68:	f832 0b02 	ldrh.w	r0, [r2], #2
 800ab6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab6e:	47a0      	blx	r4
 800ab70:	47b0      	blx	r6
 800ab72:	3f01      	subs	r7, #1
 800ab74:	f10b 0b04 	add.w	fp, fp, #4
 800ab78:	f8c8 0004 	str.w	r0, [r8, #4]
 800ab7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab7e:	d09a      	beq.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800ab80:	4629      	mov	r1, r5
 800ab82:	46d4      	mov	ip, sl
 800ab84:	4615      	mov	r5, r2
 800ab86:	46ca      	mov	sl, r9
 800ab88:	46a1      	mov	r9, r4
 800ab8a:	462c      	mov	r4, r5
 800ab8c:	46d8      	mov	r8, fp
 800ab8e:	f834 0b02 	ldrh.w	r0, [r4], #2
 800ab92:	9109      	str	r1, [sp, #36]	; 0x24
 800ab94:	f8cd c020 	str.w	ip, [sp, #32]
 800ab98:	47c8      	blx	r9
 800ab9a:	47b0      	blx	r6
 800ab9c:	886d      	ldrh	r5, [r5, #2]
 800ab9e:	f848 0b04 	str.w	r0, [r8], #4
 800aba2:	4628      	mov	r0, r5
 800aba4:	47c8      	blx	r9
 800aba6:	47b0      	blx	r6
 800aba8:	1e7b      	subs	r3, r7, #1
 800abaa:	1ca5      	adds	r5, r4, #2
 800abac:	1e5f      	subs	r7, r3, #1
 800abae:	f8cb 0004 	str.w	r0, [fp, #4]
 800abb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abb4:	f8dd c020 	ldr.w	ip, [sp, #32]
 800abb8:	f108 0b04 	add.w	fp, r8, #4
 800abbc:	d1e5      	bne.n	800ab8a <GUI_MEMDEV__WriteToActiveOpaque+0x93e>
 800abbe:	464c      	mov	r4, r9
 800abc0:	460d      	mov	r5, r1
 800abc2:	46d1      	mov	r9, sl
 800abc4:	46e2      	mov	sl, ip
 800abc6:	e776      	b.n	800aab6 <GUI_MEMDEV__WriteToActiveOpaque+0x86a>
 800abc8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800abcc:	e462      	b.n	800a494 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800abce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800abd2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800abd4:	9202      	str	r2, [sp, #8]
 800abd6:	1c4d      	adds	r5, r1, #1
 800abd8:	9004      	str	r0, [sp, #16]
 800abda:	9600      	str	r6, [sp, #0]
 800abdc:	9601      	str	r6, [sp, #4]
 800abde:	9703      	str	r7, [sp, #12]
 800abe0:	9705      	str	r7, [sp, #20]
 800abe2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800abe4:	4652      	mov	r2, sl
 800abe6:	4633      	mov	r3, r6
 800abe8:	f7fe fd44 	bl	8009674 <LCD_DrawBitmap>
 800abec:	950e      	str	r5, [sp, #56]	; 0x38
 800abee:	940a      	str	r4, [sp, #40]	; 0x28
 800abf0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800abf2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800abf6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 800abfa:	e6c6      	b.n	800a98a <GUI_MEMDEV__WriteToActiveOpaque+0x73e>
 800abfc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800ac00:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac04:	f019 0f01 	tst.w	r9, #1
 800ac08:	f000 82a2 	beq.w	800b150 <GUI_MEMDEV__WriteToActiveOpaque+0xf04>
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ac10:	4652      	mov	r2, sl
 800ac12:	4633      	mov	r3, r6
 800ac14:	47a8      	blx	r5
 800ac16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac18:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ac1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac1c:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800ac20:	9202      	str	r2, [sp, #8]
 800ac22:	1c4d      	adds	r5, r1, #1
 800ac24:	9004      	str	r0, [sp, #16]
 800ac26:	9600      	str	r6, [sp, #0]
 800ac28:	9601      	str	r6, [sp, #4]
 800ac2a:	9703      	str	r7, [sp, #12]
 800ac2c:	9705      	str	r7, [sp, #20]
 800ac2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac30:	4652      	mov	r2, sl
 800ac32:	4633      	mov	r3, r6
 800ac34:	44f0      	add	r8, lr
 800ac36:	f7fe fd1d 	bl	8009674 <LCD_DrawBitmap>
 800ac3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800ac3e:	950e      	str	r5, [sp, #56]	; 0x38
 800ac40:	46a9      	mov	r9, r5
 800ac42:	e01c      	b.n	800ac7e <GUI_MEMDEV__WriteToActiveOpaque+0xa32>
 800ac44:	f8cd c020 	str.w	ip, [sp, #32]
 800ac48:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ac4a:	6925      	ldr	r5, [r4, #16]
 800ac4c:	47a8      	blx	r5
 800ac4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ac52:	9102      	str	r1, [sp, #8]
 800ac54:	9204      	str	r2, [sp, #16]
 800ac56:	4649      	mov	r1, r9
 800ac58:	9600      	str	r6, [sp, #0]
 800ac5a:	9601      	str	r6, [sp, #4]
 800ac5c:	9703      	str	r7, [sp, #12]
 800ac5e:	9705      	str	r7, [sp, #20]
 800ac60:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac64:	4652      	mov	r2, sl
 800ac66:	2301      	movs	r3, #1
 800ac68:	f7fe fd04 	bl	8009674 <LCD_DrawBitmap>
 800ac6c:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ac70:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac74:	44a8      	add	r8, r5
 800ac76:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800ac7a:	f109 0901 	add.w	r9, r9, #1
 800ac7e:	4640      	mov	r0, r8
 800ac80:	2301      	movs	r3, #1
 800ac82:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ac84:	6925      	ldr	r5, [r4, #16]
 800ac86:	4652      	mov	r2, sl
 800ac88:	47a8      	blx	r5
 800ac8a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ac8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8e:	9504      	str	r5, [sp, #16]
 800ac90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac92:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ac94:	9302      	str	r3, [sp, #8]
 800ac96:	4649      	mov	r1, r9
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4652      	mov	r2, sl
 800ac9c:	9600      	str	r6, [sp, #0]
 800ac9e:	9601      	str	r6, [sp, #4]
 800aca0:	9703      	str	r7, [sp, #12]
 800aca2:	9705      	str	r7, [sp, #20]
 800aca4:	44a8      	add	r8, r5
 800aca6:	4499      	add	r9, r3
 800aca8:	f7fe fce4 	bl	8009674 <LCD_DrawBitmap>
 800acac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800acae:	2301      	movs	r3, #1
 800acb0:	f1b5 0c01 	subs.w	ip, r5, #1
 800acb4:	4640      	mov	r0, r8
 800acb6:	4652      	mov	r2, sl
 800acb8:	d1c4      	bne.n	800ac44 <GUI_MEMDEV__WriteToActiveOpaque+0x9f8>
 800acba:	e677      	b.n	800a9ac <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800acbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800acbe:	970d      	str	r7, [sp, #52]	; 0x34
 800acc0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800acc4:	e01d      	b.n	800ad02 <GUI_MEMDEV__WriteToActiveOpaque+0xab6>
 800acc6:	f1b9 0f04 	cmp.w	r9, #4
 800acca:	f000 8082 	beq.w	800add2 <GUI_MEMDEV__WriteToActiveOpaque+0xb86>
 800acce:	f1b9 0f01 	cmp.w	r9, #1
 800acd2:	d04c      	beq.n	800ad6e <GUI_MEMDEV__WriteToActiveOpaque+0xb22>
 800acd4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800acd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acd8:	9104      	str	r1, [sp, #16]
 800acda:	2701      	movs	r7, #1
 800acdc:	2500      	movs	r5, #0
 800acde:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ace0:	9602      	str	r6, [sp, #8]
 800ace2:	9503      	str	r5, [sp, #12]
 800ace4:	9505      	str	r5, [sp, #20]
 800ace6:	4652      	mov	r2, sl
 800ace8:	9700      	str	r7, [sp, #0]
 800acea:	9701      	str	r7, [sp, #4]
 800acec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800acee:	463b      	mov	r3, r7
 800acf0:	19ce      	adds	r6, r1, r7
 800acf2:	f7fe fcbf 	bl	8009674 <LCD_DrawBitmap>
 800acf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acf8:	1e55      	subs	r5, r2, #1
 800acfa:	950a      	str	r5, [sp, #40]	; 0x28
 800acfc:	f000 809b 	beq.w	800ae36 <GUI_MEMDEV__WriteToActiveOpaque+0xbea>
 800ad00:	960e      	str	r6, [sp, #56]	; 0x38
 800ad02:	f1b9 0f02 	cmp.w	r9, #2
 800ad06:	d1de      	bne.n	800acc6 <GUI_MEMDEV__WriteToActiveOpaque+0xa7a>
 800ad08:	46c3      	mov	fp, r8
 800ad0a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800ad0c:	f85b 0b04 	ldr.w	r0, [fp], #4
 800ad10:	47a0      	blx	r4
 800ad12:	463e      	mov	r6, r7
 800ad14:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ad18:	4665      	mov	r5, ip
 800ad1a:	f00c 0301 	and.w	r3, ip, #1
 800ad1e:	f826 0b02 	strh.w	r0, [r6], #2
 800ad22:	b30d      	cbz	r5, 800ad68 <GUI_MEMDEV__WriteToActiveOpaque+0xb1c>
 800ad24:	b133      	cbz	r3, 800ad34 <GUI_MEMDEV__WriteToActiveOpaque+0xae8>
 800ad26:	f85b 0b04 	ldr.w	r0, [fp], #4
 800ad2a:	47a0      	blx	r4
 800ad2c:	3602      	adds	r6, #2
 800ad2e:	3d01      	subs	r5, #1
 800ad30:	8078      	strh	r0, [r7, #2]
 800ad32:	d019      	beq.n	800ad68 <GUI_MEMDEV__WriteToActiveOpaque+0xb1c>
 800ad34:	4653      	mov	r3, sl
 800ad36:	46c2      	mov	sl, r8
 800ad38:	46a0      	mov	r8, r4
 800ad3a:	465c      	mov	r4, fp
 800ad3c:	4637      	mov	r7, r6
 800ad3e:	f854 0b04 	ldr.w	r0, [r4], #4
 800ad42:	9309      	str	r3, [sp, #36]	; 0x24
 800ad44:	47c0      	blx	r8
 800ad46:	f8db 1004 	ldr.w	r1, [fp, #4]
 800ad4a:	f827 0b02 	strh.w	r0, [r7], #2
 800ad4e:	4608      	mov	r0, r1
 800ad50:	47c0      	blx	r8
 800ad52:	1e6a      	subs	r2, r5, #1
 800ad54:	8070      	strh	r0, [r6, #2]
 800ad56:	1cbe      	adds	r6, r7, #2
 800ad58:	1e55      	subs	r5, r2, #1
 800ad5a:	f104 0b04 	add.w	fp, r4, #4
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	d1eb      	bne.n	800ad3a <GUI_MEMDEV__WriteToActiveOpaque+0xaee>
 800ad62:	4644      	mov	r4, r8
 800ad64:	46d0      	mov	r8, sl
 800ad66:	469a      	mov	sl, r3
 800ad68:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad6a:	4480      	add	r8, r0
 800ad6c:	e7b2      	b.n	800acd4 <GUI_MEMDEV__WriteToActiveOpaque+0xa88>
 800ad6e:	46c3      	mov	fp, r8
 800ad70:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800ad72:	f85b 0b04 	ldr.w	r0, [fp], #4
 800ad76:	47a0      	blx	r4
 800ad78:	463e      	mov	r6, r7
 800ad7a:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ad7e:	4665      	mov	r5, ip
 800ad80:	f00c 0301 	and.w	r3, ip, #1
 800ad84:	f806 0b01 	strb.w	r0, [r6], #1
 800ad88:	b305      	cbz	r5, 800adcc <GUI_MEMDEV__WriteToActiveOpaque+0xb80>
 800ad8a:	b133      	cbz	r3, 800ad9a <GUI_MEMDEV__WriteToActiveOpaque+0xb4e>
 800ad8c:	f85b 0b04 	ldr.w	r0, [fp], #4
 800ad90:	47a0      	blx	r4
 800ad92:	3601      	adds	r6, #1
 800ad94:	3d01      	subs	r5, #1
 800ad96:	7078      	strb	r0, [r7, #1]
 800ad98:	d018      	beq.n	800adcc <GUI_MEMDEV__WriteToActiveOpaque+0xb80>
 800ad9a:	4652      	mov	r2, sl
 800ad9c:	46c2      	mov	sl, r8
 800ad9e:	46a0      	mov	r8, r4
 800ada0:	465c      	mov	r4, fp
 800ada2:	4637      	mov	r7, r6
 800ada4:	f854 0b04 	ldr.w	r0, [r4], #4
 800ada8:	9208      	str	r2, [sp, #32]
 800adaa:	47c0      	blx	r8
 800adac:	f807 0b01 	strb.w	r0, [r7], #1
 800adb0:	f8db 0004 	ldr.w	r0, [fp, #4]
 800adb4:	47c0      	blx	r8
 800adb6:	1e69      	subs	r1, r5, #1
 800adb8:	7070      	strb	r0, [r6, #1]
 800adba:	1c7e      	adds	r6, r7, #1
 800adbc:	1e4d      	subs	r5, r1, #1
 800adbe:	f104 0b04 	add.w	fp, r4, #4
 800adc2:	9a08      	ldr	r2, [sp, #32]
 800adc4:	d1ec      	bne.n	800ada0 <GUI_MEMDEV__WriteToActiveOpaque+0xb54>
 800adc6:	4644      	mov	r4, r8
 800adc8:	46d0      	mov	r8, sl
 800adca:	4692      	mov	sl, r2
 800adcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800adce:	4480      	add	r8, r0
 800add0:	e780      	b.n	800acd4 <GUI_MEMDEV__WriteToActiveOpaque+0xa88>
 800add2:	46c3      	mov	fp, r8
 800add4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800add6:	f85b 0b04 	ldr.w	r0, [fp], #4
 800adda:	47a0      	blx	r4
 800addc:	463e      	mov	r6, r7
 800adde:	f10a 3eff 	add.w	lr, sl, #4294967295
 800ade2:	4675      	mov	r5, lr
 800ade4:	f00e 0301 	and.w	r3, lr, #1
 800ade8:	f846 0b04 	str.w	r0, [r6], #4
 800adec:	b305      	cbz	r5, 800ae30 <GUI_MEMDEV__WriteToActiveOpaque+0xbe4>
 800adee:	b133      	cbz	r3, 800adfe <GUI_MEMDEV__WriteToActiveOpaque+0xbb2>
 800adf0:	f85b 0b04 	ldr.w	r0, [fp], #4
 800adf4:	47a0      	blx	r4
 800adf6:	3604      	adds	r6, #4
 800adf8:	3d01      	subs	r5, #1
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	d018      	beq.n	800ae30 <GUI_MEMDEV__WriteToActiveOpaque+0xbe4>
 800adfe:	4652      	mov	r2, sl
 800ae00:	46c2      	mov	sl, r8
 800ae02:	46a0      	mov	r8, r4
 800ae04:	465c      	mov	r4, fp
 800ae06:	4637      	mov	r7, r6
 800ae08:	f854 0b04 	ldr.w	r0, [r4], #4
 800ae0c:	9208      	str	r2, [sp, #32]
 800ae0e:	47c0      	blx	r8
 800ae10:	f847 0b04 	str.w	r0, [r7], #4
 800ae14:	f8db 0004 	ldr.w	r0, [fp, #4]
 800ae18:	47c0      	blx	r8
 800ae1a:	1e69      	subs	r1, r5, #1
 800ae1c:	6070      	str	r0, [r6, #4]
 800ae1e:	1d3e      	adds	r6, r7, #4
 800ae20:	1e4d      	subs	r5, r1, #1
 800ae22:	f104 0b04 	add.w	fp, r4, #4
 800ae26:	9a08      	ldr	r2, [sp, #32]
 800ae28:	d1ec      	bne.n	800ae04 <GUI_MEMDEV__WriteToActiveOpaque+0xbb8>
 800ae2a:	4644      	mov	r4, r8
 800ae2c:	46d0      	mov	r8, sl
 800ae2e:	4692      	mov	sl, r2
 800ae30:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ae32:	4480      	add	r8, r0
 800ae34:	e74e      	b.n	800acd4 <GUI_MEMDEV__WriteToActiveOpaque+0xa88>
 800ae36:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800ae3a:	e5b7      	b.n	800a9ac <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800ae3c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800ae40:	f10e 3cff 	add.w	ip, lr, #4294967295
 800ae44:	f01c 0f01 	tst.w	ip, #1
 800ae48:	f000 80c2 	beq.w	800afd0 <GUI_MEMDEV__WriteToActiveOpaque+0xd84>
 800ae4c:	4640      	mov	r0, r8
 800ae4e:	464b      	mov	r3, r9
 800ae50:	f8cd c020 	str.w	ip, [sp, #32]
 800ae54:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ae56:	4652      	mov	r2, sl
 800ae58:	47a8      	blx	r5
 800ae5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ae5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ae60:	9302      	str	r3, [sp, #8]
 800ae62:	9204      	str	r2, [sp, #16]
 800ae64:	9600      	str	r6, [sp, #0]
 800ae66:	9601      	str	r6, [sp, #4]
 800ae68:	9703      	str	r7, [sp, #12]
 800ae6a:	9705      	str	r7, [sp, #20]
 800ae6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ae6e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ae72:	4652      	mov	r2, sl
 800ae74:	4633      	mov	r3, r6
 800ae76:	1c4d      	adds	r5, r1, #1
 800ae78:	f7fe fbfc 	bl	8009674 <LCD_DrawBitmap>
 800ae7c:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ae80:	950e      	str	r5, [sp, #56]	; 0x38
 800ae82:	44c8      	add	r8, r9
 800ae84:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800ae88:	46a9      	mov	r9, r5
 800ae8a:	e01c      	b.n	800aec6 <GUI_MEMDEV__WriteToActiveOpaque+0xc7a>
 800ae8c:	f8cd c020 	str.w	ip, [sp, #32]
 800ae90:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ae92:	6925      	ldr	r5, [r4, #16]
 800ae94:	47a8      	blx	r5
 800ae96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae98:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ae9a:	9102      	str	r1, [sp, #8]
 800ae9c:	9004      	str	r0, [sp, #16]
 800ae9e:	4649      	mov	r1, r9
 800aea0:	9600      	str	r6, [sp, #0]
 800aea2:	9601      	str	r6, [sp, #4]
 800aea4:	9703      	str	r7, [sp, #12]
 800aea6:	9705      	str	r7, [sp, #20]
 800aea8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aeaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aeac:	4652      	mov	r2, sl
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f7fe fbe0 	bl	8009674 <LCD_DrawBitmap>
 800aeb4:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aeb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aebc:	44a8      	add	r8, r5
 800aebe:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800aec2:	f109 0901 	add.w	r9, r9, #1
 800aec6:	4640      	mov	r0, r8
 800aec8:	2304      	movs	r3, #4
 800aeca:	991d      	ldr	r1, [sp, #116]	; 0x74
 800aecc:	6925      	ldr	r5, [r4, #16]
 800aece:	4652      	mov	r2, sl
 800aed0:	47a8      	blx	r5
 800aed2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aed6:	9504      	str	r5, [sp, #16]
 800aed8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aeda:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aedc:	9302      	str	r3, [sp, #8]
 800aede:	4649      	mov	r1, r9
 800aee0:	2301      	movs	r3, #1
 800aee2:	4652      	mov	r2, sl
 800aee4:	9600      	str	r6, [sp, #0]
 800aee6:	9601      	str	r6, [sp, #4]
 800aee8:	9703      	str	r7, [sp, #12]
 800aeea:	9705      	str	r7, [sp, #20]
 800aeec:	44a8      	add	r8, r5
 800aeee:	4499      	add	r9, r3
 800aef0:	f7fe fbc0 	bl	8009674 <LCD_DrawBitmap>
 800aef4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800aef6:	2304      	movs	r3, #4
 800aef8:	f1b5 0c01 	subs.w	ip, r5, #1
 800aefc:	4640      	mov	r0, r8
 800aefe:	4652      	mov	r2, sl
 800af00:	d1c4      	bne.n	800ae8c <GUI_MEMDEV__WriteToActiveOpaque+0xc40>
 800af02:	e553      	b.n	800a9ac <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800af04:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800af08:	f10e 3cff 	add.w	ip, lr, #4294967295
 800af0c:	f01c 0f01 	tst.w	ip, #1
 800af10:	d13e      	bne.n	800af90 <GUI_MEMDEV__WriteToActiveOpaque+0xd44>
 800af12:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800af16:	e01c      	b.n	800af52 <GUI_MEMDEV__WriteToActiveOpaque+0xd06>
 800af18:	f8cd c020 	str.w	ip, [sp, #32]
 800af1c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800af1e:	6925      	ldr	r5, [r4, #16]
 800af20:	47a8      	blx	r5
 800af22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af26:	9102      	str	r1, [sp, #8]
 800af28:	9204      	str	r2, [sp, #16]
 800af2a:	4649      	mov	r1, r9
 800af2c:	2301      	movs	r3, #1
 800af2e:	9600      	str	r6, [sp, #0]
 800af30:	9601      	str	r6, [sp, #4]
 800af32:	9703      	str	r7, [sp, #12]
 800af34:	9705      	str	r7, [sp, #20]
 800af36:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af38:	4652      	mov	r2, sl
 800af3a:	f7fe fb9b 	bl	8009674 <LCD_DrawBitmap>
 800af3e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800af42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af44:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af48:	4498      	add	r8, r3
 800af4a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800af4e:	f109 0901 	add.w	r9, r9, #1
 800af52:	4640      	mov	r0, r8
 800af54:	2302      	movs	r3, #2
 800af56:	991d      	ldr	r1, [sp, #116]	; 0x74
 800af58:	6925      	ldr	r5, [r4, #16]
 800af5a:	4652      	mov	r2, sl
 800af5c:	47a8      	blx	r5
 800af5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800af60:	9812      	ldr	r0, [sp, #72]	; 0x48
 800af62:	9502      	str	r5, [sp, #8]
 800af64:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800af66:	9600      	str	r6, [sp, #0]
 800af68:	9504      	str	r5, [sp, #16]
 800af6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af6c:	9601      	str	r6, [sp, #4]
 800af6e:	2301      	movs	r3, #1
 800af70:	4649      	mov	r1, r9
 800af72:	4652      	mov	r2, sl
 800af74:	9703      	str	r7, [sp, #12]
 800af76:	9705      	str	r7, [sp, #20]
 800af78:	44a8      	add	r8, r5
 800af7a:	4499      	add	r9, r3
 800af7c:	f7fe fb7a 	bl	8009674 <LCD_DrawBitmap>
 800af80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800af82:	2302      	movs	r3, #2
 800af84:	f1b5 0c01 	subs.w	ip, r5, #1
 800af88:	4640      	mov	r0, r8
 800af8a:	4652      	mov	r2, sl
 800af8c:	d1c4      	bne.n	800af18 <GUI_MEMDEV__WriteToActiveOpaque+0xccc>
 800af8e:	e50d      	b.n	800a9ac <GUI_MEMDEV__WriteToActiveOpaque+0x760>
 800af90:	4640      	mov	r0, r8
 800af92:	464b      	mov	r3, r9
 800af94:	f8cd c020 	str.w	ip, [sp, #32]
 800af98:	991d      	ldr	r1, [sp, #116]	; 0x74
 800af9a:	4652      	mov	r2, sl
 800af9c:	47a8      	blx	r5
 800af9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800afa2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800afa4:	9302      	str	r3, [sp, #8]
 800afa6:	9004      	str	r0, [sp, #16]
 800afa8:	9600      	str	r6, [sp, #0]
 800afaa:	9601      	str	r6, [sp, #4]
 800afac:	9703      	str	r7, [sp, #12]
 800afae:	9705      	str	r7, [sp, #20]
 800afb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800afb2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800afb6:	4652      	mov	r2, sl
 800afb8:	4633      	mov	r3, r6
 800afba:	1c4d      	adds	r5, r1, #1
 800afbc:	f7fe fb5a 	bl	8009674 <LCD_DrawBitmap>
 800afc0:	f8dd c020 	ldr.w	ip, [sp, #32]
 800afc4:	950e      	str	r5, [sp, #56]	; 0x38
 800afc6:	44c8      	add	r8, r9
 800afc8:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800afcc:	46a9      	mov	r9, r5
 800afce:	e7c0      	b.n	800af52 <GUI_MEMDEV__WriteToActiveOpaque+0xd06>
 800afd0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800afd4:	e777      	b.n	800aec6 <GUI_MEMDEV__WriteToActiveOpaque+0xc7a>
 800afd6:	f7fc f89f 	bl	8007118 <GUI_ALLOC_LockH>
 800afda:	901c      	str	r0, [sp, #112]	; 0x70
 800afdc:	2800      	cmp	r0, #0
 800afde:	f43f aa59 	beq.w	800a494 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800afe2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800afe4:	07f2      	lsls	r2, r6, #31
 800afe6:	ea4f 074a 	mov.w	r7, sl, lsl #1
 800afea:	d576      	bpl.n	800b0da <GUI_MEMDEV__WriteToActiveOpaque+0xe8e>
 800afec:	462e      	mov	r6, r5
 800afee:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800aff2:	f1b9 0f02 	cmp.w	r9, #2
 800aff6:	d03d      	beq.n	800b074 <GUI_MEMDEV__WriteToActiveOpaque+0xe28>
 800aff8:	f1b9 0f04 	cmp.w	r9, #4
 800affc:	d04b      	beq.n	800b096 <GUI_MEMDEV__WriteToActiveOpaque+0xe4a>
 800affe:	f1b9 0f01 	cmp.w	r9, #1
 800b002:	d048      	beq.n	800b096 <GUI_MEMDEV__WriteToActiveOpaque+0xe4a>
 800b004:	2100      	movs	r1, #0
 800b006:	2301      	movs	r3, #1
 800b008:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b00a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b00c:	9103      	str	r1, [sp, #12]
 800b00e:	9105      	str	r1, [sp, #20]
 800b010:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	2301      	movs	r3, #1
 800b018:	18cd      	adds	r5, r1, r3
 800b01a:	9002      	str	r0, [sp, #8]
 800b01c:	9204      	str	r2, [sp, #16]
 800b01e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b020:	950e      	str	r5, [sp, #56]	; 0x38
 800b022:	4652      	mov	r2, sl
 800b024:	f7fe fb26 	bl	8009674 <LCD_DrawBitmap>
 800b028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02a:	1e5d      	subs	r5, r3, #1
 800b02c:	950a      	str	r5, [sp, #40]	; 0x28
 800b02e:	d04a      	beq.n	800b0c6 <GUI_MEMDEV__WriteToActiveOpaque+0xe7a>
 800b030:	f1b9 0f02 	cmp.w	r9, #2
 800b034:	d074      	beq.n	800b120 <GUI_MEMDEV__WriteToActiveOpaque+0xed4>
 800b036:	f1b9 0f04 	cmp.w	r9, #4
 800b03a:	d033      	beq.n	800b0a4 <GUI_MEMDEV__WriteToActiveOpaque+0xe58>
 800b03c:	f1b9 0f01 	cmp.w	r9, #1
 800b040:	d030      	beq.n	800b0a4 <GUI_MEMDEV__WriteToActiveOpaque+0xe58>
 800b042:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b046:	9102      	str	r1, [sp, #8]
 800b048:	2001      	movs	r0, #1
 800b04a:	2200      	movs	r2, #0
 800b04c:	9000      	str	r0, [sp, #0]
 800b04e:	9001      	str	r0, [sp, #4]
 800b050:	9203      	str	r2, [sp, #12]
 800b052:	9304      	str	r3, [sp, #16]
 800b054:	9205      	str	r2, [sp, #20]
 800b056:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b058:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b05a:	4652      	mov	r2, sl
 800b05c:	2301      	movs	r3, #1
 800b05e:	f7fe fb09 	bl	8009674 <LCD_DrawBitmap>
 800b062:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b064:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b066:	1e68      	subs	r0, r5, #1
 800b068:	1c4a      	adds	r2, r1, #1
 800b06a:	f1b9 0f02 	cmp.w	r9, #2
 800b06e:	900a      	str	r0, [sp, #40]	; 0x28
 800b070:	920e      	str	r2, [sp, #56]	; 0x38
 800b072:	d1c1      	bne.n	800aff8 <GUI_MEMDEV__WriteToActiveOpaque+0xdac>
 800b074:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800b078:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b07a:	4630      	mov	r0, r6
 800b07c:	4652      	mov	r2, sl
 800b07e:	464b      	mov	r3, r9
 800b080:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800b084:	47a8      	blx	r5
 800b086:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b088:	6925      	ldr	r5, [r4, #16]
 800b08a:	4659      	mov	r1, fp
 800b08c:	4652      	mov	r2, sl
 800b08e:	464b      	mov	r3, r9
 800b090:	47a8      	blx	r5
 800b092:	19f6      	adds	r6, r6, r7
 800b094:	e7b6      	b.n	800b004 <GUI_MEMDEV__WriteToActiveOpaque+0xdb8>
 800b096:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800b09a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b09c:	4630      	mov	r0, r6
 800b09e:	4652      	mov	r2, sl
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e7ed      	b.n	800b080 <GUI_MEMDEV__WriteToActiveOpaque+0xe34>
 800b0a4:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800b0a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	4652      	mov	r2, sl
 800b0ae:	2302      	movs	r3, #2
 800b0b0:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800b0b4:	47a8      	blx	r5
 800b0b6:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b0b8:	6925      	ldr	r5, [r4, #16]
 800b0ba:	4659      	mov	r1, fp
 800b0bc:	4652      	mov	r2, sl
 800b0be:	464b      	mov	r3, r9
 800b0c0:	47a8      	blx	r5
 800b0c2:	19f6      	adds	r6, r6, r7
 800b0c4:	e7bd      	b.n	800b042 <GUI_MEMDEV__WriteToActiveOpaque+0xdf6>
 800b0c6:	a81c      	add	r0, sp, #112	; 0x70
 800b0c8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800b0cc:	f7fc f836 	bl	800713c <GUI_ALLOC_UnlockH>
 800b0d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b0d2:	f7fc f867 	bl	80071a4 <GUI_ALLOC_Free>
 800b0d6:	f7ff b9dd 	b.w	800a494 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800b0da:	f1b9 0f02 	cmp.w	r9, #2
 800b0de:	d03a      	beq.n	800b156 <GUI_MEMDEV__WriteToActiveOpaque+0xf0a>
 800b0e0:	f1b9 0f04 	cmp.w	r9, #4
 800b0e4:	d023      	beq.n	800b12e <GUI_MEMDEV__WriteToActiveOpaque+0xee2>
 800b0e6:	f1b9 0f01 	cmp.w	r9, #1
 800b0ea:	d020      	beq.n	800b12e <GUI_MEMDEV__WriteToActiveOpaque+0xee2>
 800b0ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b0ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b0f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0f2:	9002      	str	r0, [sp, #8]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	188e      	adds	r6, r1, r2
 800b0f8:	9200      	str	r2, [sp, #0]
 800b0fa:	9201      	str	r2, [sp, #4]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	2200      	movs	r2, #0
 800b100:	9203      	str	r2, [sp, #12]
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	9005      	str	r0, [sp, #20]
 800b106:	4652      	mov	r2, sl
 800b108:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b10a:	2301      	movs	r3, #1
 800b10c:	f7fe fab2 	bl	8009674 <LCD_DrawBitmap>
 800b110:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b112:	960e      	str	r6, [sp, #56]	; 0x38
 800b114:	1e4a      	subs	r2, r1, #1
 800b116:	920a      	str	r2, [sp, #40]	; 0x28
 800b118:	462e      	mov	r6, r5
 800b11a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b11e:	e768      	b.n	800aff2 <GUI_MEMDEV__WriteToActiveOpaque+0xda6>
 800b120:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800b124:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b126:	4630      	mov	r0, r6
 800b128:	4652      	mov	r2, sl
 800b12a:	464b      	mov	r3, r9
 800b12c:	e7c0      	b.n	800b0b0 <GUI_MEMDEV__WriteToActiveOpaque+0xe64>
 800b12e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b130:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b132:	930d      	str	r3, [sp, #52]	; 0x34
 800b134:	4628      	mov	r0, r5
 800b136:	4652      	mov	r2, sl
 800b138:	2302      	movs	r3, #2
 800b13a:	f8d8 6014 	ldr.w	r6, [r8, #20]
 800b13e:	47b0      	blx	r6
 800b140:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b142:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b144:	6926      	ldr	r6, [r4, #16]
 800b146:	4652      	mov	r2, sl
 800b148:	464b      	mov	r3, r9
 800b14a:	47b0      	blx	r6
 800b14c:	19ed      	adds	r5, r5, r7
 800b14e:	e7cd      	b.n	800b0ec <GUI_MEMDEV__WriteToActiveOpaque+0xea0>
 800b150:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b154:	e593      	b.n	800ac7e <GUI_MEMDEV__WriteToActiveOpaque+0xa32>
 800b156:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b158:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b15a:	900d      	str	r0, [sp, #52]	; 0x34
 800b15c:	4652      	mov	r2, sl
 800b15e:	4628      	mov	r0, r5
 800b160:	2302      	movs	r3, #2
 800b162:	f8d8 6014 	ldr.w	r6, [r8, #20]
 800b166:	47b0      	blx	r6
 800b168:	981c      	ldr	r0, [sp, #112]	; 0x70
 800b16a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b16c:	6926      	ldr	r6, [r4, #16]
 800b16e:	4652      	mov	r2, sl
 800b170:	2302      	movs	r3, #2
 800b172:	47b0      	blx	r6
 800b174:	19ed      	adds	r5, r5, r7
 800b176:	e7b9      	b.n	800b0ec <GUI_MEMDEV__WriteToActiveOpaque+0xea0>

0800b178 <GUI_USAGE_AddRect>:
 800b178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b17c:	9f08      	ldr	r7, [sp, #32]
 800b17e:	6886      	ldr	r6, [r0, #8]
 800b180:	3f01      	subs	r7, #1
 800b182:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b186:	463e      	mov	r6, r7
 800b188:	4604      	mov	r4, r0
 800b18a:	1c55      	adds	r5, r2, #1
 800b18c:	4689      	mov	r9, r1
 800b18e:	4698      	mov	r8, r3
 800b190:	f007 0701 	and.w	r7, r7, #1
 800b194:	47e0      	blx	ip
 800b196:	b306      	cbz	r6, 800b1da <GUI_USAGE_AddRect+0x62>
 800b198:	b157      	cbz	r7, 800b1b0 <GUI_USAGE_AddRect+0x38>
 800b19a:	68a3      	ldr	r3, [r4, #8]
 800b19c:	1c6f      	adds	r7, r5, #1
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	685d      	ldr	r5, [r3, #4]
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	4643      	mov	r3, r8
 800b1a8:	47a8      	blx	r5
 800b1aa:	3e01      	subs	r6, #1
 800b1ac:	463d      	mov	r5, r7
 800b1ae:	d016      	beq.n	800b1de <GUI_USAGE_AddRect+0x66>
 800b1b0:	68a7      	ldr	r7, [r4, #8]
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	4643      	mov	r3, r8
 800b1ba:	687f      	ldr	r7, [r7, #4]
 800b1bc:	47b8      	blx	r7
 800b1be:	68a1      	ldr	r1, [r4, #8]
 800b1c0:	3501      	adds	r5, #1
 800b1c2:	684f      	ldr	r7, [r1, #4]
 800b1c4:	462a      	mov	r2, r5
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	4643      	mov	r3, r8
 800b1cc:	3e01      	subs	r6, #1
 800b1ce:	47b8      	blx	r7
 800b1d0:	3501      	adds	r5, #1
 800b1d2:	3e01      	subs	r6, #1
 800b1d4:	d1ec      	bne.n	800b1b0 <GUI_USAGE_AddRect+0x38>
 800b1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1e2:	bf00      	nop

0800b1e4 <GUI_MEMDEV_GetDataPtr>:
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	b148      	cbz	r0, 800b200 <GUI_MEMDEV_GetDataPtr+0x1c>
 800b1ec:	f7fb ff94 	bl	8007118 <GUI_ALLOC_LockH>
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	a802      	add	r0, sp, #8
 800b1f4:	f840 4d04 	str.w	r4, [r0, #-4]!
 800b1f8:	f7fb ffa0 	bl	800713c <GUI_ALLOC_UnlockH>
 800b1fc:	f104 0018 	add.w	r0, r4, #24
 800b200:	b002      	add	sp, #8
 800b202:	bd10      	pop	{r4, pc}

0800b204 <GUI_MEMDEV_GetBitsPerPixel>:
 800b204:	b530      	push	{r4, r5, lr}
 800b206:	4604      	mov	r4, r0
 800b208:	b083      	sub	sp, #12
 800b20a:	b170      	cbz	r0, 800b22a <GUI_MEMDEV_GetBitsPerPixel+0x26>
 800b20c:	f7fb ff84 	bl	8007118 <GUI_ALLOC_LockH>
 800b210:	ad02      	add	r5, sp, #8
 800b212:	6803      	ldr	r3, [r0, #0]
 800b214:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b218:	6918      	ldr	r0, [r3, #16]
 800b21a:	6881      	ldr	r1, [r0, #8]
 800b21c:	4788      	blx	r1
 800b21e:	f000 f881 	bl	800b324 <LCD__GetBPPDevice>
 800b222:	4604      	mov	r4, r0
 800b224:	4628      	mov	r0, r5
 800b226:	f7fb ff89 	bl	800713c <GUI_ALLOC_UnlockH>
 800b22a:	4620      	mov	r0, r4
 800b22c:	b003      	add	sp, #12
 800b22e:	bd30      	pop	{r4, r5, pc}

0800b230 <LCD_UpdateColorIndices>:
 800b230:	b510      	push	{r4, lr}
 800b232:	f64c 0408 	movw	r4, #51208	; 0xc808
 800b236:	f6c1 74ff 	movt	r4, #8191	; 0x1fff
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b23e:	f7fe fd81 	bl	8009d44 <LCD_Color2Index>
 800b242:	f7fe fda3 	bl	8009d8c <LCD_SetColorIndex>
 800b246:	6820      	ldr	r0, [r4, #0]
 800b248:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b24a:	f7fe fd7b 	bl	8009d44 <LCD_Color2Index>
 800b24e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b252:	f7fe bdab 	b.w	8009dac <LCD_SetBkColorIndex>
 800b256:	bf00      	nop

0800b258 <LCD_GetNumLayers>:
 800b258:	b508      	push	{r3, lr}
 800b25a:	2000      	movs	r0, #0
 800b25c:	f7fa fb46 	bl	80058ec <GUI_DEVICE__GetpDriver>
 800b260:	3000      	adds	r0, #0
 800b262:	bf18      	it	ne
 800b264:	2001      	movne	r0, #1
 800b266:	bd08      	pop	{r3, pc}

0800b268 <LCD_GetBitsPerPixelEx>:
 800b268:	2800      	cmp	r0, #0
 800b26a:	b508      	push	{r3, lr}
 800b26c:	dd01      	ble.n	800b272 <LCD_GetBitsPerPixelEx+0xa>
 800b26e:	2000      	movs	r0, #0
 800b270:	bd08      	pop	{r3, pc}
 800b272:	f7fa fb3b 	bl	80058ec <GUI_DEVICE__GetpDriver>
 800b276:	b120      	cbz	r0, 800b282 <LCD_GetBitsPerPixelEx+0x1a>
 800b278:	68c2      	ldr	r2, [r0, #12]
 800b27a:	2108      	movs	r1, #8
 800b27c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b27e:	4798      	blx	r3
 800b280:	bd08      	pop	{r3, pc}
 800b282:	bd08      	pop	{r3, pc}

0800b284 <LCD_GetNumColorsEx>:
 800b284:	2800      	cmp	r0, #0
 800b286:	b508      	push	{r3, lr}
 800b288:	dd01      	ble.n	800b28e <LCD_GetNumColorsEx+0xa>
 800b28a:	2000      	movs	r0, #0
 800b28c:	bd08      	pop	{r3, pc}
 800b28e:	f7fa fb2d 	bl	80058ec <GUI_DEVICE__GetpDriver>
 800b292:	b120      	cbz	r0, 800b29e <LCD_GetNumColorsEx+0x1a>
 800b294:	68c2      	ldr	r2, [r0, #12]
 800b296:	2109      	movs	r1, #9
 800b298:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b29a:	4798      	blx	r3
 800b29c:	bd08      	pop	{r3, pc}
 800b29e:	bd08      	pop	{r3, pc}

0800b2a0 <LCD_GetNumColors>:
 800b2a0:	b508      	push	{r3, lr}
 800b2a2:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <LCD_GetNumColors+0x20>)
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	7c40      	ldrb	r0, [r0, #17]
 800b2a8:	b108      	cbz	r0, 800b2ae <LCD_GetNumColors+0xe>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	bd08      	pop	{r3, pc}
 800b2ae:	f7fa fb1d 	bl	80058ec <GUI_DEVICE__GetpDriver>
 800b2b2:	b120      	cbz	r0, 800b2be <LCD_GetNumColors+0x1e>
 800b2b4:	68c2      	ldr	r2, [r0, #12]
 800b2b6:	2109      	movs	r1, #9
 800b2b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b2ba:	4798      	blx	r3
 800b2bc:	bd08      	pop	{r3, pc}
 800b2be:	bd08      	pop	{r3, pc}
 800b2c0:	1fffc808 	.word	0x1fffc808

0800b2c4 <GUI_GetBitsPerPixelEx>:
 800b2c4:	b508      	push	{r3, lr}
 800b2c6:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
 800b2ca:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b2ce:	2108      	movs	r1, #8
 800b2d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b2d4:	68c2      	ldr	r2, [r0, #12]
 800b2d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800b2d8:	4798      	blx	r3
 800b2da:	bd08      	pop	{r3, pc}

0800b2dc <LCD_GetPalette>:
 800b2dc:	b508      	push	{r3, lr}
 800b2de:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <LCD_GetPalette+0x1c>)
 800b2e0:	6818      	ldr	r0, [r3, #0]
 800b2e2:	7c40      	ldrb	r0, [r0, #17]
 800b2e4:	f7fa fb02 	bl	80058ec <GUI_DEVICE__GetpDriver>
 800b2e8:	b120      	cbz	r0, 800b2f4 <LCD_GetPalette+0x18>
 800b2ea:	68c2      	ldr	r2, [r0, #12]
 800b2ec:	2102      	movs	r1, #2
 800b2ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b2f0:	4798      	blx	r3
 800b2f2:	bd08      	pop	{r3, pc}
 800b2f4:	bd08      	pop	{r3, pc}
 800b2f6:	bf00      	nop
 800b2f8:	1fffc808 	.word	0x1fffc808

0800b2fc <GUI_GetpfIndex2ColorEx>:
 800b2fc:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
 800b300:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b304:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b308:	6901      	ldr	r1, [r0, #16]
 800b30a:	6848      	ldr	r0, [r1, #4]
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop

0800b310 <GUI_GetpfColor2IndexEx>:
 800b310:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
 800b314:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b318:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b31c:	6901      	ldr	r1, [r0, #16]
 800b31e:	6808      	ldr	r0, [r1, #0]
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop

0800b324 <LCD__GetBPPDevice>:
 800b324:	b1c8      	cbz	r0, 800b35a <LCD__GetBPPDevice+0x36>
 800b326:	f030 0301 	bics.w	r3, r0, #1
 800b32a:	d017      	beq.n	800b35c <LCD__GetBPPDevice+0x38>
 800b32c:	f030 0303 	bics.w	r3, r0, #3
 800b330:	d101      	bne.n	800b336 <LCD__GetBPPDevice+0x12>
 800b332:	2008      	movs	r0, #8
 800b334:	4770      	bx	lr
 800b336:	f030 0307 	bics.w	r3, r0, #7
 800b33a:	d0fa      	beq.n	800b332 <LCD__GetBPPDevice+0xe>
 800b33c:	f030 030f 	bics.w	r3, r0, #15
 800b340:	d0f7      	beq.n	800b332 <LCD__GetBPPDevice+0xe>
 800b342:	f030 031f 	bics.w	r3, r0, #31
 800b346:	d0f4      	beq.n	800b332 <LCD__GetBPPDevice+0xe>
 800b348:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800b34c:	d0f1      	beq.n	800b332 <LCD__GetBPPDevice+0xe>
 800b34e:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800b352:	f023 0101 	bic.w	r1, r3, #1
 800b356:	b919      	cbnz	r1, 800b360 <LCD__GetBPPDevice+0x3c>
 800b358:	2010      	movs	r0, #16
 800b35a:	4770      	bx	lr
 800b35c:	2001      	movs	r0, #1
 800b35e:	4770      	bx	lr
 800b360:	f420 627f 	bic.w	r2, r0, #4080	; 0xff0
 800b364:	f022 030f 	bic.w	r3, r2, #15
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0f5      	beq.n	800b358 <LCD__GetBPPDevice+0x34>
 800b36c:	f420 41ff 	bic.w	r1, r0, #32640	; 0x7f80
 800b370:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 800b374:	2a00      	cmp	r2, #0
 800b376:	d0ef      	beq.n	800b358 <LCD__GetBPPDevice+0x34>
 800b378:	0c00      	lsrs	r0, r0, #16
 800b37a:	0403      	lsls	r3, r0, #16
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	bf0c      	ite	eq
 800b380:	2010      	moveq	r0, #16
 800b382:	2020      	movne	r0, #32
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop

0800b388 <LCD_GetBkColorIndex>:
 800b388:	f64c 0308 	movw	r3, #51208	; 0xc808
 800b38c:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b394:	6808      	ldr	r0, [r1, #0]
 800b396:	4770      	bx	lr

0800b398 <LCD_GetColorIndex>:
 800b398:	f64c 0308 	movw	r3, #51208	; 0xc808
 800b39c:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800b3a4:	6808      	ldr	r0, [r1, #0]
 800b3a6:	4770      	bx	lr

0800b3a8 <GUI__CompactPixelIndices>:
 800b3a8:	2a08      	cmp	r2, #8
 800b3aa:	b470      	push	{r4, r5, r6}
 800b3ac:	dd21      	ble.n	800b3f2 <GUI__CompactPixelIndices+0x4a>
 800b3ae:	2a10      	cmp	r2, #16
 800b3b0:	dc44      	bgt.n	800b43c <GUI__CompactPixelIndices+0x94>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	6804      	ldr	r4, [r0, #0]
 800b3b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800b3ba:	f823 4b02 	strh.w	r4, [r3], #2
 800b3be:	4602      	mov	r2, r0
 800b3c0:	1a08      	subs	r0, r1, r0
 800b3c2:	3802      	subs	r0, #2
 800b3c4:	428b      	cmp	r3, r1
 800b3c6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800b3ca:	d010      	beq.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b3cc:	b128      	cbz	r0, 800b3da <GUI__CompactPixelIndices+0x32>
 800b3ce:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b3d2:	f823 0b02 	strh.w	r0, [r3], #2
 800b3d6:	428b      	cmp	r3, r1
 800b3d8:	d009      	beq.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b3da:	6855      	ldr	r5, [r2, #4]
 800b3dc:	6894      	ldr	r4, [r2, #8]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3208      	adds	r2, #8
 800b3e2:	f820 5b02 	strh.w	r5, [r0], #2
 800b3e6:	805c      	strh	r4, [r3, #2]
 800b3e8:	1c83      	adds	r3, r0, #2
 800b3ea:	428b      	cmp	r3, r1
 800b3ec:	d1f5      	bne.n	800b3da <GUI__CompactPixelIndices+0x32>
 800b3ee:	2001      	movs	r0, #1
 800b3f0:	e025      	b.n	800b43e <GUI__CompactPixelIndices+0x96>
 800b3f2:	2a02      	cmp	r2, #2
 800b3f4:	d025      	beq.n	800b442 <GUI__CompactPixelIndices+0x9a>
 800b3f6:	2a04      	cmp	r2, #4
 800b3f8:	f000 80ca 	beq.w	800b590 <GUI__CompactPixelIndices+0x1e8>
 800b3fc:	2a01      	cmp	r2, #1
 800b3fe:	d079      	beq.n	800b4f4 <GUI__CompactPixelIndices+0x14c>
 800b400:	4603      	mov	r3, r0
 800b402:	6804      	ldr	r4, [r0, #0]
 800b404:	f803 4b01 	strb.w	r4, [r3], #1
 800b408:	1841      	adds	r1, r0, r1
 800b40a:	4602      	mov	r2, r0
 800b40c:	43c0      	mvns	r0, r0
 800b40e:	1808      	adds	r0, r1, r0
 800b410:	428b      	cmp	r3, r1
 800b412:	f000 0001 	and.w	r0, r0, #1
 800b416:	d0ea      	beq.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b418:	b128      	cbz	r0, 800b426 <GUI__CompactPixelIndices+0x7e>
 800b41a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b41e:	f803 0b01 	strb.w	r0, [r3], #1
 800b422:	428b      	cmp	r3, r1
 800b424:	d0e3      	beq.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b426:	6854      	ldr	r4, [r2, #4]
 800b428:	4618      	mov	r0, r3
 800b42a:	f800 4b01 	strb.w	r4, [r0], #1
 800b42e:	6894      	ldr	r4, [r2, #8]
 800b430:	705c      	strb	r4, [r3, #1]
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	3208      	adds	r2, #8
 800b436:	428b      	cmp	r3, r1
 800b438:	d1f5      	bne.n	800b426 <GUI__CompactPixelIndices+0x7e>
 800b43a:	e7d8      	b.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b43c:	2000      	movs	r0, #0
 800b43e:	bc70      	pop	{r4, r5, r6}
 800b440:	4770      	bx	lr
 800b442:	1e4b      	subs	r3, r1, #1
 800b444:	075c      	lsls	r4, r3, #29
 800b446:	4602      	mov	r2, r0
 800b448:	d51b      	bpl.n	800b482 <GUI__CompactPixelIndices+0xda>
 800b44a:	e890 0018 	ldmia.w	r0, {r3, r4}
 800b44e:	019b      	lsls	r3, r3, #6
 800b450:	b2db      	uxtb	r3, r3
 800b452:	f004 0403 	and.w	r4, r4, #3
 800b456:	2902      	cmp	r1, #2
 800b458:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b45c:	f000 8095 	beq.w	800b58a <GUI__CompactPixelIndices+0x1e2>
 800b460:	6884      	ldr	r4, [r0, #8]
 800b462:	2903      	cmp	r1, #3
 800b464:	f004 0403 	and.w	r4, r4, #3
 800b468:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 800b46c:	f000 808d 	beq.w	800b58a <GUI__CompactPixelIndices+0x1e2>
 800b470:	68c4      	ldr	r4, [r0, #12]
 800b472:	f004 0403 	and.w	r4, r4, #3
 800b476:	4323      	orrs	r3, r4
 800b478:	3010      	adds	r0, #16
 800b47a:	3904      	subs	r1, #4
 800b47c:	f802 3b01 	strb.w	r3, [r2], #1
 800b480:	d0b5      	beq.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b482:	6803      	ldr	r3, [r0, #0]
 800b484:	019c      	lsls	r4, r3, #6
 800b486:	2901      	cmp	r1, #1
 800b488:	b2e3      	uxtb	r3, r4
 800b48a:	f100 0410 	add.w	r4, r0, #16
 800b48e:	d07c      	beq.n	800b58a <GUI__CompactPixelIndices+0x1e2>
 800b490:	6845      	ldr	r5, [r0, #4]
 800b492:	2902      	cmp	r1, #2
 800b494:	f005 0503 	and.w	r5, r5, #3
 800b498:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800b49c:	d075      	beq.n	800b58a <GUI__CompactPixelIndices+0x1e2>
 800b49e:	6885      	ldr	r5, [r0, #8]
 800b4a0:	2903      	cmp	r1, #3
 800b4a2:	f005 0503 	and.w	r5, r5, #3
 800b4a6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 800b4aa:	d06e      	beq.n	800b58a <GUI__CompactPixelIndices+0x1e2>
 800b4ac:	68c5      	ldr	r5, [r0, #12]
 800b4ae:	f005 0503 	and.w	r5, r5, #3
 800b4b2:	432b      	orrs	r3, r5
 800b4b4:	3904      	subs	r1, #4
 800b4b6:	f802 3b01 	strb.w	r3, [r2], #1
 800b4ba:	d098      	beq.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b4bc:	6903      	ldr	r3, [r0, #16]
 800b4be:	6860      	ldr	r0, [r4, #4]
 800b4c0:	019b      	lsls	r3, r3, #6
 800b4c2:	f000 0003 	and.w	r0, r0, #3
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	2902      	cmp	r1, #2
 800b4ca:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800b4ce:	f104 0010 	add.w	r0, r4, #16
 800b4d2:	d05a      	beq.n	800b58a <GUI__CompactPixelIndices+0x1e2>
 800b4d4:	68a5      	ldr	r5, [r4, #8]
 800b4d6:	2903      	cmp	r1, #3
 800b4d8:	f005 0503 	and.w	r5, r5, #3
 800b4dc:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 800b4e0:	d053      	beq.n	800b58a <GUI__CompactPixelIndices+0x1e2>
 800b4e2:	68e4      	ldr	r4, [r4, #12]
 800b4e4:	f004 0403 	and.w	r4, r4, #3
 800b4e8:	4323      	orrs	r3, r4
 800b4ea:	3904      	subs	r1, #4
 800b4ec:	f802 3b01 	strb.w	r3, [r2], #1
 800b4f0:	d1c7      	bne.n	800b482 <GUI__CompactPixelIndices+0xda>
 800b4f2:	e77c      	b.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b4f4:	6802      	ldr	r2, [r0, #0]
 800b4f6:	01d3      	lsls	r3, r2, #7
 800b4f8:	2901      	cmp	r1, #1
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	d042      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b4fe:	6842      	ldr	r2, [r0, #4]
 800b500:	3902      	subs	r1, #2
 800b502:	f002 0201 	and.w	r2, r2, #1
 800b506:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800b50a:	f100 0208 	add.w	r2, r0, #8
 800b50e:	d039      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b510:	4604      	mov	r4, r0
 800b512:	6815      	ldr	r5, [r2, #0]
 800b514:	2901      	cmp	r1, #1
 800b516:	f005 0501 	and.w	r5, r5, #1
 800b51a:	4620      	mov	r0, r4
 800b51c:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800b520:	d030      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b522:	6855      	ldr	r5, [r2, #4]
 800b524:	f005 0501 	and.w	r5, r5, #1
 800b528:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800b52c:	2902      	cmp	r1, #2
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	d028      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b532:	6895      	ldr	r5, [r2, #8]
 800b534:	2903      	cmp	r1, #3
 800b536:	f005 0501 	and.w	r5, r5, #1
 800b53a:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 800b53e:	d021      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b540:	68d5      	ldr	r5, [r2, #12]
 800b542:	2904      	cmp	r1, #4
 800b544:	f005 0501 	and.w	r5, r5, #1
 800b548:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 800b54c:	d01a      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b54e:	6915      	ldr	r5, [r2, #16]
 800b550:	2905      	cmp	r1, #5
 800b552:	f005 0501 	and.w	r5, r5, #1
 800b556:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800b55a:	d013      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b55c:	6950      	ldr	r0, [r2, #20]
 800b55e:	f000 0001 	and.w	r0, r0, #1
 800b562:	4303      	orrs	r3, r0
 800b564:	f804 3b01 	strb.w	r3, [r4], #1
 800b568:	6993      	ldr	r3, [r2, #24]
 800b56a:	01d8      	lsls	r0, r3, #7
 800b56c:	2906      	cmp	r1, #6
 800b56e:	b2c3      	uxtb	r3, r0
 800b570:	4620      	mov	r0, r4
 800b572:	d007      	beq.n	800b584 <GUI__CompactPixelIndices+0x1dc>
 800b574:	69d5      	ldr	r5, [r2, #28]
 800b576:	3220      	adds	r2, #32
 800b578:	f005 0501 	and.w	r5, r5, #1
 800b57c:	3907      	subs	r1, #7
 800b57e:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800b582:	d1c6      	bne.n	800b512 <GUI__CompactPixelIndices+0x16a>
 800b584:	7003      	strb	r3, [r0, #0]
 800b586:	2001      	movs	r0, #1
 800b588:	e759      	b.n	800b43e <GUI__CompactPixelIndices+0x96>
 800b58a:	7013      	strb	r3, [r2, #0]
 800b58c:	2001      	movs	r0, #1
 800b58e:	e756      	b.n	800b43e <GUI__CompactPixelIndices+0x96>
 800b590:	1e4c      	subs	r4, r1, #1
 800b592:	07a2      	lsls	r2, r4, #30
 800b594:	f100 0308 	add.w	r3, r0, #8
 800b598:	d50b      	bpl.n	800b5b2 <GUI__CompactPixelIndices+0x20a>
 800b59a:	e913 0014 	ldmdb	r3, {r2, r4}
 800b59e:	f004 040f 	and.w	r4, r4, #15
 800b5a2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
 800b5a6:	3308      	adds	r3, #8
 800b5a8:	3902      	subs	r1, #2
 800b5aa:	f800 2b01 	strb.w	r2, [r0], #1
 800b5ae:	f43f af1e 	beq.w	800b3ee <GUI__CompactPixelIndices+0x46>
 800b5b2:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800b5b6:	012c      	lsls	r4, r5, #4
 800b5b8:	2901      	cmp	r1, #1
 800b5ba:	b2e5      	uxtb	r5, r4
 800b5bc:	4602      	mov	r2, r0
 800b5be:	f103 0408 	add.w	r4, r3, #8
 800b5c2:	d016      	beq.n	800b5f2 <GUI__CompactPixelIndices+0x24a>
 800b5c4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b5c8:	f003 030f 	and.w	r3, r3, #15
 800b5cc:	431d      	orrs	r5, r3
 800b5ce:	3902      	subs	r1, #2
 800b5d0:	f802 5b01 	strb.w	r5, [r2], #1
 800b5d4:	f104 0308 	add.w	r3, r4, #8
 800b5d8:	f43f af09 	beq.w	800b3ee <GUI__CompactPixelIndices+0x46>
 800b5dc:	e914 0060 	ldmdb	r4, {r5, r6}
 800b5e0:	f006 040f 	and.w	r4, r6, #15
 800b5e4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800b5e8:	7044      	strb	r4, [r0, #1]
 800b5ea:	1c50      	adds	r0, r2, #1
 800b5ec:	3902      	subs	r1, #2
 800b5ee:	d1e0      	bne.n	800b5b2 <GUI__CompactPixelIndices+0x20a>
 800b5f0:	e6fd      	b.n	800b3ee <GUI__CompactPixelIndices+0x46>
 800b5f2:	7005      	strb	r5, [r0, #0]
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	e722      	b.n	800b43e <GUI__CompactPixelIndices+0x96>

0800b5f8 <GUI_SelectLCD>:
 800b5f8:	b508      	push	{r3, lr}
 800b5fa:	f000 f82f 	bl	800b65c <LCD_SelectLCD>
 800b5fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b602:	f7ff be15 	b.w	800b230 <LCD_UpdateColorIndices>
 800b606:	bf00      	nop

0800b608 <GUI_CalcColorDist>:
 800b608:	b2c2      	uxtb	r2, r0
 800b60a:	b2cb      	uxtb	r3, r1
 800b60c:	b410      	push	{r4}
 800b60e:	1ad4      	subs	r4, r2, r3
 800b610:	b2a3      	uxth	r3, r4
 800b612:	b29a      	uxth	r2, r3
 800b614:	0414      	lsls	r4, r2, #16
 800b616:	d41d      	bmi.n	800b654 <GUI_CalcColorDist+0x4c>
 800b618:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b61c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800b620:	1ae4      	subs	r4, r4, r3
 800b622:	b2a4      	uxth	r4, r4
 800b624:	b2a3      	uxth	r3, r4
 800b626:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b62a:	fb02 f202 	mul.w	r2, r2, r2
 800b62e:	d10e      	bne.n	800b64e <GUI_CalcColorDist+0x46>
 800b630:	0c09      	lsrs	r1, r1, #16
 800b632:	ebc1 4010 	rsb	r0, r1, r0, lsr #16
 800b636:	b281      	uxth	r1, r0
 800b638:	b288      	uxth	r0, r1
 800b63a:	fb03 2303 	mla	r3, r3, r3, r2
 800b63e:	0402      	lsls	r2, r0, #16
 800b640:	d501      	bpl.n	800b646 <GUI_CalcColorDist+0x3e>
 800b642:	424a      	negs	r2, r1
 800b644:	b290      	uxth	r0, r2
 800b646:	fb00 3000 	mla	r0, r0, r0, r3
 800b64a:	bc10      	pop	{r4}
 800b64c:	4770      	bx	lr
 800b64e:	4263      	negs	r3, r4
 800b650:	b29b      	uxth	r3, r3
 800b652:	e7ed      	b.n	800b630 <GUI_CalcColorDist+0x28>
 800b654:	425a      	negs	r2, r3
 800b656:	b292      	uxth	r2, r2
 800b658:	e7de      	b.n	800b618 <GUI_CalcColorDist+0x10>
 800b65a:	bf00      	nop

0800b65c <LCD_SelectLCD>:
 800b65c:	b510      	push	{r4, lr}
 800b65e:	4c0d      	ldr	r4, [pc, #52]	; (800b694 <LCD_SelectLCD+0x38>)
 800b660:	4b0d      	ldr	r3, [pc, #52]	; (800b698 <LCD_SelectLCD+0x3c>)
 800b662:	6822      	ldr	r2, [r4, #0]
 800b664:	7c51      	ldrb	r1, [r2, #17]
 800b666:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800b66a:	b910      	cbnz	r0, 800b672 <LCD_SelectLCD+0x16>
 800b66c:	e008      	b.n	800b680 <LCD_SelectLCD+0x24>
 800b66e:	6800      	ldr	r0, [r0, #0]
 800b670:	b130      	cbz	r0, 800b680 <LCD_SelectLCD+0x24>
 800b672:	68c1      	ldr	r1, [r0, #12]
 800b674:	680b      	ldr	r3, [r1, #0]
 800b676:	2b04      	cmp	r3, #4
 800b678:	d1f9      	bne.n	800b66e <LCD_SelectLCD+0x12>
 800b67a:	f7fa f94d 	bl	8005918 <GUI_DEVICE_Unlink>
 800b67e:	6822      	ldr	r2, [r4, #0]
 800b680:	f102 0008 	add.w	r0, r2, #8
 800b684:	2100      	movs	r1, #0
 800b686:	6491      	str	r1, [r2, #72]	; 0x48
 800b688:	6150      	str	r0, [r2, #20]
 800b68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68e:	f7fe badb 	b.w	8009c48 <LCD_SetClipRectMax>
 800b692:	bf00      	nop
 800b694:	1fffc808 	.word	0x1fffc808
 800b698:	1fffdaf0 	.word	0x1fffdaf0

0800b69c <__libc_init_array>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	4b0e      	ldr	r3, [pc, #56]	; (800b6d8 <__libc_init_array+0x3c>)
 800b6a0:	4c0e      	ldr	r4, [pc, #56]	; (800b6dc <__libc_init_array+0x40>)
 800b6a2:	1ae4      	subs	r4, r4, r3
 800b6a4:	10a4      	asrs	r4, r4, #2
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	461e      	mov	r6, r3
 800b6aa:	42a5      	cmp	r5, r4
 800b6ac:	d004      	beq.n	800b6b8 <__libc_init_array+0x1c>
 800b6ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6b2:	4798      	blx	r3
 800b6b4:	3501      	adds	r5, #1
 800b6b6:	e7f8      	b.n	800b6aa <__libc_init_array+0xe>
 800b6b8:	f7f6 f812 	bl	80016e0 <_init>
 800b6bc:	4c08      	ldr	r4, [pc, #32]	; (800b6e0 <__libc_init_array+0x44>)
 800b6be:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <__libc_init_array+0x48>)
 800b6c0:	1ae4      	subs	r4, r4, r3
 800b6c2:	10a4      	asrs	r4, r4, #2
 800b6c4:	2500      	movs	r5, #0
 800b6c6:	461e      	mov	r6, r3
 800b6c8:	42a5      	cmp	r5, r4
 800b6ca:	d004      	beq.n	800b6d6 <__libc_init_array+0x3a>
 800b6cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b6d0:	4798      	blx	r3
 800b6d2:	3501      	adds	r5, #1
 800b6d4:	e7f8      	b.n	800b6c8 <__libc_init_array+0x2c>
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}
 800b6d8:	1fffc8bc 	.word	0x1fffc8bc
 800b6dc:	1fffc8bc 	.word	0x1fffc8bc
 800b6e0:	1fffc8bc 	.word	0x1fffc8bc
 800b6e4:	1fffc8bc 	.word	0x1fffc8bc

0800b6e8 <memcpy>:
 800b6e8:	b510      	push	{r4, lr}
 800b6ea:	1e43      	subs	r3, r0, #1
 800b6ec:	440a      	add	r2, r1
 800b6ee:	4291      	cmp	r1, r2
 800b6f0:	d004      	beq.n	800b6fc <memcpy+0x14>
 800b6f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6fa:	e7f8      	b.n	800b6ee <memcpy+0x6>
 800b6fc:	bd10      	pop	{r4, pc}

0800b6fe <memmove>:
 800b6fe:	4281      	cmp	r1, r0
 800b700:	b510      	push	{r4, lr}
 800b702:	eb01 0302 	add.w	r3, r1, r2
 800b706:	d301      	bcc.n	800b70c <memmove+0xe>
 800b708:	1e42      	subs	r2, r0, #1
 800b70a:	e00b      	b.n	800b724 <memmove+0x26>
 800b70c:	4298      	cmp	r0, r3
 800b70e:	d2fb      	bcs.n	800b708 <memmove+0xa>
 800b710:	1881      	adds	r1, r0, r2
 800b712:	1ad2      	subs	r2, r2, r3
 800b714:	42d3      	cmn	r3, r2
 800b716:	d004      	beq.n	800b722 <memmove+0x24>
 800b718:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b71c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b720:	e7f8      	b.n	800b714 <memmove+0x16>
 800b722:	bd10      	pop	{r4, pc}
 800b724:	4299      	cmp	r1, r3
 800b726:	d004      	beq.n	800b732 <memmove+0x34>
 800b728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b72c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b730:	e7f8      	b.n	800b724 <memmove+0x26>
 800b732:	bd10      	pop	{r4, pc}

0800b734 <memset>:
 800b734:	4402      	add	r2, r0
 800b736:	4603      	mov	r3, r0
 800b738:	4293      	cmp	r3, r2
 800b73a:	d002      	beq.n	800b742 <memset+0xe>
 800b73c:	f803 1b01 	strb.w	r1, [r3], #1
 800b740:	e7fa      	b.n	800b738 <memset+0x4>
 800b742:	4770      	bx	lr

0800b744 <SPI_MASTER_0_MOSI>:
 800b744:	8100 4802 0009 0000                         ...H....

0800b74c <SPI_MASTER_0_MISO>:
 800b74c:	8000 4802 0000 0000                         ...H....

0800b754 <SPI_MASTER_0_SCLKOUT>:
 800b754:	8100 4802 0008 0000                         ...H....

0800b75c <SPI_MASTER_0_SCLKOUT_Config>:
 800b75c:	00a0 0000 0001 0000 0001 0000 0000 0000     ................
 800b76c:	0000 0000                                   ....

0800b770 <SPI_MASTER_0_SS_0>:
 800b770:	8100 4802 0007 0000                         ...H....

0800b778 <SPI_MASTER_0_SS_0_Config>:
 800b778:	00a0 0000 0001 0000 0001 0000 0000 0000     ................
 800b788:	0000 0004                                   ....

0800b78c <SPI_MASTER_0_Config>:
 800b78c:	c860 1fff 2ad5 0800 b744 0800 c84c 1fff     `....*..D...L...
 800b79c:	b74c 0800 c984 1fff 0000 0000 0000 0000     L...............
	...
 800b7b4:	b754 0800 b75c 0800 b770 0800 0000 0000     T...\...p.......
	...
 800b7dc:	b778 0800 0000 0000 0000 0000 0000 0000     x...............
	...
 800b808:	0404 0000 0000 4000 0000 0100 0102 0000     .......@........

0800b818 <INTERRUPT_0>:
 800b818:	3f31 0100                                   1?..

0800b81c <GUI_SEGGERLIBRARY_0_gpio_pin_config>:
 800b81c:	0080 0000 0001 0000 0004 0000               ............

0800b828 <GUI_SEGGERLIBRARY_0_config>:
 800b828:	b81c 0800 8200 4802 0006 0000 0350 0104     .......H....P...
 800b838:	0000 0001 0000 0000 0000 0001 0101 0101     ................
 800b848:	3031 2073 4954 454d 0052 0000 0030 0000     10s TIMER...0...

0800b858 <GUI_Font6x9>:
 800b858:	5ccd 0800 5e29 0800 5e41 0800 5e49 0800     .\..)^..A^..I^..
	...
 800b870:	0908 0101 b8a0 0800 0507 0007               ............

0800b87c <GUI_Font6x8>:
 800b87c:	5ccd 0800 5e29 0800 5e41 0800 5e49 0800     .\..)^..A^..I^..
	...
 800b894:	0808 0101 b8a0 0800 0507 0007               ............

0800b8a0 <GUI_F6x8_Mono>:
 800b8a0:	b8b4 0800 b8b4 0800 bdcc 0800 0020 007e     ............ .~.
 800b8b0:	0606 0001                                   ....

0800b8b4 <GUI_acFont6x8>:
	...
 800b8bc:	2020 2020 0020 0020 4848 0048 0000 0000          . .HHH.....
 800b8cc:	5050 50f8 50f8 0050 7820 70a0 f028 0020     PP.P.PP. x.p(. .
 800b8dc:	c8c0 2010 9840 0018 9060 40a0 90a8 0068     ... @...`..@..h.
 800b8ec:	2060 0040 0000 0000 2010 4040 2040 0010     ` @...... @@@ ..
 800b8fc:	2040 1010 2010 0040 5000 f820 5020 0000     @ ... @..P . P..
 800b90c:	2000 f820 2020 0000 0000 0000 6000 4020     .  .  .......` @
 800b91c:	0000 f800 0000 0000 0000 0000 6000 0060     .............``.
 800b92c:	0800 2010 8040 0000 8870 a898 88c8 0070     ... @...p.....p.
 800b93c:	6020 2020 2020 0070 8870 3008 8040 00f8      `    p.p..0@...
 800b94c:	8870 3008 8808 0070 3010 9050 10f8 0010     p..0..p..0P.....
 800b95c:	80f8 08f0 8808 0070 4030 f080 8888 0070     ......p.0@....p.
 800b96c:	08f8 2010 4040 0040 8870 7088 8888 0070     ... @@@.p..p..p.
 800b97c:	8870 7888 1008 0060 6000 0060 6060 0000     p..x..`..``.``..
 800b98c:	0000 6060 6000 4020 2010 8040 2040 0010     ..``.` @. @.@ ..
 800b99c:	0000 00f8 00f8 0000 4080 1020 4020 0080     .........@ . @..
 800b9ac:	8870 1008 0020 0020 8870 6808 a8a8 0070     p... . .p..h..p.
 800b9bc:	8870 f888 8888 0088 88f0 f088 8888 00f0     p...............
 800b9cc:	8870 8080 8880 0070 90e0 8888 9088 00e0     p.....p.........
 800b9dc:	80f8 f080 8080 00f8 80f8 f080 8080 0080     ................
 800b9ec:	8870 8080 8898 0078 8888 f888 8888 0088     p.....x.........
 800b9fc:	2070 2020 2020 0070 1038 1010 9010 0060     p     p.8.....`.
 800ba0c:	9088 c0a0 90a0 0088 8080 8080 8080 00f8     ................
 800ba1c:	d888 a8a8 8888 0088 8888 a8c8 8898 0088     ................
 800ba2c:	8870 8888 8888 0070 88f0 f088 8080 0080     p.....p.........
 800ba3c:	8870 8888 90a8 0068 88f0 f088 90a0 0088     p.....h.........
 800ba4c:	8870 7080 8808 0070 20f8 2020 2020 0020     p..p..p..      .
 800ba5c:	8888 8888 8888 0070 8888 8888 5088 0020     ......p......P .
 800ba6c:	8888 a888 a8a8 0050 8888 2050 8850 0088     ......P...P P...
 800ba7c:	8888 5088 2020 0020 08f8 2010 8040 00f8     ...P   .... @...
 800ba8c:	4070 4040 4040 0070 8000 2040 0810 0000     p@@@@@p...@ ....
 800ba9c:	1070 1010 1010 0070 5020 0088 0000 0000     p.....p. P......
 800baac:	0000 0000 0000 f800 2040 0010 0000 0000     ........@ ......
 800babc:	0000 0870 8878 0078 8080 c8b0 8888 00f0     ..p.x.x.........
 800bacc:	0000 8070 8880 0070 0808 9868 8888 0078     ..p...p...h...x.
 800badc:	0000 8870 80f8 0070 4830 e040 4040 0040     ..p...p.0H@.@@@.
 800baec:	0000 8878 7888 7008 8080 c8b0 8888 0088     ..x..x.p........
 800bafc:	0020 2060 2020 0070 0010 1030 1010 6090      .`   p...0....`
 800bb0c:	8080 a090 a0c0 0090 2060 2020 2020 0070     ........`     p.
 800bb1c:	0000 a8d0 8888 0088 0000 c8b0 8888 0088     ................
 800bb2c:	0000 8870 8888 0070 0000 88f0 f088 8080     ..p...p.........
 800bb3c:	0000 8878 7888 0808 0000 c8b0 8080 0080     ..x..x..........
 800bb4c:	0000 8078 0870 00f0 4040 40e0 4840 0030     ..x.p...@@.@@H0.
 800bb5c:	0000 8888 9888 0068 0000 8888 5088 0020     ......h......P .
 800bb6c:	0000 8888 a8a8 0050 0000 5088 5020 0088     ......P....P P..
 800bb7c:	0000 8888 7888 7008 0000 10f8 4020 00f8     .....x.p.... @..
 800bb8c:	2010 4020 2020 0010 2020 2020 2020 0020     .  @  ..       .
 800bb9c:	2040 1020 2020 0040 9068 0000 0000 0000     @  .  @.h.......
 800bbac:	2018 0000 0000 0000 20c0 0000 0000 0000     . ....... ......
 800bbbc:	8870 0000 0000 0000 0050 0000 0000 0000     p.......P.......
 800bbcc:	9068 0000 0000 0000 0000 6000 2020 0070     h..........`  p.
 800bbdc:	6000 f090 8888 80b0 0020 8870 88f8 0088     .`...... .p.....
 800bbec:	0020 0870 8878 0078 6038 b8a0 a0e0 00b8      .p.x.x.8`......
 800bbfc:	4870 e848 4848 0070 40e0 4870 7048 e040     pHH.HHp..@pHHp@.
 800bc0c:	0000 28d0 a078 0058 40a0 10a0 8878 0070     ...(x.X..@..x.p.
 800bc1c:	2060 2830 2030 0070 8870 a898 88c8 0070     ` 0(0 p.p.....p.
 800bc2c:	0000 9870 c8a8 0070 0000 8870 88f8 0088     ..p...p...p.....
 800bc3c:	0000 80f8 80e0 00f8 0000 2070 2020 0070     ..........p   p.
 800bc4c:	0000 8870 8888 0070 0000 8888 8888 0070     ..p...p.......p.
 800bc5c:	0000 c888 98a8 0088 0020 2020 2020 0020     ........ .     .
 800bc6c:	0020 4020 8880 0070 2018 0000 0000 0000      . @..p.. ......
 800bc7c:	20c0 0000 0000 0000 5020 0000 0000 0000     . ...... P......
 800bc8c:	0050 0000 0000 0000 9068 0000 0000 0000     P.......h.......
 800bc9c:	0000 0000 0000 2000 0000 0000 0000 0000     ....... ........
 800bcac:	2000 a070 a8a0 2070 4030 e040 4840 00b0     . p...p 0@@.@H..
 800bcbc:	0000 7088 7050 0088 5088 20f8 20f8 0020     ...pPp...P. .  .
 800bccc:	2020 0020 2020 0020 4830 5020 9020 0060        .   .0H P .`.
 800bcdc:	0088 0000 0000 0000 88f8 b8a8 88a8 00f8     ................
 800bcec:	0870 8878 0070 0000 2800 a050 2850 0000     p.x.p....(P.P(..
 800bcfc:	0000 f800 0808 0000 0000 7000 0000 0000     ...........p....
 800bd0c:	88f8 88a8 a898 00f8 00f8 0000 0000 0000     ................
 800bd1c:	5020 0020 0000 0000 2000 2070 7000 0000      P ...... p .p..
 800bd2c:	9060 4020 00f0 0000 10e0 1060 00e0 0000     `. @......`.....
 800bd3c:	2018 0000 0000 0000 0000 8888 c888 80b0     . ..............
 800bd4c:	9878 7898 1818 0018 0000 3000 0030 0000     x..x.......00...
 800bd5c:	c040 4040 00e0 0000 8870 8888 0070 0000     @.@@....p...p...
 800bd6c:	a000 2850 a050 0000 9088 50a0 50b0 1078     ..P(P......P.Px.
 800bd7c:	9088 40a0 08b8 3810 40c0 48c0 28d8 0838     ...@...8.@.H.(8.
 800bd8c:	8800 2050 8850 0000 2000 f800 2000 0000     ..P P.... ... ..
 800bd9c:	3010 fc70 3070 0010 3020 fc38 3038 0020     .0p.p0.. 08.80 .
 800bdac:	2000 f870 2020 0000 2000 f820 2070 0000     . p.  ...  .p ..
 800bdbc:	0800 6828 60f8 0020 0400 0804 9008 2050     ..(h.` .......P 

0800bdcc <GUI_F6x8_TI8859_1>:
 800bdcc:	0090 00ff bdd4 0800                         ........

0800bdd4 <GUI_F6x8_TL8859_1>:
 800bdd4:	009d ffff 009e ffff 009f ffff 00a0 ffff     ................
 800bde4:	00a1 ffff 00a2 ffff ffff ffff ffff ffff     ................
 800bdf4:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 800be04:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 800be14:	007e ffff 0076 ffff 007f ffff 0080 ffff     ~...v...........
 800be24:	0081 ffff 0082 ffff 0083 ffff 0084 ffff     ................
 800be34:	0085 ffff 0086 ffff 0087 ffff 0088 ffff     ................
 800be44:	0089 ffff 008a ffff 008b ffff 008c ffff     ................
 800be54:	008d ffff 008e ffff 008f ffff 0090 ffff     ................
 800be64:	0091 ffff 0092 ffff 0093 ffff 0094 ffff     ................
 800be74:	007d ffff 0095 ffff 0096 ffff 0097 ffff     }...............
 800be84:	0098 ffff 0099 ffff 009a ffff 0077 ffff     ............w...
 800be94:	0070 0079 0070 0078 0070 007a 0070 007c     p.y.p.x.p.z.p.|.
 800bea4:	0070 007b 0066 ffff 0068 ffff 0023 007d     p.{.f...h...#.}.
 800beb4:	0071 0079 0071 0078 0071 007a 0071 007b     q.y.q.x.q.z.q.{.
 800bec4:	0072 0079 0072 0078 0072 007a 0072 007b     r.y.r.x.r.z.r.{.
 800bed4:	0069 ffff 0075 007c 0073 0079 0073 0078     i...u.|.s.y.s.x.
 800bee4:	0073 007a 0073 007c 0073 007b 009b ffff     s.z.s.|.s.{.....
 800bef4:	006e ffff 0074 0079 0074 0078 0074 007a     n...t.y.t.x.t.z.
 800bf04:	0074 007b 0039 0078 006a ffff 0065 ffff     t.{.9.x.j...e...
 800bf14:	0041 0060 0041 005f 0041 0061 0041 0063     A.`.A._.A.a.A.c.
 800bf24:	0041 0062 0067 ffff 006b ffff 0043 007d     A.b.g...k...C.}.
 800bf34:	0045 0060 0045 005f 0045 0061 0045 0062     E.`.E._.E.a.E.b.
 800bf44:	0064 0060 0064 005f 0064 0061 0064 0062     d.`.d._.d.a.d.b.
 800bf54:	006c ffff 004e 0063 004f 0060 004f 005f     l...N.c.O.`.O._.
 800bf64:	004f 0061 004f 0063 004f 0062 009c ffff     O.a.O.c.O.b.....
 800bf74:	006f ffff 0055 0060 0055 005f 0055 0061     o...U.`.U._.U.a.
 800bf84:	0055 0062 0059 005f 006d ffff 0059 0062     U.b.Y._.m...Y.b.

0800bf94 <GUI_Font20B_1>:
 800bf94:	5b6d 0800 5c61 0800 5ca9 0800 5cb1 0800     m[..a\...\...\..
	...
 800bfac:	1414 0101 bfb8 0800 0a10 000d               ............

0800bfb8 <GUI_Font20B_1_Prop0>:
 800bfb8:	00a0 00ff bfc4 0800 d154 0800               ........T...

0800bfc4 <GUI_Font20B_1_CharInfo>:
 800bfc4:	0505 0001 c2c4 0800 0505 0001 c2d8 0800     ................
 800bfd4:	0a0a 0002 c2ec 0800 0a0a 0002 c314 0800     ................
 800bfe4:	0a0a 0002 c33c 0800 0a0a 0002 c364 0800     ....<.......d...
 800bff4:	0404 0001 c38c 0800 0a0a 0002 c3a0 0800     ................
 800c004:	0606 0001 c3c8 0800 0d0d 0002 c3dc 0800     ................
 800c014:	0707 0001 c404 0800 0a0a 0002 c418 0800     ................
 800c024:	0b0b 0002 c440 0800 0606 0001 c468 0800     ....@.......h...
 800c034:	0d0d 0002 c47c 0800 0a0a 0002 c4a4 0800     ....|...........
 800c044:	0707 0001 c4cc 0800 0a0a 0002 c4e0 0800     ................
 800c054:	0606 0001 c508 0800 0606 0001 c51c 0800     ................
 800c064:	0606 0001 c530 0800 0a0a 0002 c544 0800     ....0.......D...
 800c074:	0a0a 0002 c56c 0800 0505 0001 c594 0800     ....l...........
 800c084:	0606 0001 c5a8 0800 0606 0001 c5bc 0800     ................
 800c094:	0707 0001 c5d0 0800 0a0a 0002 c5e4 0800     ................
 800c0a4:	0f0f 0002 c60c 0800 0f0f 0002 c634 0800     ............4...
 800c0b4:	0f0f 0002 c65c 0800 0b0b 0002 c684 0800     ....\...........
 800c0c4:	0d0d 0002 c6ac 0800 0d0d 0002 c6d4 0800     ................
 800c0d4:	0d0d 0002 c6fc 0800 0d0d 0002 c724 0800     ............$...
 800c0e4:	0d0d 0002 c74c 0800 0d0d 0002 c774 0800     ....L.......t...
 800c0f4:	1212 0003 c79c 0800 0d0d 0002 c7d8 0800     ................
 800c104:	0c0c 0002 c800 0800 0c0c 0002 c828 0800     ............(...
 800c114:	0c0c 0002 c850 0800 0c0c 0002 c878 0800     ....P.......x...
 800c124:	0505 0001 c8a0 0800 0505 0001 c8b4 0800     ................
 800c134:	0505 0001 c8c8 0800 0505 0001 c8dc 0800     ................
 800c144:	0d0d 0002 c8f0 0800 0d0d 0002 c918 0800     ................
 800c154:	0e0e 0002 c940 0800 0e0e 0002 c968 0800     ....@.......h...
 800c164:	0e0e 0002 c990 0800 0e0e 0002 c9b8 0800     ................
 800c174:	0e0e 0002 c9e0 0800 0b0b 0002 ca08 0800     ................
 800c184:	0e0e 0002 ca30 0800 0d0d 0002 ca58 0800     ....0.......X...
 800c194:	0d0d 0002 ca80 0800 0d0d 0002 caa8 0800     ................
 800c1a4:	0d0d 0002 cad0 0800 0c0c 0002 caf8 0800     ................
 800c1b4:	0c0c 0002 cb20 0800 0c0c 0002 cb48 0800     .... .......H...
 800c1c4:	0a0a 0002 cb70 0800 0a0a 0002 cb98 0800     ....p...........
 800c1d4:	0a0a 0002 cbc0 0800 0a0a 0002 cbe8 0800     ................
 800c1e4:	0a0a 0002 cc10 0800 0a0a 0002 cc38 0800     ............8...
 800c1f4:	1010 0002 cc60 0800 0a0a 0002 cc88 0800     ....`...........
 800c204:	0a0a 0002 ccb0 0800 0a0a 0002 ccd8 0800     ................
 800c214:	0a0a 0002 cd00 0800 0a0a 0002 cd28 0800     ............(...
 800c224:	0505 0001 cd50 0800 0505 0001 cd64 0800     ....P.......d...
 800c234:	0505 0001 cd78 0800 0505 0001 cd8c 0800     ....x...........
 800c244:	0b0b 0002 cda0 0800 0b0b 0002 cdc8 0800     ................
 800c254:	0b0b 0002 cdf0 0800 0b0b 0002 ce18 0800     ................
 800c264:	0b0b 0002 ce40 0800 0b0b 0002 ce68 0800     ....@.......h...
 800c274:	0b0b 0002 ce90 0800 0a0a 0002 ceb8 0800     ................
 800c284:	0b0b 0002 cee0 0800 0b0b 0002 cf08 0800     ................
 800c294:	0b0b 0002 cf30 0800 0b0b 0002 cf58 0800     ....0.......X...
 800c2a4:	0b0b 0002 cf80 0800 0a0a 0002 cfa8 0800     ................
 800c2b4:	0b0b 0002 cfd0 0800 0a0a 0002 cff8 0800     ................

0800c2c4 <acGUI_Font20B_1_00A0>:
	...

0800c2d8 <acGUI_Font20B_1_00A1>:
 800c2d8:	0000 0000 0000 7070 0070 2020 7070 7070     ......ppp.  pppp
 800c2e8:	7070 7070                                   pppp

0800c2ec <acGUI_Font20B_1_00A2>:
 800c2ec:	0000 0000 0000 8000 0001 0001 001f 803f     ..............?.
 800c2fc:	c07b 0072 0074 0074 c075 c079 803f 001f     {.r.t.t.u.y.?...
 800c30c:	0010 0010 0010 0020                         ...... .

0800c314 <acGUI_Font20B_1_00A3>:
 800c314:	0000 0000 0000 001e 003f 8073 8073 0070     ........?.s.s.p.
 800c324:	00fe 00fe 0038 0038 0070 80fc c0ff 8047     ....8.8.p.....G.
	...

0800c33c <acGUI_Font20B_1_00A4>:
	...
 800c344:	0000 0021 807f c0ff 8073 8061 8061 8073     ..!.....s.a.a.s.
 800c354:	c0ff 807f 0021 0000 0000 0000 0000 0000     ....!...........

0800c364 <acGUI_Font20B_1_00A5>:
 800c364:	0000 0000 0000 c0e0 c071 c071 803b 803b     ........q.q.;.;.
 800c374:	001f c07f c07f 000e c07f c07f 000e 000e     ................
	...

0800c38c <acGUI_Font20B_1_00A6>:
 800c38c:	0000 6000 6060 6060 6060 0000 6000 6060     ...```````...```
 800c39c:	6060 6060                                   ````

0800c3a0 <acGUI_Font20B_1_00A7>:
 800c3a0:	0000 0000 0000 003c 007e 0063 0060 0038     ......<.~.c.`.8.
 800c3b0:	007e 00cf 80c3 80e1 8071 003f 001e 0007     ~.......q.?.....
 800c3c0:	0063 0073 003f 001e                         c.s.?...

0800c3c8 <acGUI_Font20B_1_00A8>:
 800c3c8:	0000 cc00 00cc 0000 0000 0000 0000 0000     ................
 800c3d8:	0000 0000                                   ....

0800c3dc <acGUI_Font20B_1_00A9>:
 800c3dc:	0000 0000 0000 800f 6030 3060 9047 c88c     ........0``0G...
 800c3ec:	0898 0898 0898 c88c 9047 3060 6030 800f     ........G.`00`..
	...

0800c404 <acGUI_Font20B_1_00AA>:
 800c404:	0000 7800 0ccc cc7c 7ccc 0000 0000 0000     ...x..|..|......
 800c414:	0000 0000                                   ....

0800c418 <acGUI_Font20B_1_00AB>:
	...
 800c424:	0000 8019 0033 0077 00ee 00ee 0077 0033     ....3.w.....w.3.
 800c434:	8019 0000 0000 0000 0000 0000               ............

0800c440 <acGUI_Font20B_1_00AC>:
	...
 800c44c:	c07f c07f c07f c001 c001 c001 c001 0000     ................
	...

0800c468 <acGUI_Font20B_1_00AD>:
	...
 800c470:	0000 7c7c 007c 0000 0000 0000               ..|||.......

0800c47c <acGUI_Font20B_1_00AE>:
 800c47c:	0000 0000 0000 800f 6030 3060 104f 8888     ........0``0O...
 800c48c:	8888 088f 0889 8888 9048 3060 6030 800f     ........H.`00`..
	...

0800c4a4 <acGUI_Font20B_1_00AF>:
 800c4a4:	c0ff c0ff 0000 0000 0000 0000 0000 0000     ................
	...

0800c4cc <acGUI_Font20B_1_00B0>:
 800c4cc:	0000 3800 4444 3844 0000 0000 0000 0000     ...8DDD8........
 800c4dc:	0000 0000                                   ....

0800c4e0 <acGUI_Font20B_1_00B1>:
 800c4e0:	0000 0000 0000 000e 000e 000e c07f c07f     ................
 800c4f0:	c07f 000e 000e 000e 0000 c07f c07f c07f     ................
	...

0800c508 <acGUI_Font20B_1_00B2>:
 800c508:	0000 7000 18d8 7038 f8e0 0000 0000 0000     ...p..8p........
 800c518:	0000 0000                                   ....

0800c51c <acGUI_Font20B_1_00B3>:
 800c51c:	0000 7000 18d8 1830 70d8 0000 0000 0000     ...p..0..p......
 800c52c:	0000 0000                                   ....

0800c530 <acGUI_Font20B_1_00B4>:
 800c530:	0000 1c00 3018 0000 0000 0000 0000 0000     .....0..........
 800c540:	0000 0000                                   ....

0800c544 <acGUI_Font20B_1_00B5>:
	...
 800c550:	8073 8073 8073 8073 8073 8073 8073 8073     s.s.s.s.s.s.s.s.
 800c560:	807f 807f 0070 0070 0070 0070               ....p.p.p.p.

0800c56c <acGUI_Font20B_1_00B6>:
 800c56c:	0000 0000 0000 c03f c07f 80fd 80fd 80fd     ......?.........
 800c57c:	807d 803d 800d 800d 800d 800d 800d 800d     }.=.............
 800c58c:	800d 800d 800d 0000                         ........

0800c594 <acGUI_Font20B_1_00B7>:
	...
 800c59c:	7070 0070 0000 0000 0000 0000               ppp.........

0800c5a8 <acGUI_Font20B_1_00B8>:
	...
 800c5b8:	1878 00f0                                   x...

0800c5bc <acGUI_Font20B_1_00B9>:
 800c5bc:	0000 3000 f070 3030 3030 0000 0000 0000     ...0p.0000......
 800c5cc:	0000 0000                                   ....

0800c5d0 <acGUI_Font20B_1_00BA>:
 800c5d0:	0000 3c00 6666 6666 3c66 0000 0000 0000     ...<fffff<......
 800c5e0:	0000 0000                                   ....

0800c5e4 <acGUI_Font20B_1_00BB>:
	...
 800c5f0:	0000 0066 0033 803b c01d c01d 803b 0033     ..f.3.;.....;.3.
 800c600:	0066 0000 0000 0000 0000 0000               f...........

0800c60c <acGUI_Font20B_1_00BC>:
 800c60c:	0000 0000 0000 6018 6038 c078 c018 8019     .......`8`x.....
 800c61c:	8019 0c1b 1c03 1c06 2c06 4c0c 7e0c 0c18     .........,.L.~..
	...

0800c634 <acGUI_Font20B_1_00BD>:
 800c634:	0000 0000 0000 6030 6070 c0f0 c031 8031     ......0`p`..1.1.
 800c644:	0033 3833 6c06 0c06 1c0c 3818 7018 7c30     3.38.l.....8.p0|
	...

0800c65c <acGUI_Font20B_1_00BE>:
 800c65c:	0000 0000 0000 3070 60d8 6018 c030 8019     ......p0.`.`0...
 800c66c:	80d9 0c73 1c03 1c06 2c0c 4c0c 7e18 0c18     ..s......,.L.~..
	...

0800c684 <acGUI_Font20B_1_00BF>:
	...
 800c690:	000e 000e 000e 0000 000e 000e 001e 003c     ..............<.
 800c6a0:	0078 0070 c071 c073 803f 001f               x.p.q.s.?...

0800c6ac <acGUI_Font20B_1_00C0>:
 800c6ac:	000e 0006 0003 800f 800f 800f c01d c01d     ................
 800c6bc:	c01d e038 e03f e03f f07f 7070 7070 38e0     ..8.?.?...pppp.8
	...

0800c6d4 <acGUI_Font20B_1_00C1>:
 800c6d4:	8003 0003 0006 800f 800f 800f c01d c01d     ................
 800c6e4:	c01d e038 e03f e03f f07f 7070 7070 38e0     ..8.?.?...pppp.8
	...

0800c6fc <acGUI_Font20B_1_00C2>:
 800c6fc:	0007 800d 0000 800f 800f 800f c01d c01d     ................
 800c70c:	c01d e038 e03f e03f f07f 7070 7070 38e0     ..8.?.?...pppp.8
	...

0800c724 <acGUI_Font20B_1_00C3>:
 800c724:	400e c009 0000 800f 800f 800f c01d c01d     .@..............
 800c734:	c01d e038 e03f e03f f07f 7070 7070 38e0     ..8.?.?...pppp.8
	...

0800c74c <acGUI_Font20B_1_00C4>:
 800c74c:	c00c c00c 0000 800f 800f 800f c01d c01d     ................
 800c75c:	c01d e038 e03f e03f f07f 7070 7070 38e0     ..8.?.?...pppp.8
	...

0800c774 <acGUI_Font20B_1_00C5>:
 800c774:	0003 8004 8004 800f 800f 800f c01d c01d     ................
 800c784:	c01d e038 e03f e03f f07f 7070 7070 38e0     ..8.?.?...pppp.8
	...

0800c79c <acGUI_Font20B_1_00C6>:
	...
 800c7a4:	0700 80ff ff0f 0e80 80ff e01c 1c00 00e0     ................
 800c7b4:	ff38 3880 80ff ff3f 7f80 00e0 e07f e000     8..8..?.........
 800c7c4:	80ff ffe0 c080 80ff 0000 0000 0000 0000     ................
 800c7d4:	0000 0000                                   ....

0800c7d8 <acGUI_Font20B_1_00C7>:
 800c7d8:	0000 0000 0000 8007 e01f e03f f038 6070     ..........?.8.p`
 800c7e8:	0070 0070 0070 6070 f038 e03f e01f 8007     p.p.p.p`8.?.....
 800c7f8:	8007 8001 000f 0000                         ........

0800c800 <acGUI_Font20B_1_00C8>:
 800c800:	000e 0006 0003 e07f e07f e07f 0070 0070     ............p.p.
 800c810:	e07f e07f e07f 0070 0070 e07f e07f e07f     ......p.p.......
	...

0800c828 <acGUI_Font20B_1_00C9>:
 800c828:	8003 0003 0006 e07f e07f e07f 0070 0070     ............p.p.
 800c838:	e07f e07f e07f 0070 0070 e07f e07f e07f     ......p.p.......
	...

0800c850 <acGUI_Font20B_1_00CA>:
 800c850:	0007 800d 0000 e07f e07f e07f 0070 0070     ............p.p.
 800c860:	e07f e07f e07f 0070 0070 e07f e07f e07f     ......p.p.......
	...

0800c878 <acGUI_Font20B_1_00CB>:
 800c878:	8019 8019 0000 e07f e07f e07f 0070 0070     ............p.p.
 800c888:	e07f e07f e07f 0070 0070 e07f e07f e07f     ......p.p.......
	...

0800c8a0 <acGUI_Font20B_1_00CC>:
 800c8a0:	70e0 7030 7070 7070 7070 7070 7070 7070     .p0ppppppppppppp
 800c8b0:	0000 0000                                   ....

0800c8b4 <acGUI_Font20B_1_00CD>:
 800c8b4:	3038 7060 7070 7070 7070 7070 7070 7070     80`ppppppppppppp
 800c8c4:	0000 0000                                   ....

0800c8c8 <acGUI_Font20B_1_00CE>:
 800c8c8:	d870 7000 7070 7070 7070 7070 7070 7070     p..ppppppppppppp
 800c8d8:	0000 0000                                   ....

0800c8dc <acGUI_Font20B_1_00CF>:
 800c8dc:	d8d8 7000 7070 7070 7070 7070 7070 7070     ...ppppppppppppp
 800c8ec:	0000 0000                                   ....

0800c8f0 <acGUI_Font20B_1_00D0>:
 800c8f0:	0000 0000 0000 807f e07f e07f f070 7070     ............p.pp
 800c900:	70fe 70fe 7070 7070 f070 e07f e07f 807f     .p.pppppp.......
	...

0800c918 <acGUI_Font20B_1_00D1>:
 800c918:	400e c009 0000 7070 7078 707c 707c 707e     .@....ppxp|p|p~p
 800c928:	7076 7077 7073 f073 f071 f071 f070 7070     vpwpsps.q.q.p.pp
	...

0800c940 <acGUI_Font20B_1_00D2>:
 800c940:	0007 0003 8001 8007 e01f f03f 7038 3870     ..........?.8pp8
 800c950:	3870 3870 3870 3870 7038 f03f e01f 8007     p8p8p8p88p?.....
	...

0800c968 <acGUI_Font20B_1_00D3>:
 800c968:	8003 0003 0006 8007 e01f f03f 7038 3870     ..........?.8pp8
 800c978:	3870 3870 3870 3870 7038 f03f e01f 8007     p8p8p8p88p?.....
	...

0800c990 <acGUI_Font20B_1_00D4>:
 800c990:	8003 c006 0000 8007 e01f f03f 7038 3870     ..........?.8pp8
 800c9a0:	3870 3870 3870 3870 7038 f03f e01f 8007     p8p8p8p88p?.....
	...

0800c9b8 <acGUI_Font20B_1_00D5>:
 800c9b8:	400e c009 0000 8007 e01f f03f 7038 3870     .@........?.8pp8
 800c9c8:	3870 3870 3870 3870 7038 f03f e01f 8007     p8p8p8p88p?.....
	...

0800c9e0 <acGUI_Font20B_1_00D6>:
 800c9e0:	c00c c00c 0000 8007 e01f f03f 7038 3870     ..........?.8pp8
 800c9f0:	3870 3870 3870 3870 7038 f03f e01f 8007     p8p8p8p88p?.....
	...

0800ca08 <acGUI_Font20B_1_00D7>:
	...
 800ca14:	0021 8073 003f 001e 001e 003f 8073 0021     !.s.?.....?.s.!.
	...

0800ca30 <acGUI_Font20B_1_00D8>:
 800ca30:	0000 0000 0800 cc0f f81f f03f 7838 f870     ..........?.8xp.
 800ca40:	b871 3873 3876 387c 7078 f03f e07f c0cf     q.s8v8|8xp?.....
 800ca50:	0040 0000 0000 0000                         @.......

0800ca58 <acGUI_Font20B_1_00D9>:
 800ca58:	000e 0006 0003 7070 7070 7070 7070 7070     ......pppppppppp
 800ca68:	7070 7070 7070 7070 f078 e03f e03f 800f     ppppppppx.?.?...
	...

0800ca80 <acGUI_Font20B_1_00DA>:
 800ca80:	8003 0003 0006 7070 7070 7070 7070 7070     ......pppppppppp
 800ca90:	7070 7070 7070 7070 f078 e03f e03f 800f     ppppppppx.?.?...
	...

0800caa8 <acGUI_Font20B_1_00DB>:
 800caa8:	0007 800d 0000 7070 7070 7070 7070 7070     ......pppppppppp
 800cab8:	7070 7070 7070 7070 f078 e03f e03f 800f     ppppppppx.?.?...
	...

0800cad0 <acGUI_Font20B_1_00DC>:
 800cad0:	c00c c00c 0000 7070 7070 7070 7070 7070     ......pppppppppp
 800cae0:	7070 7070 7070 7070 f078 e03f e03f 800f     ppppppppx.?.?...
	...

0800caf8 <acGUI_Font20B_1_00DD>:
 800caf8:	8003 0003 0006 7070 7070 e038 c01d c01d     ......pppp8.....
 800cb08:	800f 800f 0007 0007 0007 0007 0007 0007     ................
	...

0800cb20 <acGUI_Font20B_1_00DE>:
 800cb20:	0000 0000 0000 0070 0070 807f c07f e07f     ......p.p.......
 800cb30:	e070 e070 e070 e07f c07f 807f 0070 0070     p.p.p.......p.p.
	...

0800cb48 <acGUI_Font20B_1_00DF>:
 800cb48:	0000 0000 0000 001f 803f 8073 8073 0077     ........?.s.s.w.
 800cb58:	0077 8077 c073 c071 e070 e074 e07f 8077     w.w.s.q.p.t...w.
	...

0800cb70 <acGUI_Font20B_1_00E0>:
 800cb70:	0000 0000 001c 000c 0006 0000 001f 803f     ..............?.
 800cb80:	8063 8007 801f 803b 8073 8073 807f c03d     c.....;.s.s...=.
	...

0800cb98 <acGUI_Font20B_1_00E1>:
 800cb98:	0000 0000 0007 0006 000c 0000 001f 803f     ..............?.
 800cba8:	8063 8007 801f 803b 8073 8073 807f c03d     c.....;.s.s...=.
	...

0800cbc0 <acGUI_Font20B_1_00E2>:
 800cbc0:	0000 0000 0000 000e 001b 0000 001f 803f     ..............?.
 800cbd0:	8063 8007 801f 803b 8073 8073 807f c03d     c.....;.s.s...=.
	...

0800cbe8 <acGUI_Font20B_1_00E3>:
 800cbe8:	0000 0000 0000 0039 0027 0000 001f 803f     ......9.'.....?.
 800cbf8:	8063 8007 801f 803b 8073 8073 807f c03d     c.....;.s.s...=.
	...

0800cc10 <acGUI_Font20B_1_00E4>:
 800cc10:	0000 0000 0000 0033 0033 0000 001f 803f     ......3.3.....?.
 800cc20:	8063 8007 801f 803b 8073 8073 807f c03d     c.....;.s.s...=.
	...

0800cc38 <acGUI_Font20B_1_00E5>:
 800cc38:	0000 000c 0012 0012 000c 0000 001f 803f     ..............?.
 800cc48:	8063 8007 801f 803b 8073 8073 807f c03d     c.....;.s.s...=.
	...

0800cc60 <acGUI_Font20B_1_00E6>:
	...
 800cc6c:	781e fc3f 8e63 8e07 fe0f fe3b 8073 ce73     .x?.c.....;.s.s.
 800cc7c:	fc7f 783c 0000 0000 0000 0000               ..<x........

0800cc88 <acGUI_Font20B_1_00E7>:
	...
 800cc94:	001e 003f 807b 0071 0070 0070 0071 807b     ..?.{.q.p.p.q.{.
 800cca4:	003f 001e 001e 0006 003c 0000               ?.......<...

0800ccb0 <acGUI_Font20B_1_00E8>:
 800ccb0:	0000 0000 000e 0006 0003 0000 001f 803f     ..............?.
 800ccc0:	c071 c071 c07f c07f 0070 c071 803f 001f     q.q.....p.q.?...
	...

0800ccd8 <acGUI_Font20B_1_00E9>:
 800ccd8:	0000 0000 0007 0006 000c 0000 001f 803f     ..............?.
 800cce8:	c071 c071 c07f c07f 0070 c071 803f 001f     q.q.....p.q.?...
	...

0800cd00 <acGUI_Font20B_1_00EA>:
 800cd00:	0000 0000 0000 000e 001b 0000 001f 803f     ..............?.
 800cd10:	c071 c071 c07f c07f 0070 c071 803f 001f     q.q.....p.q.?...
	...

0800cd28 <acGUI_Font20B_1_00EB>:
 800cd28:	0000 0000 0000 8019 8019 0000 001f 803f     ..............?.
 800cd38:	c071 c071 c07f c07f 0070 c071 803f 001f     q.q.....p.q.?...
	...

0800cd50 <acGUI_Font20B_1_00EC>:
 800cd50:	0000 60e0 0030 7070 7070 7070 7070 7070     ...`0.pppppppppp
 800cd60:	0000 0000                                   ....

0800cd64 <acGUI_Font20B_1_00ED>:
 800cd64:	0000 3038 0060 7070 7070 7070 7070 7070     ..80`.pppppppppp
 800cd74:	0000 0000                                   ....

0800cd78 <acGUI_Font20B_1_00EE>:
 800cd78:	0000 7000 00d8 7070 7070 7070 7070 7070     ...p..pppppppppp
 800cd88:	0000 0000                                   ....

0800cd8c <acGUI_Font20B_1_00EF>:
 800cd8c:	0000 d800 00d8 7070 7070 7070 7070 7070     ......pppppppppp
 800cd9c:	0000 0000                                   ....

0800cda0 <acGUI_Font20B_1_00F0>:
 800cda0:	0000 0000 0000 800e 0007 8009 800f c03f     ..............?.
 800cdb0:	c03b c071 c071 c071 c071 803b 803f 001f     ;.q.q.q.q.;.?...
	...

0800cdc8 <acGUI_Font20B_1_00F1>:
 800cdc8:	0000 0000 0000 801c 8013 0000 8077 c07f     ............w...
 800cdd8:	c079 c071 c071 c071 c071 c071 c071 c071     y.q.q.q.q.q.q.q.
	...

0800cdf0 <acGUI_Font20B_1_00F2>:
 800cdf0:	0000 0000 000e 0006 0003 0000 001f 803f     ..............?.
 800ce00:	c07b c071 c071 c071 c071 c07b 803f 001f     {.q.q.q.q.{.?...
	...

0800ce18 <acGUI_Font20B_1_00F3>:
 800ce18:	0000 0000 0007 0006 000c 0000 001f 803f     ..............?.
 800ce28:	c07b c071 c071 c071 c071 c07b 803f 001f     {.q.q.q.q.{.?...
	...

0800ce40 <acGUI_Font20B_1_00F4>:
 800ce40:	0000 0000 0000 000e 001b 0000 001f 803f     ..............?.
 800ce50:	c07b c071 c071 c071 c071 c07b 803f 001f     {.q.q.q.q.{.?...
	...

0800ce68 <acGUI_Font20B_1_00F5>:
 800ce68:	0000 0000 0000 801c 8013 0000 001f 803f     ..............?.
 800ce78:	c07b c071 c071 c071 c071 c07b 803f 001f     {.q.q.q.q.{.?...
	...

0800ce90 <acGUI_Font20B_1_00F6>:
 800ce90:	0000 0000 0000 8019 8019 0000 001f 803f     ..............?.
 800cea0:	c07b c071 c071 c071 c071 c07b 803f 001f     {.q.q.q.q.{.?...
	...

0800ceb8 <acGUI_Font20B_1_00F7>:
	...
 800cec0:	001c 001c 001c 0000 80ff 80ff 80ff 0000     ................
 800ced0:	001c 001c 001c 0000 0000 0000 0000 0000     ................

0800cee0 <acGUI_Font20B_1_00F8>:
	...
 800cee8:	0000 8000 c01e 803f 803b c073 c077 c07d     ......?.;.s.w.}.
 800cef8:	c079 803b 803f 006f 0020 0000 0000 0000     y.;.?.o. .......

0800cf08 <acGUI_Font20B_1_00F9>:
 800cf08:	0000 0000 001c 000c 0006 0000 c071 c071     ............q.q.
 800cf18:	c071 c071 c071 c071 c071 c073 c07f c03d     q.q.q.q.q.s...=.
	...

0800cf30 <acGUI_Font20B_1_00FA>:
 800cf30:	0000 0000 0007 0006 000c 0000 c071 c071     ............q.q.
 800cf40:	c071 c071 c071 c071 c071 c073 c07f c03d     q.q.q.q.q.s...=.
	...

0800cf58 <acGUI_Font20B_1_00FB>:
 800cf58:	0000 0000 0000 000e 001b 0000 c071 c071     ............q.q.
 800cf68:	c071 c071 c071 c071 c071 c073 c07f c03d     q.q.q.q.q.s...=.
	...

0800cf80 <acGUI_Font20B_1_00FC>:
 800cf80:	0000 0000 0000 8019 8019 0000 c071 c071     ............q.q.
 800cf90:	c071 c071 c071 c071 c071 c073 c07f c03d     q.q.q.q.q.s...=.
	...

0800cfa8 <acGUI_Font20B_1_00FD>:
 800cfa8:	0000 0000 0007 0006 000c 0000 c0e0 c0e0     ................
 800cfb8:	c071 c071 8031 803b 801b 001f 001f 000e     q.q.1.;.........
 800cfc8:	000e 001c 007c 0078                         ....|.x.

0800cfd0 <acGUI_Font20B_1_00FE>:
 800cfd0:	0000 0000 0000 0070 0070 0070 0077 807f     ......p.p.p.w...
 800cfe0:	c07b c071 c071 c071 c071 c07b 807f 0077     {.q.q.q.q.{...w.
 800cff0:	0070 0070 0070 0070                         p.p.p.p.

0800cff8 <acGUI_Font20B_1_00FF>:
 800cff8:	0000 0000 0000 8019 8019 0000 c0e0 c0e0     ................
 800d008:	c071 c071 8031 803b 801b 001f 001f 000e     q.q.1.;.........
 800d018:	000e 001c 007c 0078 0206 0004 0307 0105     ....|.x.........
 800d028:	4d8d 0800 4d91 0800 4d99 0800 4d9d 0800     .M...M...M...M..
 800d038:	4da5 0800 4da9 0800 4db1 0800 4db5 0800     .M...M...M...M..
 800d048:	4dbd 0800 4dc1 0800 4dc5 0800 4dcd 0800     .M...M...M...M..
 800d058:	4dd5 0800 4dd9 0800 4ddd 0800 4de5 0800     .M...M...M...M..

0800d068 <GUIDRV_FlexColor_API>:
 800d068:	0000 0000 4e71 0800 4e35 0800 4e49 0800     ....qN..5N..IN..
 800d078:	4e5d 0800 4df9 0800 4ded 0800 4e05 0800     ]N...M...M...N..
 800d088:	50c1 0800 4f7d 0800 4fe9 0800 504d 0800     .P..}O...O..MP..
 800d098:	5059 0800                                   YP..

0800d09c <_HL_APIList>:
 800d09c:	90d9 0800 907d 0800                         ....}...

0800d0a4 <LCD_API_ColorConv_M565>:
 800d0a4:	7215 0800 71e5 0800 7245 0800 0001 0000     .r...q..Er......
 800d0b4:	724d 0800 7335 0800                         Mr..5s..

0800d0bc <GUI_MEMDEV_DEVICE_16>:
 800d0bc:	0004 0000 7469 0800 8df9 0800 8a21 0800     ....it......!...
 800d0cc:	8bd5 0800 896d 0800 89ad 0800 88e9 0800     ....m...........
 800d0dc:	7411 0800 7401 0800 7421 0800 73f1 0800     .t...t..!t...s..
 800d0ec:	7435 0800                                   5t..

0800d0f0 <_aID>:
 800d0f0:	0000 0000 0001 0000 0002 0000 0003 0000     ................
 800d100:	0004 0000 0005 0000 0006 0000 0007 0000     ................
 800d110:	0008 0000 0009 0000 000a 0000 000b 0000     ................
 800d120:	000c 0000 000d 0000 000e 0000 000f 0000     ................

0800d130 <GUI_Font20B_ASCII>:
 800d130:	5b6d 0800 5c61 0800 5ca9 0800 5cb1 0800     m[..a\...\...\..
	...
 800d148:	1414 0101 d154 0800 0a10 000d               ....T.......

0800d154 <GUI_Font20B_ASCII_Prop1>:
 800d154:	0020 007e d160 0800 0000 0000                .~.`.......

0800d160 <GUI_Font20B_ASCII_CharInfo>:
 800d160:	0505 0001 d458 0800 0505 0001 d46c 0800     ....X.......l...
 800d170:	0909 0002 d480 0800 0a0a 0002 d4a8 0800     ................
 800d180:	0a0a 0002 d4d0 0800 1111 0003 d4f8 0800     ................
 800d190:	0d0d 0002 d534 0800 0404 0001 d55c 0800     ....4.......\...
 800d1a0:	0606 0001 d570 0800 0606 0001 d584 0800     ....p...........
 800d1b0:	0707 0001 d598 0800 0b0b 0002 d5ac 0800     ................
 800d1c0:	0505 0001 d5d4 0800 0606 0001 d5e8 0800     ................
 800d1d0:	0505 0001 d5fc 0800 0505 0001 d610 0800     ................
 800d1e0:	0a0a 0002 d624 0800 0a0a 0002 d64c 0800     ....$.......L...
 800d1f0:	0a0a 0002 d674 0800 0a0a 0002 d69c 0800     ....t...........
 800d200:	0a0a 0002 d6c4 0800 0a0a 0002 d6ec 0800     ................
 800d210:	0a0a 0002 d714 0800 0a0a 0002 d73c 0800     ............<...
 800d220:	0a0a 0002 d764 0800 0a0a 0002 d78c 0800     ....d...........
 800d230:	0707 0001 d7b4 0800 0707 0001 d7c8 0800     ................
 800d240:	0b0b 0002 d7dc 0800 0b0b 0002 d804 0800     ................
 800d250:	0b0b 0002 d82c 0800 0b0b 0002 d854 0800     ....,.......T...
 800d260:	1212 0003 d87c 0800 0d0d 0002 d8b8 0800     ....|...........
 800d270:	0d0d 0002 d8e0 0800 0d0d 0002 d908 0800     ................
 800d280:	0d0d 0002 d930 0800 0c0c 0002 d958 0800     ....0.......X...
 800d290:	0b0b 0002 d980 0800 0e0e 0002 d9a8 0800     ................
 800d2a0:	0d0d 0002 d9d0 0800 0505 0001 d9f8 0800     ................
 800d2b0:	0a0a 0002 da0c 0800 0d0d 0002 da34 0800     ............4...
 800d2c0:	0b0b 0002 da5c 0800 0f0f 0002 da84 0800     ....\...........
 800d2d0:	0d0d 0002 daac 0800 0e0e 0002 dad4 0800     ................
 800d2e0:	0c0c 0002 dafc 0800 0e0e 0002 db24 0800     ............$...
 800d2f0:	0d0d 0002 db4c 0800 0c0c 0002 db74 0800     ....L.......t...
 800d300:	0b0b 0002 db9c 0800 0d0d 0002 dbc4 0800     ................
 800d310:	0d0d 0002 dbec 0800 1111 0003 dc14 0800     ................
 800d320:	0c0c 0002 dc50 0800 0d0d 0002 dc78 0800     ....P.......x...
 800d330:	0a0a 0002 dca0 0800 0606 0001 dcc8 0800     ................
 800d340:	0505 0001 dcdc 0800 0606 0001 dcf0 0800     ................
 800d350:	0b0b 0002 dd04 0800 0a0a 0002 dd2c 0800     ............,...
 800d360:	0606 0001 dd54 0800 0a0a 0002 dd68 0800     ....T.......h...
 800d370:	0b0b 0002 dd90 0800 0a0a 0002 ddb8 0800     ................
 800d380:	0b0b 0002 dde0 0800 0b0b 0002 de08 0800     ................
 800d390:	0606 0001 de30 0800 0b0b 0002 de44 0800     ....0.......D...
 800d3a0:	0b0b 0002 de6c 0800 0505 0001 de94 0800     ....l...........
 800d3b0:	0505 0001 dea8 0800 0a0a 0002 debc 0800     ................
 800d3c0:	0505 0001 dee4 0800 1111 0003 def8 0800     ................
 800d3d0:	0b0b 0002 df34 0800 0b0b 0002 df5c 0800     ....4.......\...
 800d3e0:	0b0b 0002 df84 0800 0b0b 0002 dfac 0800     ................
 800d3f0:	0707 0001 dfd4 0800 0a0a 0002 dfe8 0800     ................
 800d400:	0606 0001 e010 0800 0b0b 0002 e024 0800     ............$...
 800d410:	0b0b 0002 e04c 0800 0f0f 0002 e074 0800     ....L.......t...
 800d420:	0b0b 0002 e09c 0800 0b0b 0002 e0c4 0800     ................
 800d430:	0909 0002 e0ec 0800 0707 0001 e114 0800     ................
 800d440:	0404 0001 e128 0800 0707 0001 e13c 0800     ....(.......<...
 800d450:	0b0b 0002 e150 0800                         ....P...

0800d458 <acGUI_Font20B_ASCII_0020>:
	...

0800d46c <acGUI_Font20B_ASCII_0021>:
 800d46c:	0000 7000 7070 7070 7070 2020 7000 7070     ...ppppppp  .ppp
 800d47c:	0000 0000                                   ....

0800d480 <acGUI_Font20B_ASCII_0022>:
 800d480:	0000 0000 0000 0077 0077 0077 0077 0077     ......w.w.w.w.w.
	...

0800d4a8 <acGUI_Font20B_ASCII_0023>:
 800d4a8:	0000 0000 0000 c00c c00c 8019 c0ff c0ff     ................
 800d4b8:	8019 803b 0033 c0ff c0ff 0033 0066 0066     ..;.3.....3.f.f.
	...

0800d4d0 <acGUI_Font20B_ASCII_0024>:
 800d4d0:	0000 0000 0008 003e 007f 80eb 00e8 00e8     ......>.........
 800d4e0:	007c 003f 800f 800b 80eb 80eb 007f 003e     |.?...........>.
 800d4f0:	0008 0008 0000 0000                         ........

0800d4f8 <acGUI_Font20B_ASCII_0025>:
	...
 800d500:	3c00 0018 3066 6600 0030 6066 6600 0060     .<..f0.f0.f`.f`.
 800d510:	c03c 0000 00c0 8001 0100 009e 3303 0300     <............3..
 800d520:	0033 3306 0600 0033 1e0c 0000 0000 0000     3..3..3.........
 800d530:	0000 0000                                   ....

0800d534 <acGUI_Font20B_ASCII_0026>:
 800d534:	0000 0000 0000 000f c03f c039 c039 801d     ........?.9.9...
 800d544:	000f 001f b03f f073 e071 f071 f83f 101f     ....?.s.q.q.?...
	...

0800d55c <acGUI_Font20B_ASCII_0027>:
 800d55c:	0000 7000 7070 7070 0000 0000 0000 0000     ...ppppp........
 800d56c:	0000 0000                                   ....

0800d570 <acGUI_Font20B_ASCII_0028>:
 800d570:	0000 1800 3838 7030 7070 7070 7070 7070     ....880ppppppppp
 800d580:	3030 1838                                   008.

0800d584 <acGUI_Font20B_ASCII_0029>:
 800d584:	0000 6000 7070 3830 3838 3838 3838 3838     ...`pp0888888888
 800d594:	7030 6070                                   0pp`

0800d598 <acGUI_Font20B_ASCII_002A>:
 800d598:	0000 3000 fcb4 7830 00cc 0000 0000 0000     ...0..0x........
 800d5a8:	0000 0000                                   ....

0800d5ac <acGUI_Font20B_ASCII_002B>:
	...
 800d5b4:	0000 000e 000e 000e c07f c07f c07f 000e     ................
 800d5c4:	000e 000e 0000 0000 0000 0000 0000 0000     ................

0800d5d4 <acGUI_Font20B_ASCII_002C>:
	...
 800d5e0:	7000 7070 3010 0060                         .ppp.0`.

0800d5e8 <acGUI_Font20B_ASCII_002D>:
	...
 800d5f0:	0000 7c7c 007c 0000 0000 0000               ..|||.......

0800d5fc <acGUI_Font20B_ASCII_002E>:
	...
 800d608:	7000 7070 0000 0000                         .ppp....

0800d610 <acGUI_Font20B_ASCII_002F>:
 800d610:	0000 1800 3018 3030 7030 6060 6060 c0c0     .....0000p````..
 800d620:	0000 0000                                   ....

0800d624 <acGUI_Font20B_ASCII_0030>:
 800d624:	0000 0000 0000 001e 003f 0033 8073 8073     ........?.3.s.s.
 800d634:	8073 8073 8073 8073 8073 0033 003f 001e     s.s.s.s.s.3.?...
	...

0800d64c <acGUI_Font20B_ASCII_0031>:
 800d64c:	0000 0000 0000 0006 000e 003e 007e 006e     ..........>.~.n.
 800d65c:	004e 000e 000e 000e 000e 000e 000e 000e     N...............
	...

0800d674 <acGUI_Font20B_ASCII_0032>:
 800d674:	0000 0000 0000 001e 003f 8073 8073 8003     ........?.s.s...
 800d684:	0007 0007 000e 001c 001c 0038 807f 807f     ..........8.....
	...

0800d69c <acGUI_Font20B_ASCII_0033>:
 800d69c:	0000 0000 0000 001e 003f 8073 8073 8003     ........?.s.s...
 800d6ac:	000f 000f 8003 8003 8073 8073 003f 001e     ........s.s.?...
	...

0800d6c4 <acGUI_Font20B_ASCII_0034>:
 800d6c4:	0000 0000 0000 0007 000f 000f 001f 0037     ..............7.
 800d6d4:	0037 0067 00c7 c0ff c0ff 0007 0007 0007     7.g.............
	...

0800d6ec <acGUI_Font20B_ASCII_0035>:
 800d6ec:	0000 0000 0000 001f 001f 0038 0030 003e     ..........8.0.>.
 800d6fc:	003f 8073 8003 8003 8003 8073 003f 001e     ?.s.......s.?...
	...

0800d714 <acGUI_Font20B_ASCII_0036>:
 800d714:	0000 0000 0000 001f 803f 8033 0070 007e     ........?.3.p.~.
 800d724:	007f 8073 8073 8073 8073 8033 003f 001e     ..s.s.s.s.3.?...
	...

0800d73c <acGUI_Font20B_ASCII_0037>:
 800d73c:	0000 0000 0000 807f 807f 8003 0007 0006     ................
 800d74c:	000e 000c 001c 001c 0038 0038 0038 0038     ........8.8.8.8.
	...

0800d764 <acGUI_Font20B_ASCII_0038>:
 800d764:	0000 0000 0000 001e 003f 8073 8073 8073     ........?.s.s.s.
 800d774:	003f 001e 0033 8073 8073 8073 003f 001e     ?...3.s.s.s.?...
	...

0800d78c <acGUI_Font20B_ASCII_0039>:
 800d78c:	0000 0000 0000 001e 003f 0073 8073 8073     ........?.s.s.s.
 800d79c:	8073 8073 803f 801f 8003 0073 003f 001e     s.s.?.....s.?...
	...

0800d7b4 <acGUI_Font20B_ASCII_003A>:
 800d7b4:	0000 0000 0000 3838 0038 0000 3800 3838     ......888....888
 800d7c4:	0000 0000                                   ....

0800d7c8 <acGUI_Font20B_ASCII_003B>:
 800d7c8:	0000 0000 0000 3838 0038 0000 3800 3838     ......888....888
 800d7d8:	1808 0030                                   ..0.

0800d7dc <acGUI_Font20B_ASCII_003C>:
	...
 800d7e4:	0000 4000 c001 c00f 003f 0078 0078 003f     ...@....?.x.x.?.
 800d7f4:	c00f c001 4000 0000 0000 0000 0000 0000     .....@..........

0800d804 <acGUI_Font20B_ASCII_003D>:
	...
 800d810:	c07f c07f c07f 0000 0000 c07f c07f c07f     ................
	...

0800d82c <acGUI_Font20B_ASCII_003E>:
	...
 800d834:	0000 0040 0070 007e 801f c003 c003 801f     ..@.p.~.........
 800d844:	007e 0070 0040 0000 0000 0000 0000 0000     ~.p.@...........

0800d854 <acGUI_Font20B_ASCII_003F>:
 800d854:	0000 0000 0000 001f 803f c079 c071 c003     ........?.y.q...
 800d864:	8007 000f 000e 000e 0000 000e 000e 000e     ................
	...

0800d87c <acGUI_Font20B_ASCII_0040>:
	...
 800d884:	0100 00f8 fe07 1e00 000f db19 3300 80fb     .............3..
 800d894:	3936 6e80 8039 316c 6c80 8031 736c 6c00     69.n9.l1.l1.ls.l
 800d8a4:	0077 fe67 3700 00b8 0138 1ec0 8007 ff0f     w.g..7..8.......
 800d8b4:	0300 00fc                                   ....

0800d8b8 <acGUI_Font20B_ASCII_0041>:
 800d8b8:	0000 0000 0000 800f 800f 800f c01d c01d     ................
 800d8c8:	c01d e038 e03f e03f f07f 7070 7070 38e0     ..8.?.?...pppp.8
	...

0800d8e0 <acGUI_Font20B_ASCII_0042>:
 800d8e0:	0000 0000 0000 c07f e07f f07f 7070 7070     ............pppp
 800d8f0:	e07f c07f e07f 7070 7070 f07f e07f c07f     ......pppp......
	...

0800d908 <acGUI_Font20B_ASCII_0043>:
 800d908:	0000 0000 0000 8007 e01f e03f f038 6070     ..........?.8.p`
 800d918:	0070 0070 0070 6070 f038 e03f e01f 8007     p.p.p.p`8.?.....
	...

0800d930 <acGUI_Font20B_ASCII_0044>:
 800d930:	0000 0000 0000 807f e07f e07f f070 7070     ............p.pp
 800d940:	7070 7070 7070 7070 f070 e07f e07f 807f     ppppppppp.......
	...

0800d958 <acGUI_Font20B_ASCII_0045>:
 800d958:	0000 0000 0000 e07f e07f e07f 0070 0070     ............p.p.
 800d968:	e07f e07f e07f 0070 0070 e07f e07f e07f     ......p.p.......
	...

0800d980 <acGUI_Font20B_ASCII_0046>:
 800d980:	0000 0000 0000 c07f c07f c07f 0070 0070     ............p.p.
 800d990:	807f 807f 807f 0070 0070 0070 0070 0070     ......p.p.p.p.p.
	...

0800d9a8 <acGUI_Font20B_ASCII_0047>:
 800d9a8:	0000 0000 0000 c007 f01f f03f 7838 3070     ..........?.8xp0
 800d9b8:	0070 f871 f871 f871 3838 f83f f01f c007     p.q.q.q.88?.....
	...

0800d9d0 <acGUI_Font20B_ASCII_0048>:
 800d9d0:	0000 0000 0000 7070 7070 7070 7070 7070     ......pppppppppp
 800d9e0:	f07f f07f f07f 7070 7070 7070 7070 7070     ......pppppppppp
	...

0800d9f8 <acGUI_Font20B_ASCII_0049>:
 800d9f8:	0000 7000 7070 7070 7070 7070 7070 7070     ...ppppppppppppp
 800da08:	0000 0000                                   ....

0800da0c <acGUI_Font20B_ASCII_004A>:
 800da0c:	0000 0000 0000 8003 8003 8003 8003 8003     ................
 800da1c:	8003 8003 8003 80e3 80e3 80ff 007f 003e     ..............>.
	...

0800da34 <acGUI_Font20B_ASCII_004B>:
 800da34:	0000 0000 0000 f070 e071 c071 8073 0077     ......p.q.q.s.w.
 800da44:	007f 807f 807b c071 c071 e070 7070 7070     ....{.q.q.p.pppp
	...

0800da5c <acGUI_Font20B_ASCII_004C>:
 800da5c:	0000 0000 0000 0070 0070 0070 0070 0070     ......p.p.p.p.p.
 800da6c:	0070 0070 0070 0070 0070 c07f c07f c07f     p.p.p.p.p.......
	...

0800da84 <acGUI_Font20B_ASCII_004D>:
 800da84:	0000 0000 0000 3c78 3c78 7c7c 7c7c 7c7c     ......x<x<||||||
 800da94:	dc76 dc76 dc76 dc76 9c73 9c73 9c73 1c71     v.v.v.v.s.s.s.q.
	...

0800daac <acGUI_Font20B_ASCII_004E>:
 800daac:	0000 0000 0000 7070 7078 707c 707c 707e     ......ppxp|p|p~p
 800dabc:	7076 7077 7073 f073 f071 f071 f070 7070     vpwpsps.q.q.p.pp
	...

0800dad4 <acGUI_Font20B_ASCII_004F>:
 800dad4:	0000 0000 0000 8007 e01f f03f 7038 3870     ..........?.8pp8
 800dae4:	3870 3870 3870 3870 7038 f03f e01f 8007     p8p8p8p88p?.....
	...

0800dafc <acGUI_Font20B_ASCII_0050>:
 800dafc:	0000 0000 0000 807f c07f e07f e070 e070     ............p.p.
 800db0c:	e07f c07f 807f 0070 0070 0070 0070 0070     ......p.p.p.p.p.
	...

0800db24 <acGUI_Font20B_ASCII_0051>:
 800db24:	0000 0000 0000 c00f e01f f03f 7038 3870     ..........?.8pp8
 800db34:	3870 3870 3871 f873 f839 f03f f01f b80f     p8p8q8s.9.?.....
 800db44:	1000 0000 0000 0000                         ........

0800db4c <acGUI_Font20B_ASCII_0052>:
 800db4c:	0000 0000 0000 c07f e07f f07f 7070 7070     ............pppp
 800db5c:	f07f e07f 807f c073 e071 e070 f070 7870     ......s.q.p.p.px
	...

0800db74 <acGUI_Font20B_ASCII_0053>:
 800db74:	0000 0000 0000 801f c03f e07f e070 0070     ........?...p.p.
 800db84:	007f c03f e00f e000 e070 e07f c03f 801f     ..?.....p...?...
	...

0800db9c <acGUI_Font20B_ASCII_0054>:
 800db9c:	0000 0000 0000 e0ff e0ff e0ff 000e 000e     ................
 800dbac:	000e 000e 000e 000e 000e 000e 000e 000e     ................
	...

0800dbc4 <acGUI_Font20B_ASCII_0055>:
 800dbc4:	0000 0000 0000 7070 7070 7070 7070 7070     ......pppppppppp
 800dbd4:	7070 7070 7070 7070 f078 e03f e03f 800f     ppppppppx.?.?...
	...

0800dbec <acGUI_Font20B_ASCII_0056>:
 800dbec:	0000 0000 0000 38e0 38e0 7070 7070 7070     .......8.8pppppp
 800dbfc:	e038 e038 c01d c01d c01d 800f 800f 800f     8.8.............
	...

0800dc14 <acGUI_Font20B_ASCII_0057>:
	...
 800dc1c:	e100 80c3 c3e1 e380 80e3 6773 7300 0067     ..........sg.sg.
 800dc2c:	7777 7700 0077 3776 7600 0037 3e3e 3e00     ww.ww.v7.v7.>>.>
 800dc3c:	003e 1e3c 3c00 001e 0000 0000 0000 0000     >.<..<..........
 800dc4c:	0000 0000                                   ....

0800dc50 <acGUI_Font20B_ASCII_0058>:
 800dc50:	0000 0000 0000 e070 e070 c039 8019 801f     ......p.p.9.....
 800dc60:	000f 000f 000f 801f 8019 c039 e070 e070     ..........9.p.p.
	...

0800dc78 <acGUI_Font20B_ASCII_0059>:
 800dc78:	0000 0000 0000 7070 7070 e038 c01d c01d     ......pppp8.....
 800dc88:	800f 800f 0007 0007 0007 0007 0007 0007     ................
	...

0800dca0 <acGUI_Font20B_ASCII_005A>:
 800dca0:	0000 0000 0000 c07f c07f c07f 8003 0007     ................
 800dcb0:	000e 001e 001c 0038 0070 c0ff c0ff c0ff     ......8.p.......
	...

0800dcc8 <acGUI_Font20B_ASCII_005B>:
 800dcc8:	0000 7c00 7c7c 7070 7070 7070 7070 7070     ...|||pppppppppp
 800dcd8:	7c70 7c7c                                   p|||

0800dcdc <acGUI_Font20B_ASCII_005C>:
 800dcdc:	0000 c000 60c0 6060 7060 3030 3030 1818     .....````p0000..
 800dcec:	0000 0000                                   ....

0800dcf0 <acGUI_Font20B_ASCII_005D>:
 800dcf0:	0000 f800 f8f8 3838 3838 3838 3838 3838     ......8888888888
 800dd00:	f838 f8f8                                   8...

0800dd04 <acGUI_Font20B_ASCII_005E>:
 800dd04:	0000 0000 0000 000e 000e 001f 001b 803b     ..............;.
 800dd14:	8031 c071 0000 0000 0000 0000 0000 0000     1.q.............
	...

0800dd2c <acGUI_Font20B_ASCII_005F>:
	...
 800dd50:	c0ff c0ff                                   ....

0800dd54 <acGUI_Font20B_ASCII_0060>:
 800dd54:	0000 e000 3060 0000 0000 0000 0000 0000     ....`0..........
 800dd64:	0000 0000                                   ....

0800dd68 <acGUI_Font20B_ASCII_0061>:
	...
 800dd74:	001f 803f 8063 8007 801f 803b 8073 8073     ..?.c.....;.s.s.
 800dd84:	807f c03d 0000 0000 0000 0000               ..=.........

0800dd90 <acGUI_Font20B_ASCII_0062>:
 800dd90:	0000 0000 0000 0070 0070 0070 0077 807f     ......p.p.p.w...
 800dda0:	c07b c071 c071 c071 c071 c07b 807f 0077     {.q.q.q.q.{...w.
	...

0800ddb8 <acGUI_Font20B_ASCII_0063>:
	...
 800ddc4:	001e 003f 807b 0071 0070 0070 0071 807b     ..?.{.q.p.p.q.{.
 800ddd4:	003f 001e 0000 0000 0000 0000               ?...........

0800dde0 <acGUI_Font20B_ASCII_0064>:
 800dde0:	0000 0000 0000 c001 c001 c001 c01d c03f     ..............?.
 800ddf0:	c07b c071 c071 c071 c071 c07b c03f c01d     {.q.q.q.q.{.?...
	...

0800de08 <acGUI_Font20B_ASCII_0065>:
	...
 800de14:	001f 803f c071 c071 c07f c07f 0070 c071     ..?.q.q.....p.q.
 800de24:	803f 001f 0000 0000 0000 0000               ?...........

0800de30 <acGUI_Font20B_ASCII_0066>:
 800de30:	0000 3c00 707c fcfc 7070 7070 7070 7070     ...<|p..pppppppp
 800de40:	0000 0000                                   ....

0800de44 <acGUI_Font20B_ASCII_0067>:
	...
 800de50:	c01d c03f c07b c071 c071 c071 c071 c07b     ..?.{.q.q.q.q.{.
 800de60:	c03f c01d c001 c071 807f 003f               ?.....q...?.

0800de6c <acGUI_Font20B_ASCII_0068>:
 800de6c:	0000 0000 0000 0070 0070 0070 8077 c07f     ......p.p.p.w...
 800de7c:	c079 c071 c071 c071 c071 c071 c071 c071     y.q.q.q.q.q.q.q.
	...

0800de94 <acGUI_Font20B_ASCII_0069>:
 800de94:	0000 7000 0070 7070 7070 7070 7070 7070     ...pp.pppppppppp
 800dea4:	0000 0000                                   ....

0800dea8 <acGUI_Font20B_ASCII_006A>:
 800dea8:	0000 7000 0070 7070 7070 7070 7070 7070     ...pp.pppppppppp
 800deb8:	7070 e0f0                                   pp..

0800debc <acGUI_Font20B_ASCII_006B>:
 800debc:	0000 0000 0000 0070 0070 0070 c071 8073     ......p.p.p.q.s.
 800decc:	0077 007e 007e 007f 0077 8073 8073 c071     w.~.~...w.s.s.q.
	...

0800dee4 <acGUI_Font20B_ASCII_006C>:
 800dee4:	0000 7000 7070 7070 7070 7070 7070 7070     ...ppppppppppppp
 800def4:	0000 0000                                   ....

0800def8 <acGUI_Font20B_ASCII_006D>:
	...
 800df08:	0000 9e77 7f00 00ff e779 7100 00c7 c771     ..w.....y..q..q.
 800df18:	7100 00c7 c771 7100 00c7 c771 7100 00c7     .q..q..q..q..q..
	...

0800df34 <acGUI_Font20B_ASCII_006E>:
	...
 800df40:	8077 c07f c079 c071 c071 c071 c071 c071     w...y.q.q.q.q.q.
 800df50:	c071 c071 0000 0000 0000 0000               q.q.........

0800df5c <acGUI_Font20B_ASCII_006F>:
	...
 800df68:	001f 803f c07b c071 c071 c071 c071 c07b     ..?.{.q.q.q.q.{.
 800df78:	803f 001f 0000 0000 0000 0000               ?...........

0800df84 <acGUI_Font20B_ASCII_0070>:
	...
 800df90:	0077 807f c07b c071 c071 c071 c071 c07b     w...{.q.q.q.q.{.
 800dfa0:	807f 0077 0070 0070 0070 0070               ..w.p.p.p.p.

0800dfac <acGUI_Font20B_ASCII_0071>:
	...
 800dfb8:	c01d c03f c07b c071 c071 c071 c071 c07b     ..?.{.q.q.q.q.{.
 800dfc8:	c03f c01d c001 c001 c001 c001               ?...........

0800dfd4 <acGUI_Font20B_ASCII_0072>:
 800dfd4:	0000 0000 0000 7e76 7078 7070 7070 7070     ......v~xppppppp
 800dfe4:	0000 0000                                   ....

0800dfe8 <acGUI_Font20B_ASCII_0073>:
	...
 800dff4:	003f 807f 8073 0078 003e 001f 8007 8073     ?...s.x.>.....s.
 800e004:	807f 003f 0000 0000 0000 0000               ..?.........

0800e010 <acGUI_Font20B_ASCII_0074>:
 800e010:	0000 3000 7070 fcfc 7070 7070 7070 3c7c     ...0pp..pppppp|<
 800e020:	0000 0000                                   ....

0800e024 <acGUI_Font20B_ASCII_0075>:
	...
 800e030:	c071 c071 c071 c071 c071 c071 c071 c073     q.q.q.q.q.q.q.s.
 800e040:	c07f c03d 0000 0000 0000 0000               ..=.........

0800e04c <acGUI_Font20B_ASCII_0076>:
	...
 800e058:	c071 c071 c071 803b 803b 001b 001f 001f     q.q.q.;.;.......
 800e068:	000e 000e 0000 0000 0000 0000               ............

0800e074 <acGUI_Font20B_ASCII_0077>:
	...
 800e080:	8ee3 8ee3 8c63 dc77 dc76 d836 f83e 783c     ....c.w.v.6.>.<x
 800e090:	701c 701c 0000 0000 0000 0000               .p.p........

0800e09c <acGUI_Font20B_ASCII_0078>:
	...
 800e0a8:	c071 803b 803b 001f 000e 000e 001f 803b     q.;.;.........;.
 800e0b8:	803b c071 0000 0000 0000 0000               ;.q.........

0800e0c4 <acGUI_Font20B_ASCII_0079>:
	...
 800e0d0:	e0e0 e0e0 c071 c071 8031 803b 801b 001f     ....q.q.1.;.....
 800e0e0:	001f 000e 000e 001c 007c 0078               ........|.x.

0800e0ec <acGUI_Font20B_ASCII_007A>:
	...
 800e0f8:	007f 007f 0007 000e 001c 001c 0038 0070     ............8.p.
 800e108:	007f 007f 0000 0000 0000 0000               ............

0800e114 <acGUI_Font20B_ASCII_007B>:
 800e114:	0000 0e00 181e 1818 1818 7038 3870 1818     ..........8pp8..
 800e124:	1818 0e1e                                   ....

0800e128 <acGUI_Font20B_ASCII_007C>:
 800e128:	0000 6000 6060 6060 6060 6060 6060 6060     ...`````````````
 800e138:	6060 6060                                   ````

0800e13c <acGUI_Font20B_ASCII_007D>:
 800e13c:	0000 e000 30f0 3030 3030 1c38 381c 3030     .....000008..800
 800e14c:	3030 e0f0                                   00..

0800e150 <acGUI_Font20B_ASCII_007E>:
	...
 800e15c:	0000 4078 c0ff c0ff 8087 0000 0000 0000     ..x@............
	...

0800e178 <LCD_aMirror>:
 800e178:	8000 c040 a020 e060 9010 d050 b030 f070     ..@. .`...P.0.p.
 800e188:	8808 c848 a828 e868 9818 d858 b838 f878     ..H.(.h...X.8.x.
 800e198:	8404 c444 a424 e464 9414 d454 b434 f474     ..D.$.d...T.4.t.
 800e1a8:	8c0c cc4c ac2c ec6c 9c1c dc5c bc3c fc7c     ..L.,.l...\.<.|.
 800e1b8:	8202 c242 a222 e262 9212 d252 b232 f272     ..B.".b...R.2.r.
 800e1c8:	8a0a ca4a aa2a ea6a 9a1a da5a ba3a fa7a     ..J.*.j...Z.:.z.
 800e1d8:	8606 c646 a626 e666 9616 d656 b636 f676     ..F.&.f...V.6.v.
 800e1e8:	8e0e ce4e ae2e ee6e 9e1e de5e be3e fe7e     ..N...n...^.>.~.
 800e1f8:	8101 c141 a121 e161 9111 d151 b131 f171     ..A.!.a...Q.1.q.
 800e208:	8909 c949 a929 e969 9919 d959 b939 f979     ..I.).i...Y.9.y.
 800e218:	8505 c545 a525 e565 9515 d555 b535 f575     ..E.%.e...U.5.u.
 800e228:	8d0d cd4d ad2d ed6d 9d1d dd5d bd3d fd7d     ..M.-.m...].=.}.
 800e238:	8303 c343 a323 e363 9313 d353 b333 f373     ..C.#.c...S.3.s.
 800e248:	8b0b cb4b ab2b eb6b 9b1b db5b bb3b fb7b     ..K.+.k...[.;.{.
 800e258:	8707 c747 a727 e767 9717 d757 b737 f777     ..G.'.g...W.7.w.
 800e268:	8f0f cf4f af2f ef6f 9f1f df5f bf3f ff7f     ..O./.o..._.?...

0800e278 <_SetColorAPI>:
 800e278:	9005 0800 8fc9 0800 9041 0800               ........A...

0800e284 <GUI__aConvert_63_255>:
 800e284:	0400 0c08 1410 1c18 2420 2d28 3531 3d39     ........ $(-159=
 800e294:	4541 4d49 5551 5d59 6561 6d69 7571 7d79     AEIMQUY]aeimquy}
 800e2a4:	8682 8e8a 9692 9e9a a6a2 aeaa b6b2 beba     ................
 800e2b4:	c6c2 ceca d7d2 dfdb e7e3 efeb f7f3 fffb     ................

0800e2c4 <GUI__aConvert_31_255>:
 800e2c4:	0800 1910 2921 3a31 4a42 5b52 6b63 7b73     ....!)1:BJR[cks{
 800e2d4:	8c84 9c94 ada5 bdb5 cec5 ded6 efe6 fff7     ................

0800e2e4 <GUI__aConvert_255_63>:
 800e2e4:	0000 0100 0101 0201 0202 0302 0303 0403     ................
 800e2f4:	0404 0504 0505 0605 0606 0706 0707 0807     ................
 800e304:	0808 0908 0909 0a09 0a0a 0b0a 0b0b 0c0b     ................
 800e314:	0c0c 0d0c 0d0d 0e0d 0e0e 0f0e 0f0f 100f     ................
 800e324:	1010 1110 1111 1211 1212 1312 1313 1413     ................
 800e334:	1414 1514 1515 1515 1616 1616 1717 1717     ................
 800e344:	1818 1818 1919 1919 1a1a 1a1a 1b1b 1b1b     ................
 800e354:	1c1c 1c1c 1d1d 1d1d 1e1e 1e1e 1f1f 1f1f     ................
 800e364:	2020 2020 2121 2121 2222 2222 2323 2323         !!!!""""####
 800e374:	2424 2424 2525 2525 2626 2626 2727 2727     $$$$%%%%&&&&''''
 800e384:	2828 2828 2929 2929 2a2a 2a2a 2b2a 2b2b     (((())))*****+++
 800e394:	2c2b 2c2c 2d2c 2d2d 2e2d 2e2e 2f2e 2f2f     +,,,,----....///
 800e3a4:	302f 3030 3130 3131 3231 3232 3332 3333     /000011112222333
 800e3b4:	3433 3434 3534 3535 3635 3636 3736 3737     3444455556666777
 800e3c4:	3837 3838 3938 3939 3a39 3a3a 3b3a 3b3b     788889999::::;;;
 800e3d4:	3c3b 3c3c 3d3c 3d3d 3e3d 3e3e 3f3e 3f3f     ;<<<<====>>>>???

0800e3e4 <GUI__aConvert_255_31>:
 800e3e4:	0000 0000 0100 0101 0101 0101 0201 0202     ................
 800e3f4:	0202 0202 0302 0303 0303 0303 0403 0404     ................
 800e404:	0404 0404 0504 0505 0505 0505 0505 0606     ................
 800e414:	0606 0606 0606 0707 0707 0707 0707 0808     ................
 800e424:	0808 0808 0808 0909 0909 0909 0909 0a09     ................
 800e434:	0a0a 0a0a 0a0a 0b0a 0b0b 0b0b 0b0b 0c0b     ................
 800e444:	0c0c 0c0c 0c0c 0d0c 0d0d 0d0d 0d0d 0d0d     ................
 800e454:	0e0e 0e0e 0e0e 0e0e 0f0f 0f0f 0f0f 0f0f     ................
 800e464:	1010 1010 1010 1010 1111 1111 1111 1111     ................
 800e474:	1212 1212 1212 1212 1312 1313 1313 1313     ................
 800e484:	1413 1414 1414 1414 1514 1515 1515 1515     ................
 800e494:	1615 1616 1616 1616 1616 1717 1717 1717     ................
 800e4a4:	1717 1818 1818 1818 1818 1919 1919 1919     ................
 800e4b4:	1919 1a1a 1a1a 1a1a 1a1a 1b1b 1b1b 1b1b     ................
 800e4c4:	1b1b 1c1b 1c1c 1c1c 1c1c 1d1c 1d1d 1d1d     ................
 800e4d4:	1d1d 1e1d 1e1e 1e1e 1e1e 1f1e 1f1f 1f1f     ................

0800e4e4 <GUI_UC_None>:
 800e4e4:	9f81 0800 9f85 0800 9f89 0800 9f8d 0800     ................

0800e4f4 <LCD_API_ColorConv_0>:
 800e4f4:	a169 0800 a149 0800 a0fd 0800 0000 0000     i...I...........
	...
